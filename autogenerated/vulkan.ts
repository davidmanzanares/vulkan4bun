
import { dlopen, FFIType, ptr, read } from "bun:ffi";

globalThis.ptrBufferRefs = new Set();

export const VULKAN_CORE_H_ = 1;
export const VK_VERSION_1_0 = 1;
export const VK_USE_64_BIT_PTR_DEFINES = 0;
export const VK_NULL_HANDLE = 0;
export const VK_HEADER_VERSION = 224;
export const VK_ATTACHMENT_UNUSED = 4294967295;
export const VK_QUEUE_FAMILY_IGNORED = 4294967295;
export const VK_REMAINING_ARRAY_LAYERS = 4294967295;
export const VK_REMAINING_MIP_LEVELS = 4294967295;
export const VK_SUBPASS_EXTERNAL = 4294967295;
export const VK_VERSION_1_1 = 1;
export const VK_VERSION_1_2 = 1;
export const VK_VERSION_1_3 = 1;
export const VK_KHR_surface = 1;
export const VK_KHR_SURFACE_SPEC_VERSION = 25;
export const VK_KHR_swapchain = 1;
export const VK_KHR_SWAPCHAIN_SPEC_VERSION = 70;
export const VK_KHR_display = 1;
export const VK_KHR_DISPLAY_SPEC_VERSION = 23;
export const VK_KHR_display_swapchain = 1;
export const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
export const VK_KHR_sampler_mirror_clamp_to_edge = 1;
export const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
export const VK_KHR_dynamic_rendering = 1;
export const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = 1;
export const VK_KHR_multiview = 1;
export const VK_KHR_MULTIVIEW_SPEC_VERSION = 1;
export const VK_KHR_get_physical_device_properties2 = 1;
export const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
export const VK_KHR_device_group = 1;
export const VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4;
export const VK_KHR_shader_draw_parameters = 1;
export const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
export const VK_KHR_maintenance1 = 1;
export const VK_KHR_MAINTENANCE_1_SPEC_VERSION = 2;
export const VK_KHR_device_group_creation = 1;
export const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
export const VK_KHR_external_memory_capabilities = 1;
export const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
export const VK_KHR_external_memory = 1;
export const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
export const VK_KHR_external_memory_fd = 1;
export const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
export const VK_KHR_external_semaphore_capabilities = 1;
export const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
export const VK_KHR_external_semaphore = 1;
export const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
export const VK_KHR_external_semaphore_fd = 1;
export const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
export const VK_KHR_push_descriptor = 1;
export const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
export const VK_KHR_shader_float16_int8 = 1;
export const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
export const VK_KHR_16bit_storage = 1;
export const VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;
export const VK_KHR_incremental_present = 1;
export const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 2;
export const VK_KHR_descriptor_update_template = 1;
export const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
export const VK_KHR_imageless_framebuffer = 1;
export const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
export const VK_KHR_create_renderpass2 = 1;
export const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
export const VK_KHR_shared_presentable_image = 1;
export const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
export const VK_KHR_external_fence_capabilities = 1;
export const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
export const VK_KHR_external_fence = 1;
export const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
export const VK_KHR_external_fence_fd = 1;
export const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
export const VK_KHR_performance_query = 1;
export const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;
export const VK_KHR_maintenance2 = 1;
export const VK_KHR_MAINTENANCE_2_SPEC_VERSION = 1;
export const VK_KHR_get_surface_capabilities2 = 1;
export const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
export const VK_KHR_variable_pointers = 1;
export const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
export const VK_KHR_get_display_properties2 = 1;
export const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
export const VK_KHR_dedicated_allocation = 1;
export const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
export const VK_KHR_storage_buffer_storage_class = 1;
export const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
export const VK_KHR_relaxed_block_layout = 1;
export const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
export const VK_KHR_get_memory_requirements2 = 1;
export const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
export const VK_KHR_image_format_list = 1;
export const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
export const VK_KHR_sampler_ycbcr_conversion = 1;
export const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
export const VK_KHR_bind_memory2 = 1;
export const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
export const VK_KHR_maintenance3 = 1;
export const VK_KHR_MAINTENANCE_3_SPEC_VERSION = 1;
export const VK_KHR_draw_indirect_count = 1;
export const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
export const VK_KHR_shader_subgroup_extended_types = 1;
export const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;
export const VK_KHR_8bit_storage = 1;
export const VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1;
export const VK_KHR_shader_atomic_int64 = 1;
export const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
export const VK_KHR_shader_clock = 1;
export const VK_KHR_SHADER_CLOCK_SPEC_VERSION = 1;
export const VK_KHR_global_priority = 1;
export const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = 1;
export const VK_KHR_driver_properties = 1;
export const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
export const VK_KHR_shader_float_controls = 1;
export const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
export const VK_KHR_depth_stencil_resolve = 1;
export const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
export const VK_KHR_swapchain_mutable_format = 1;
export const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
export const VK_KHR_timeline_semaphore = 1;
export const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;
export const VK_KHR_vulkan_memory_model = 1;
export const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
export const VK_KHR_shader_terminate_invocation = 1;
export const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;
export const VK_KHR_fragment_shading_rate = 1;
export const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 2;
export const VK_KHR_spirv_1_4 = 1;
export const VK_KHR_SPIRV_1_4_SPEC_VERSION = 1;
export const VK_KHR_surface_protected_capabilities = 1;
export const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
export const VK_KHR_separate_depth_stencil_layouts = 1;
export const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;
export const VK_KHR_present_wait = 1;
export const VK_KHR_PRESENT_WAIT_SPEC_VERSION = 1;
export const VK_KHR_uniform_buffer_standard_layout = 1;
export const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
export const VK_KHR_buffer_device_address = 1;
export const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;
export const VK_KHR_deferred_host_operations = 1;
export const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4;
export const VK_KHR_pipeline_executable_properties = 1;
export const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
export const VK_KHR_shader_integer_dot_product = 1;
export const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = 1;
export const VK_KHR_pipeline_library = 1;
export const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1;
export const VK_KHR_shader_non_semantic_info = 1;
export const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;
export const VK_KHR_present_id = 1;
export const VK_KHR_PRESENT_ID_SPEC_VERSION = 1;
export const VK_KHR_synchronization2 = 1;
export const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1;
export const VK_KHR_fragment_shader_barycentric = 1;
export const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
export const VK_KHR_shader_subgroup_uniform_control_flow = 1;
export const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = 1;
export const VK_KHR_zero_initialize_workgroup_memory = 1;
export const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1;
export const VK_KHR_workgroup_memory_explicit_layout = 1;
export const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1;
export const VK_KHR_copy_commands2 = 1;
export const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;
export const VK_KHR_format_feature_flags2 = 1;
export const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = 1;
export const VK_KHR_ray_tracing_maintenance1 = 1;
export const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = 1;
export const VK_KHR_portability_enumeration = 1;
export const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = 1;
export const VK_KHR_maintenance4 = 1;
export const VK_KHR_MAINTENANCE_4_SPEC_VERSION = 2;
export const VK_EXT_debug_report = 1;
export const VK_EXT_DEBUG_REPORT_SPEC_VERSION = 10;
export const VK_NV_glsl_shader = 1;
export const VK_NV_GLSL_SHADER_SPEC_VERSION = 1;
export const VK_EXT_depth_range_unrestricted = 1;
export const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
export const VK_IMG_filter_cubic = 1;
export const VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1;
export const VK_AMD_rasterization_order = 1;
export const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
export const VK_AMD_shader_trinary_minmax = 1;
export const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
export const VK_AMD_shader_explicit_vertex_parameter = 1;
export const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
export const VK_EXT_debug_marker = 1;
export const VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4;
export const VK_AMD_gcn_shader = 1;
export const VK_AMD_GCN_SHADER_SPEC_VERSION = 1;
export const VK_NV_dedicated_allocation = 1;
export const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
export const VK_EXT_transform_feedback = 1;
export const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
export const VK_NVX_binary_import = 1;
export const VK_NVX_BINARY_IMPORT_SPEC_VERSION = 1;
export const VK_NVX_image_view_handle = 1;
export const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2;
export const VK_AMD_draw_indirect_count = 1;
export const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
export const VK_AMD_negative_viewport_height = 1;
export const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
export const VK_AMD_gpu_shader_half_float = 1;
export const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
export const VK_AMD_shader_ballot = 1;
export const VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;
export const VK_AMD_texture_gather_bias_lod = 1;
export const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
export const VK_AMD_shader_info = 1;
export const VK_AMD_SHADER_INFO_SPEC_VERSION = 1;
export const VK_AMD_shader_image_load_store_lod = 1;
export const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
export const VK_NV_corner_sampled_image = 1;
export const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
export const VK_IMG_format_pvrtc = 1;
export const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1;
export const VK_NV_external_memory_capabilities = 1;
export const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
export const VK_NV_external_memory = 1;
export const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
export const VK_EXT_validation_flags = 1;
export const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 2;
export const VK_EXT_shader_subgroup_ballot = 1;
export const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
export const VK_EXT_shader_subgroup_vote = 1;
export const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
export const VK_EXT_texture_compression_astc_hdr = 1;
export const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
export const VK_EXT_astc_decode_mode = 1;
export const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
export const VK_EXT_pipeline_robustness = 1;
export const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = 1;
export const VK_EXT_conditional_rendering = 1;
export const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
export const VK_NV_clip_space_w_scaling = 1;
export const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
export const VK_EXT_direct_mode_display = 1;
export const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
export const VK_EXT_display_surface_counter = 1;
export const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
export const VK_EXT_display_control = 1;
export const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
export const VK_GOOGLE_display_timing = 1;
export const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
export const VK_NV_sample_mask_override_coverage = 1;
export const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
export const VK_NV_geometry_shader_passthrough = 1;
export const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
export const VK_NV_viewport_array2 = 1;
export const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = 1;
export const VK_NVX_multiview_per_view_attributes = 1;
export const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
export const VK_NV_viewport_swizzle = 1;
export const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
export const VK_EXT_discard_rectangles = 1;
export const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1;
export const VK_EXT_conservative_rasterization = 1;
export const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
export const VK_EXT_depth_clip_enable = 1;
export const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
export const VK_EXT_swapchain_colorspace = 1;
export const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
export const VK_EXT_hdr_metadata = 1;
export const VK_EXT_HDR_METADATA_SPEC_VERSION = 2;
export const VK_EXT_external_memory_dma_buf = 1;
export const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
export const VK_EXT_queue_family_foreign = 1;
export const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
export const VK_EXT_debug_utils = 1;
export const VK_EXT_DEBUG_UTILS_SPEC_VERSION = 2;
export const VK_EXT_sampler_filter_minmax = 1;
export const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
export const VK_AMD_gpu_shader_int16 = 1;
export const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
export const VK_AMD_mixed_attachment_samples = 1;
export const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
export const VK_AMD_shader_fragment_mask = 1;
export const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
export const VK_EXT_inline_uniform_block = 1;
export const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
export const VK_EXT_shader_stencil_export = 1;
export const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
export const VK_EXT_sample_locations = 1;
export const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
export const VK_EXT_blend_operation_advanced = 1;
export const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
export const VK_NV_fragment_coverage_to_color = 1;
export const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
export const VK_NV_framebuffer_mixed_samples = 1;
export const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
export const VK_NV_fill_rectangle = 1;
export const VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;
export const VK_NV_shader_sm_builtins = 1;
export const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
export const VK_EXT_post_depth_coverage = 1;
export const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
export const VK_EXT_image_drm_format_modifier = 1;
export const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 2;
export const VK_EXT_validation_cache = 1;
export const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
export const VK_EXT_descriptor_indexing = 1;
export const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
export const VK_EXT_shader_viewport_index_layer = 1;
export const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
export const VK_NV_shading_rate_image = 1;
export const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
export const VK_NV_ray_tracing = 1;
export const VK_NV_RAY_TRACING_SPEC_VERSION = 3;
export const VK_SHADER_UNUSED_KHR = 4294967295;
export const VK_NV_representative_fragment_test = 1;
export const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
export const VK_EXT_filter_cubic = 1;
export const VK_EXT_FILTER_CUBIC_SPEC_VERSION = 3;
export const VK_QCOM_render_pass_shader_resolve = 1;
export const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;
export const VK_EXT_global_priority = 1;
export const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
export const VK_EXT_external_memory_host = 1;
export const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
export const VK_AMD_buffer_marker = 1;
export const VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;
export const VK_AMD_pipeline_compiler_control = 1;
export const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
export const VK_EXT_calibrated_timestamps = 1;
export const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 2;
export const VK_AMD_shader_core_properties = 1;
export const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
export const VK_AMD_memory_overallocation_behavior = 1;
export const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
export const VK_EXT_vertex_attribute_divisor = 1;
export const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
export const VK_EXT_pipeline_creation_feedback = 1;
export const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
export const VK_NV_shader_subgroup_partitioned = 1;
export const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
export const VK_NV_compute_shader_derivatives = 1;
export const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
export const VK_NV_mesh_shader = 1;
export const VK_NV_MESH_SHADER_SPEC_VERSION = 1;
export const VK_NV_fragment_shader_barycentric = 1;
export const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
export const VK_NV_shader_image_footprint = 1;
export const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
export const VK_NV_scissor_exclusive = 1;
export const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1;
export const VK_NV_device_diagnostic_checkpoints = 1;
export const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
export const VK_INTEL_shader_integer_functions2 = 1;
export const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
export const VK_INTEL_performance_query = 1;
export const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;
export const VK_EXT_pci_bus_info = 1;
export const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2;
export const VK_AMD_display_native_hdr = 1;
export const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
export const VK_EXT_fragment_density_map = 1;
export const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 2;
export const VK_EXT_scalar_block_layout = 1;
export const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
export const VK_GOOGLE_hlsl_functionality1 = 1;
export const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = 1;
export const VK_GOOGLE_decorate_string = 1;
export const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
export const VK_EXT_subgroup_size_control = 1;
export const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
export const VK_AMD_shader_core_properties2 = 1;
export const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
export const VK_AMD_device_coherent_memory = 1;
export const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
export const VK_EXT_shader_image_atomic_int64 = 1;
export const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;
export const VK_EXT_memory_budget = 1;
export const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
export const VK_EXT_memory_priority = 1;
export const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
export const VK_NV_dedicated_allocation_image_aliasing = 1;
export const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
export const VK_EXT_buffer_device_address = 1;
export const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
export const VK_EXT_tooling_info = 1;
export const VK_EXT_TOOLING_INFO_SPEC_VERSION = 1;
export const VK_EXT_separate_stencil_usage = 1;
export const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
export const VK_EXT_validation_features = 1;
export const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 5;
export const VK_NV_cooperative_matrix = 1;
export const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
export const VK_NV_coverage_reduction_mode = 1;
export const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
export const VK_EXT_fragment_shader_interlock = 1;
export const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
export const VK_EXT_ycbcr_image_arrays = 1;
export const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
export const VK_EXT_provoking_vertex = 1;
export const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = 1;
export const VK_EXT_headless_surface = 1;
export const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;
export const VK_EXT_line_rasterization = 1;
export const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
export const VK_EXT_shader_atomic_float = 1;
export const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;
export const VK_EXT_host_query_reset = 1;
export const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
export const VK_EXT_index_type_uint8 = 1;
export const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
export const VK_EXT_extended_dynamic_state = 1;
export const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;
export const VK_EXT_shader_atomic_float2 = 1;
export const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = 1;
export const VK_EXT_shader_demote_to_helper_invocation = 1;
export const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
export const VK_NV_device_generated_commands = 1;
export const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
export const VK_NV_inherited_viewport_scissor = 1;
export const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = 1;
export const VK_EXT_texel_buffer_alignment = 1;
export const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
export const VK_QCOM_render_pass_transform = 1;
export const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 3;
export const VK_EXT_device_memory_report = 1;
export const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2;
export const VK_EXT_acquire_drm_display = 1;
export const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = 1;
export const VK_EXT_robustness2 = 1;
export const VK_EXT_ROBUSTNESS_2_SPEC_VERSION = 1;
export const VK_EXT_custom_border_color = 1;
export const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;
export const VK_GOOGLE_user_type = 1;
export const VK_GOOGLE_USER_TYPE_SPEC_VERSION = 1;
export const VK_EXT_private_data = 1;
export const VK_EXT_PRIVATE_DATA_SPEC_VERSION = 1;
export const VK_EXT_pipeline_creation_cache_control = 1;
export const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;
export const VK_NV_device_diagnostics_config = 1;
export const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 2;
export const VK_QCOM_render_pass_store_ops = 1;
export const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = 2;
export const VK_EXT_graphics_pipeline_library = 1;
export const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = 1;
export const VK_AMD_shader_early_and_late_fragment_tests = 1;
export const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = 1;
export const VK_NV_fragment_shading_rate_enums = 1;
export const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;
export const VK_NV_ray_tracing_motion_blur = 1;
export const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = 1;
export const VK_EXT_ycbcr_2plane_444_formats = 1;
export const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = 1;
export const VK_EXT_fragment_density_map2 = 1;
export const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;
export const VK_QCOM_rotated_copy_commands = 1;
export const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 1;
export const VK_EXT_image_robustness = 1;
export const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;
export const VK_EXT_image_compression_control = 1;
export const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = 1;
export const VK_EXT_attachment_feedback_loop_layout = 1;
export const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = 2;
export const VK_EXT_4444_formats = 1;
export const VK_EXT_4444_FORMATS_SPEC_VERSION = 1;
export const VK_ARM_rasterization_order_attachment_access = 1;
export const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;
export const VK_EXT_rgba10x6_formats = 1;
export const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = 1;
export const VK_NV_acquire_winrt_display = 1;
export const VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION = 1;
export const VK_VALVE_mutable_descriptor_type = 1;
export const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;
export const VK_EXT_vertex_input_dynamic_state = 1;
export const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = 2;
export const VK_EXT_physical_device_drm = 1;
export const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = 1;
export const VK_EXT_depth_clip_control = 1;
export const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = 1;
export const VK_EXT_primitive_topology_list_restart = 1;
export const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = 1;
export const VK_HUAWEI_subpass_shading = 1;
export const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = 2;
export const VK_HUAWEI_invocation_mask = 1;
export const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = 1;
export const VK_NV_external_memory_rdma = 1;
export const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = 1;
export const VK_EXT_pipeline_properties = 1;
export const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = 1;
export const VK_EXT_multisampled_render_to_single_sampled = 1;
export const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = 1;
export const VK_EXT_extended_dynamic_state2 = 1;
export const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = 1;
export const VK_EXT_color_write_enable = 1;
export const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = 1;
export const VK_EXT_primitives_generated_query = 1;
export const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = 1;
export const VK_EXT_global_priority_query = 1;
export const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = 1;
export const VK_EXT_image_view_min_lod = 1;
export const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = 1;
export const VK_EXT_multi_draw = 1;
export const VK_EXT_MULTI_DRAW_SPEC_VERSION = 1;
export const VK_EXT_image_2d_view_of_3d = 1;
export const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = 1;
export const VK_EXT_load_store_op_none = 1;
export const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = 1;
export const VK_EXT_border_color_swizzle = 1;
export const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = 1;
export const VK_EXT_pageable_device_local_memory = 1;
export const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = 1;
export const VK_VALVE_descriptor_set_host_mapping = 1;
export const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = 1;
export const VK_EXT_non_seamless_cube_map = 1;
export const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = 1;
export const VK_QCOM_fragment_density_map_offset = 1;
export const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = 1;
export const VK_NV_linear_color_attachment = 1;
export const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = 1;
export const VK_GOOGLE_surfaceless_query = 1;
export const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = 1;
export const VK_EXT_image_compression_control_swapchain = 1;
export const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = 1;
export const VK_QCOM_image_processing = 1;
export const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = 1;
export const VK_EXT_subpass_merge_feedback = 1;
export const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = 2;
export const VK_EXT_shader_module_identifier = 1;
export const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = 1;
export const VK_QCOM_tile_properties = 1;
export const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = 1;
export const VK_SEC_amigo_profiling = 1;
export const VK_SEC_AMIGO_PROFILING_SPEC_VERSION = 1;
export const VK_KHR_acceleration_structure = 1;
export const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 13;
export const VK_KHR_ray_tracing_pipeline = 1;
export const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1;
export const VK_KHR_ray_query = 1;
export const VK_KHR_RAY_QUERY_SPEC_VERSION = 1;

export const VkResult = {
	VK_SUCCESS: 0,
	VK_NOT_READY: 1,
	VK_TIMEOUT: 2,
	VK_EVENT_SET: 3,
	VK_EVENT_RESET: 4,
	VK_INCOMPLETE: 5,
	VK_ERROR_OUT_OF_HOST_MEMORY: -1,
	VK_ERROR_OUT_OF_DEVICE_MEMORY: -2,
	VK_ERROR_INITIALIZATION_FAILED: -3,
	VK_ERROR_DEVICE_LOST: -4,
	VK_ERROR_MEMORY_MAP_FAILED: -5,
	VK_ERROR_LAYER_NOT_PRESENT: -6,
	VK_ERROR_EXTENSION_NOT_PRESENT: -7,
	VK_ERROR_FEATURE_NOT_PRESENT: -8,
	VK_ERROR_INCOMPATIBLE_DRIVER: -9,
	VK_ERROR_TOO_MANY_OBJECTS: -10,
	VK_ERROR_FORMAT_NOT_SUPPORTED: -11,
	VK_ERROR_FRAGMENTED_POOL: -12,
	VK_ERROR_UNKNOWN: -13,
	VK_ERROR_OUT_OF_POOL_MEMORY: -1000069000,
	VK_ERROR_INVALID_EXTERNAL_HANDLE: -1000072003,
	VK_ERROR_FRAGMENTATION: -1000161000,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: -1000257000,
	VK_PIPELINE_COMPILE_REQUIRED: 1000297000,
	VK_ERROR_SURFACE_LOST_KHR: -1000000000,
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: -1000000001,
	VK_SUBOPTIMAL_KHR: 1000001003,
	VK_ERROR_OUT_OF_DATE_KHR: -1000001004,
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: -1000003001,
	VK_ERROR_VALIDATION_FAILED_EXT: -1000011001,
	VK_ERROR_INVALID_SHADER_NV: -1000012000,
	VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: -1000158000,
	VK_ERROR_NOT_PERMITTED_KHR: -1000174001,
	VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: -1000255000,
	VK_THREAD_IDLE_KHR: 1000268000,
	VK_THREAD_DONE_KHR: 1000268001,
	VK_OPERATION_DEFERRED_KHR: 1000268002,
	VK_OPERATION_NOT_DEFERRED_KHR: 1000268003,
	VK_ERROR_COMPRESSION_EXHAUSTED_EXT: -1000338000,
	VK_ERROR_OUT_OF_POOL_MEMORY_KHR: NaN,
	VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: NaN,
	VK_ERROR_FRAGMENTATION_EXT: NaN,
	VK_ERROR_NOT_PERMITTED_EXT: NaN,
	VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: NaN,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: NaN,
	VK_PIPELINE_COMPILE_REQUIRED_EXT: NaN,
	VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: NaN,
	VK_RESULT_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SUCCESS",
		"1": "VK_NOT_READY",
		"2": "VK_TIMEOUT",
		"3": "VK_EVENT_SET",
		"4": "VK_EVENT_RESET",
		"5": "VK_INCOMPLETE",
		"-1": "VK_ERROR_OUT_OF_HOST_MEMORY",
		"-2": "VK_ERROR_OUT_OF_DEVICE_MEMORY",
		"-3": "VK_ERROR_INITIALIZATION_FAILED",
		"-4": "VK_ERROR_DEVICE_LOST",
		"-5": "VK_ERROR_MEMORY_MAP_FAILED",
		"-6": "VK_ERROR_LAYER_NOT_PRESENT",
		"-7": "VK_ERROR_EXTENSION_NOT_PRESENT",
		"-8": "VK_ERROR_FEATURE_NOT_PRESENT",
		"-9": "VK_ERROR_INCOMPATIBLE_DRIVER",
		"-10": "VK_ERROR_TOO_MANY_OBJECTS",
		"-11": "VK_ERROR_FORMAT_NOT_SUPPORTED",
		"-12": "VK_ERROR_FRAGMENTED_POOL",
		"-13": "VK_ERROR_UNKNOWN",
		"-1000069000": "VK_ERROR_OUT_OF_POOL_MEMORY",
		"-1000072003": "VK_ERROR_INVALID_EXTERNAL_HANDLE",
		"-1000161000": "VK_ERROR_FRAGMENTATION",
		"-1000257000": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
		"1000297000": "VK_PIPELINE_COMPILE_REQUIRED",
		"-1000000000": "VK_ERROR_SURFACE_LOST_KHR",
		"-1000000001": "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
		"1000001003": "VK_SUBOPTIMAL_KHR",
		"-1000001004": "VK_ERROR_OUT_OF_DATE_KHR",
		"-1000003001": "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR",
		"-1000011001": "VK_ERROR_VALIDATION_FAILED_EXT",
		"-1000012000": "VK_ERROR_INVALID_SHADER_NV",
		"-1000158000": "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT",
		"-1000174001": "VK_ERROR_NOT_PERMITTED_KHR",
		"-1000255000": "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
		"1000268000": "VK_THREAD_IDLE_KHR",
		"1000268001": "VK_THREAD_DONE_KHR",
		"1000268002": "VK_OPERATION_DEFERRED_KHR",
		"1000268003": "VK_OPERATION_NOT_DEFERRED_KHR",
		"-1000338000": "VK_ERROR_COMPRESSION_EXHAUSTED_EXT",
		"NaN": "VK_ERROR_OUT_OF_POOL_MEMORY_KHR",
		"NaN": "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR",
		"NaN": "VK_ERROR_FRAGMENTATION_EXT",
		"NaN": "VK_ERROR_NOT_PERMITTED_EXT",
		"NaN": "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT",
		"NaN": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR",
		"NaN": "VK_PIPELINE_COMPILE_REQUIRED_EXT",
		"NaN": "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT",
		"2147483647": "VK_RESULT_MAX_ENUM",
}};
export const VkStructureType = {
	VK_STRUCTURE_TYPE_APPLICATION_INFO: 0,
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: 1,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: 2,
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: 3,
	VK_STRUCTURE_TYPE_SUBMIT_INFO: 4,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: 5,
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: 6,
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: 7,
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: 8,
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: 9,
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: 10,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: 11,
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: 12,
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: 13,
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: 14,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: 15,
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: 16,
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: 17,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: 18,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: 19,
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: 20,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: 21,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: 22,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: 23,
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: 24,
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: 25,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: 26,
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: 27,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: 28,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: 29,
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: 30,
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: 31,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: 32,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: 33,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: 34,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: 35,
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: 36,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: 37,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: 38,
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: 39,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: 40,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: 41,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: 42,
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: 43,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: 44,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: 45,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER: 46,
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: 47,
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: 48,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: 1000094000,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: 1000157000,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: 1000157001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: 1000083000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: 1000127000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: 1000127001,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: 1000060000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: 1000060003,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: 1000060004,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: 1000060005,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: 1000060006,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: 1000060013,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: 1000060014,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: 1000070000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: 1000070001,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: 1000146000,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: 1000146001,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: 1000146002,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: 1000146003,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: 1000146004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: 1000059000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: 1000059001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: 1000059002,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: 1000059003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: 1000059004,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: 1000059005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: 1000059006,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: 1000059007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: 1000059008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: 1000117000,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: 1000117001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: 1000117002,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: 1000117003,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: 1000053000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: 1000053001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: 1000053002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: 1000120000,
	VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: 1000145000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: 1000145001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: 1000145002,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: 1000145003,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: 1000156000,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: 1000156001,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: 1000156002,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: 1000156003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: 1000156004,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: 1000156005,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: 1000085000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: 1000071000,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: 1000071001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: 1000071002,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: 1000071003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: 1000071004,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: 1000072000,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: 1000072001,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: 1000072002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: 1000112000,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: 1000112001,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: 1000113000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: 1000077000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: 1000076000,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: 1000076001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: 1000168000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: 1000168001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: 1000063000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: 49,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: 50,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: 51,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: 52,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: 1000147000,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: 1000109000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: 1000109001,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: 1000109002,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: 1000109003,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: 1000109004,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: 1000109005,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO: 1000109006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: 1000177000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: 1000196000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: 1000180000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: 1000082000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: 1000197000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: 1000161000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: 1000161001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: 1000161002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: 1000161003,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: 1000161004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: 1000199000,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: 1000199001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: 1000221000,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: 1000246000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: 1000130000,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: 1000130001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: 1000211000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: 1000108000,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: 1000108001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: 1000108002,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: 1000108003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: 1000253000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: 1000175000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: 1000241000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: 1000241001,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: 1000241002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: 1000261000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: 1000207000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: 1000207001,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: 1000207002,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: 1000207003,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: 1000207004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: 1000207005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: 1000257000,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: 1000244001,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: 1000257002,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: 1000257003,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: 1000257004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: 53,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: 54,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: 1000192000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: 1000215000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: 1000245000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: 1000276000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: 1000295000,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: 1000295001,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: 1000295002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: 1000297000,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: 1000314000,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: 1000314001,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: 1000314002,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO: 1000314003,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2: 1000314004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: 1000314005,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: 1000314006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: 1000314007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: 1000325000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: 1000335000,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: 1000337000,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: 1000337001,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: 1000337002,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: 1000337003,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: 1000337004,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: 1000337005,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2: 1000337006,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2: 1000337007,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2: 1000337008,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: 1000337009,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: 1000337010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: 1000225000,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: 1000225001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: 1000225002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: 1000138000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: 1000138001,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: 1000138002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: 1000138003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: 1000066000,
	VK_STRUCTURE_TYPE_RENDERING_INFO: 1000044000,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: 1000044001,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: 1000044002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: 1000044003,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: 1000044004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: 1000280000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: 1000280001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: 1000281001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: 1000360000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: 1000413000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: 1000413001,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: 1000413002,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: 1000413003,
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: 1000001000,
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: 1000001001,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: 1000060007,
	VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: 1000060008,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: 1000060009,
	VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: 1000060010,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: 1000060011,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: 1000060012,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: 1000002000,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: 1000002001,
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: 1000003000,
	VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: 1000004000,
	VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: 1000005000,
	VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: 1000006000,
	VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: 1000008000,
	VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: 1000009000,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: 1000011000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: 1000018000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: 1000022000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: 1000022001,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: 1000022002,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: 1000026000,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: 1000026001,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: 1000026002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: 1000028000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: 1000028001,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: 1000028002,
	VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: 1000029000,
	VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: 1000029001,
	VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: 1000029002,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: 1000030000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: 1000030001,
	VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: 1000041000,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: 1000044006,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: 1000044007,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: 1000044008,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: 1000044009,
	VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: 1000049000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: 1000050000,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: 1000056000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: 1000056001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: 1000057000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: 1000057001,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: 1000058000,
	VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: 1000061000,
	VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: 1000062000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: 1000067000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: 1000067001,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: 1000068000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT: 1000068001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT: 1000068002,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: 1000073000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: 1000073001,
	VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: 1000073002,
	VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: 1000073003,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: 1000074000,
	VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: 1000074001,
	VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: 1000074002,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: 1000075000,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: 1000078000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: 1000078001,
	VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: 1000078002,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: 1000078003,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: 1000079000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: 1000079001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: 1000080000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: 1000081000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: 1000081001,
	VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: 1000081002,
	VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: 1000084000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: 1000087000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: 1000090000,
	VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: 1000091000,
	VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: 1000091001,
	VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: 1000091002,
	VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: 1000091003,
	VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: 1000092000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: 1000097000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: 1000098000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: 1000099000,
	VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: 1000099001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: 1000101000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: 1000101001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: 1000102000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: 1000102001,
	VK_STRUCTURE_TYPE_HDR_METADATA_EXT: 1000105000,
	VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: 1000111000,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: 1000114000,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: 1000114001,
	VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: 1000114002,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: 1000115000,
	VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: 1000115001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: 1000116000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: 1000116001,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: 1000116002,
	VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: 1000116003,
	VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: 1000116004,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: 1000116005,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: 1000116006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: 1000119000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: 1000119001,
	VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: 1000119002,
	VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: 1000121000,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: 1000121001,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: 1000121002,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: 1000121003,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: 1000121004,
	VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: 1000122000,
	VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: 1000123000,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: 1000128000,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: 1000128001,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: 1000128002,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: 1000128003,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: 1000128004,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: 1000129000,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: 1000129001,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: 1000129002,
	VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: 1000129003,
	VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: 1000129004,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: 1000129005,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: 1000129006,
	VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: 1000143000,
	VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: 1000143001,
	VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: 1000143002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: 1000143003,
	VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: 1000143004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: 1000148000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: 1000148001,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: 1000148002,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: 1000149000,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: 1000150007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: 1000150000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: 1000150002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: 1000150003,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: 1000150004,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: 1000150005,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: 1000150006,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: 1000150009,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: 1000150010,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: 1000150011,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: 1000150012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: 1000150013,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: 1000150014,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: 1000150017,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: 1000150020,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: 1000347000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: 1000347001,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: 1000150015,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: 1000150016,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: 1000150018,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: 1000348013,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: 1000152000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: 1000154000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: 1000154001,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: 1000158000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: 1000158002,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: 1000158003,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: 1000158004,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: 1000158005,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: 1000158006,
	VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: 1000160000,
	VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: 1000160001,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: 1000164000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: 1000164001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: 1000164002,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: 1000164005,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: 1000165000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: 1000165001,
	VK_STRUCTURE_TYPE_GEOMETRY_NV: 1000165003,
	VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: 1000165004,
	VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: 1000165005,
	VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: 1000165006,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: 1000165007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: 1000165008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: 1000165009,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: 1000165011,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: 1000165012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: 1000166000,
	VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: 1000166001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: 1000170000,
	VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: 1000170001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: 1000178000,
	VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: 1000178001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: 1000178002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: 1000181000,
	VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: 1000183000,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: 1000184000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: 1000185000,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: 1000174000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: 1000388000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: 1000388001,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: 1000189000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: 1000190000,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: 1000190001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: 1000190002,
	VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: 1000191000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: 1000201000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: 1000202000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: 1000202001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: 1000204000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: 1000205000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: 1000205002,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: 1000206000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: 1000206001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: 1000209000,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: 1000210000,
	VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: 1000210001,
	VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: 1000210002,
	VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: 1000210003,
	VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: 1000210004,
	VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: 1000210005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: 1000212000,
	VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: 1000213000,
	VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: 1000213001,
	VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: 1000214000,
	VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: 1000217000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: 1000218000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: 1000218001,
	VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: 1000218002,
	VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: 1000226000,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: 1000226001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: 1000226002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: 1000226003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: 1000226004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: 1000227000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: 1000229000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: 1000234000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: 1000237000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: 1000238000,
	VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: 1000238001,
	VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: 1000239000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: 1000240000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: 1000244000,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: 1000244002,
	VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: 1000247000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: 1000248000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: 1000249000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: 1000249001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: 1000249002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: 1000250000,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: 1000250001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: 1000250002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: 1000251000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: 1000252000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: 1000254000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: 1000254001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: 1000254002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: 1000255000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: 1000255002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: 1000255001,
	VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: 1000256000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: 1000259000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: 1000259001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: 1000259002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: 1000260000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: 1000265000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: 1000267000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: 1000269000,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: 1000269001,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: 1000269002,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: 1000269003,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: 1000269004,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: 1000269005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: 1000273000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: 1000277000,
	VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: 1000277001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: 1000277002,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: 1000277003,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: 1000277004,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: 1000277005,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: 1000277006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: 1000277007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: 1000278000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: 1000278001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: 1000281000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: 1000282000,
	VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: 1000282001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: 1000284000,
	VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: 1000284001,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: 1000284002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: 1000286000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: 1000286001,
	VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: 1000287000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: 1000287001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: 1000287002,
	VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: 1000290000,
	VK_STRUCTURE_TYPE_PRESENT_ID_KHR: 1000294000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: 1000294001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: 1000300000,
	VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: 1000300001,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: 1000311000,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: 1000311001,
	VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: 1000311002,
	VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: 1000311003,
	VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: 1000311004,
	VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: 1000311005,
	VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: 1000311006,
	VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: 1000311007,
	VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: 1000311008,
	VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: 1000311009,
	VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: 1000311010,
	VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: 1000311011,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: 1000314008,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: 1000314009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT: 1000320000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT: 1000320001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT: 1000320002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD: 1000321000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR: 1000203000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR: 1000322000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: 1000323000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: 1000326000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: 1000326001,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: 1000326002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: 1000327000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: 1000327001,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: 1000327002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: 1000330000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: 1000332000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: 1000332001,
	VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: 1000333000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: 1000336000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT: 1000338000,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: 1000338001,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: 1000338002,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: 1000338003,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: 1000338004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT: 1000339000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: 1000340000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: 1000342000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: 1000344000,
	VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: 1000346000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: 1000351000,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: 1000351002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: 1000352000,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: 1000352001,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: 1000352002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: 1000353000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: 1000355000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: 1000355001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: 1000356000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: 1000364000,
	VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: 1000364001,
	VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: 1000364002,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: 1000365000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: 1000365001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: 1000366000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: 1000366001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: 1000366002,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: 1000366003,
	VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: 1000366004,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: 1000366005,
	VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: 1000366006,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: 1000366007,
	VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: 1000366008,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: 1000366009,
	VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: 1000369000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: 1000369001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: 1000369002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: 1000370000,
	VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: 1000371000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: 1000371001,
	VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: 1000372000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT: 1000372001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT: 1000376000,
	VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: 1000376001,
	VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT: 1000376002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: 1000377000,
	VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: 1000378000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: 1000381000,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: 1000381001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT: 1000382000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR: 1000386000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: 1000391000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: 1000391001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: 1000392000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: 1000392001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT: 1000393000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: 1000411000,
	VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: 1000411001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: 1000412000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: 1000420000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: 1000420001,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: 1000420002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT: 1000422000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: 1000425000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: 1000425001,
	VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: 1000425002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: 1000430000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT: 1000437000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM: 1000440000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM: 1000440001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM: 1000440002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT: 1000458000,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: 1000458001,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT: 1000458002,
	VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT: 1000458003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT: 1000462000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT: 1000462001,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT: 1000462002,
	VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: 1000462003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM: 1000484000,
	VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: 1000484001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC: 1000485000,
	VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: 1000485001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: NaN,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: NaN,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: NaN,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: NaN,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: NaN,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: NaN,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: NaN,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: NaN,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: NaN,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: NaN,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: NaN,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: NaN,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: NaN,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: NaN,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: NaN,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: NaN,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: NaN,
	VK_STRUCTURE_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_STRUCTURE_TYPE_APPLICATION_INFO",
		"1": "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO",
		"2": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO",
		"3": "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO",
		"4": "VK_STRUCTURE_TYPE_SUBMIT_INFO",
		"5": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO",
		"6": "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE",
		"7": "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO",
		"8": "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO",
		"9": "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO",
		"10": "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO",
		"11": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO",
		"12": "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO",
		"13": "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO",
		"14": "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO",
		"15": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO",
		"16": "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO",
		"17": "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO",
		"18": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO",
		"19": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO",
		"20": "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO",
		"21": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO",
		"22": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO",
		"23": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO",
		"24": "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO",
		"25": "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO",
		"26": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO",
		"27": "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO",
		"28": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO",
		"29": "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO",
		"30": "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO",
		"31": "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO",
		"32": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO",
		"33": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO",
		"34": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO",
		"35": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET",
		"36": "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET",
		"37": "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO",
		"38": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO",
		"39": "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO",
		"40": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO",
		"41": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO",
		"42": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO",
		"43": "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO",
		"44": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER",
		"45": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER",
		"46": "VK_STRUCTURE_TYPE_MEMORY_BARRIER",
		"47": "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO",
		"48": "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO",
		"1000094000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES",
		"1000157000": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO",
		"1000157001": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO",
		"1000083000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES",
		"1000127000": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS",
		"1000127001": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO",
		"1000060000": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO",
		"1000060003": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO",
		"1000060004": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO",
		"1000060005": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO",
		"1000060006": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO",
		"1000060013": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO",
		"1000060014": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO",
		"1000070000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES",
		"1000070001": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO",
		"1000146000": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2",
		"1000146001": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2",
		"1000146002": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2",
		"1000146003": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2",
		"1000146004": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2",
		"1000059000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2",
		"1000059001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2",
		"1000059002": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2",
		"1000059003": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2",
		"1000059004": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2",
		"1000059005": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2",
		"1000059006": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2",
		"1000059007": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2",
		"1000059008": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2",
		"1000117000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES",
		"1000117001": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO",
		"1000117002": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO",
		"1000117003": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO",
		"1000053000": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO",
		"1000053001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES",
		"1000053002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES",
		"1000120000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES",
		"1000145000": "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO",
		"1000145001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES",
		"1000145002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES",
		"1000145003": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2",
		"1000156000": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO",
		"1000156001": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO",
		"1000156002": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO",
		"1000156003": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO",
		"1000156004": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES",
		"1000156005": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES",
		"1000085000": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO",
		"1000071000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO",
		"1000071001": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES",
		"1000071002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO",
		"1000071003": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES",
		"1000071004": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
		"1000072000": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO",
		"1000072001": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO",
		"1000072002": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO",
		"1000112000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO",
		"1000112001": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES",
		"1000113000": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO",
		"1000077000": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO",
		"1000076000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO",
		"1000076001": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES",
		"1000168000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES",
		"1000168001": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT",
		"1000063000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES",
		"49": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES",
		"50": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES",
		"51": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES",
		"52": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES",
		"1000147000": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO",
		"1000109000": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2",
		"1000109001": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2",
		"1000109002": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2",
		"1000109003": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2",
		"1000109004": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2",
		"1000109005": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO",
		"1000109006": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO",
		"1000177000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES",
		"1000196000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES",
		"1000180000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES",
		"1000082000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES",
		"1000197000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES",
		"1000161000": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO",
		"1000161001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES",
		"1000161002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES",
		"1000161003": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO",
		"1000161004": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT",
		"1000199000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES",
		"1000199001": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE",
		"1000221000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES",
		"1000246000": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO",
		"1000130000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES",
		"1000130001": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO",
		"1000211000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES",
		"1000108000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES",
		"1000108001": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO",
		"1000108002": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO",
		"1000108003": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO",
		"1000253000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES",
		"1000175000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES",
		"1000241000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES",
		"1000241001": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT",
		"1000241002": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT",
		"1000261000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES",
		"1000207000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES",
		"1000207001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES",
		"1000207002": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO",
		"1000207003": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO",
		"1000207004": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO",
		"1000207005": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO",
		"1000257000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES",
		"1000244001": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
		"1000257002": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO",
		"1000257003": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO",
		"1000257004": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO",
		"53": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES",
		"54": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES",
		"1000192000": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO",
		"1000215000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES",
		"1000245000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES",
		"1000276000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES",
		"1000295000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES",
		"1000295001": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO",
		"1000295002": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO",
		"1000297000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES",
		"1000314000": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2",
		"1000314001": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2",
		"1000314002": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2",
		"1000314003": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO",
		"1000314004": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2",
		"1000314005": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO",
		"1000314006": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO",
		"1000314007": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES",
		"1000325000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES",
		"1000335000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES",
		"1000337000": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2",
		"1000337001": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2",
		"1000337002": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2",
		"1000337003": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2",
		"1000337004": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2",
		"1000337005": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2",
		"1000337006": "VK_STRUCTURE_TYPE_BUFFER_COPY_2",
		"1000337007": "VK_STRUCTURE_TYPE_IMAGE_COPY_2",
		"1000337008": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2",
		"1000337009": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2",
		"1000337010": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2",
		"1000225000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES",
		"1000225001": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO",
		"1000225002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES",
		"1000138000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES",
		"1000138001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES",
		"1000138002": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK",
		"1000138003": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO",
		"1000066000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES",
		"1000044000": "VK_STRUCTURE_TYPE_RENDERING_INFO",
		"1000044001": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO",
		"1000044002": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO",
		"1000044003": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES",
		"1000044004": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO",
		"1000280000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES",
		"1000280001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES",
		"1000281001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES",
		"1000360000": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3",
		"1000413000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES",
		"1000413001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES",
		"1000413002": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS",
		"1000413003": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS",
		"1000001000": "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR",
		"1000001001": "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR",
		"1000060007": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR",
		"1000060008": "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR",
		"1000060009": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR",
		"1000060010": "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
		"1000060011": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
		"1000060012": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR",
		"1000002000": "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR",
		"1000002001": "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR",
		"1000003000": "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR",
		"1000004000": "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR",
		"1000005000": "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR",
		"1000006000": "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR",
		"1000008000": "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR",
		"1000009000": "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR",
		"1000011000": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT",
		"1000018000": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD",
		"1000022000": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT",
		"1000022001": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT",
		"1000022002": "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT",
		"1000026000": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV",
		"1000026001": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV",
		"1000026002": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV",
		"1000028000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT",
		"1000028001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT",
		"1000028002": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT",
		"1000029000": "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX",
		"1000029001": "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX",
		"1000029002": "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX",
		"1000030000": "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX",
		"1000030001": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX",
		"1000041000": "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD",
		"1000044006": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR",
		"1000044007": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT",
		"1000044008": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD",
		"1000044009": "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX",
		"1000049000": "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP",
		"1000050000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV",
		"1000056000": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV",
		"1000056001": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV",
		"1000057000": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV",
		"1000057001": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV",
		"1000058000": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV",
		"1000061000": "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT",
		"1000062000": "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN",
		"1000067000": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT",
		"1000067001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT",
		"1000068000": "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT",
		"1000068001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT",
		"1000068002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT",
		"1000073000": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
		"1000073001": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
		"1000073002": "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR",
		"1000073003": "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR",
		"1000074000": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR",
		"1000074001": "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR",
		"1000074002": "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR",
		"1000075000": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR",
		"1000078000": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
		"1000078001": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
		"1000078002": "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR",
		"1000078003": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR",
		"1000079000": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR",
		"1000079001": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR",
		"1000080000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR",
		"1000081000": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT",
		"1000081001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT",
		"1000081002": "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT",
		"1000084000": "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR",
		"1000087000": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV",
		"1000090000": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
		"1000091000": "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT",
		"1000091001": "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT",
		"1000091002": "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT",
		"1000091003": "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT",
		"1000092000": "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE",
		"1000097000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX",
		"1000098000": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV",
		"1000099000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT",
		"1000099001": "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT",
		"1000101000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT",
		"1000101001": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT",
		"1000102000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT",
		"1000102001": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT",
		"1000105000": "VK_STRUCTURE_TYPE_HDR_METADATA_EXT",
		"1000111000": "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR",
		"1000114000": "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR",
		"1000114001": "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR",
		"1000114002": "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR",
		"1000115000": "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR",
		"1000115001": "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR",
		"1000116000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR",
		"1000116001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR",
		"1000116002": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR",
		"1000116003": "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR",
		"1000116004": "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR",
		"1000116005": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR",
		"1000116006": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR",
		"1000119000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR",
		"1000119001": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR",
		"1000119002": "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR",
		"1000121000": "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR",
		"1000121001": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR",
		"1000121002": "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR",
		"1000121003": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR",
		"1000121004": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR",
		"1000122000": "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK",
		"1000123000": "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK",
		"1000128000": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT",
		"1000128001": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT",
		"1000128002": "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT",
		"1000128003": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT",
		"1000128004": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT",
		"1000129000": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID",
		"1000129001": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID",
		"1000129002": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID",
		"1000129003": "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
		"1000129004": "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
		"1000129005": "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID",
		"1000129006": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID",
		"1000143000": "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT",
		"1000143001": "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT",
		"1000143002": "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT",
		"1000143003": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT",
		"1000143004": "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT",
		"1000148000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT",
		"1000148001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT",
		"1000148002": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT",
		"1000149000": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV",
		"1000150007": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR",
		"1000150000": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR",
		"1000150002": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR",
		"1000150003": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR",
		"1000150004": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR",
		"1000150005": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR",
		"1000150006": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR",
		"1000150009": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR",
		"1000150010": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR",
		"1000150011": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR",
		"1000150012": "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR",
		"1000150013": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR",
		"1000150014": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR",
		"1000150017": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR",
		"1000150020": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR",
		"1000347000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR",
		"1000347001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR",
		"1000150015": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR",
		"1000150016": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR",
		"1000150018": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR",
		"1000348013": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR",
		"1000152000": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV",
		"1000154000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV",
		"1000154001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV",
		"1000158000": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT",
		"1000158002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT",
		"1000158003": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT",
		"1000158004": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT",
		"1000158005": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT",
		"1000158006": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT",
		"1000160000": "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT",
		"1000160001": "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT",
		"1000164000": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV",
		"1000164001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV",
		"1000164002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV",
		"1000164005": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV",
		"1000165000": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV",
		"1000165001": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV",
		"1000165003": "VK_STRUCTURE_TYPE_GEOMETRY_NV",
		"1000165004": "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV",
		"1000165005": "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV",
		"1000165006": "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV",
		"1000165007": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV",
		"1000165008": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV",
		"1000165009": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV",
		"1000165011": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV",
		"1000165012": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV",
		"1000166000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV",
		"1000166001": "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV",
		"1000170000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT",
		"1000170001": "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT",
		"1000178000": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT",
		"1000178001": "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT",
		"1000178002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT",
		"1000181000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR",
		"1000183000": "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD",
		"1000184000": "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT",
		"1000185000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD",
		"1000174000": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR",
		"1000388000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR",
		"1000388001": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR",
		"1000189000": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD",
		"1000190000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT",
		"1000190001": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT",
		"1000190002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT",
		"1000191000": "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP",
		"1000201000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV",
		"1000202000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV",
		"1000202001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV",
		"1000204000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV",
		"1000205000": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV",
		"1000205002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV",
		"1000206000": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV",
		"1000206001": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV",
		"1000209000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL",
		"1000210000": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL",
		"1000210001": "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL",
		"1000210002": "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL",
		"1000210003": "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL",
		"1000210004": "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL",
		"1000210005": "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL",
		"1000212000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT",
		"1000213000": "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD",
		"1000213001": "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD",
		"1000214000": "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA",
		"1000217000": "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT",
		"1000218000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT",
		"1000218001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT",
		"1000218002": "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT",
		"1000226000": "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR",
		"1000226001": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR",
		"1000226002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR",
		"1000226003": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR",
		"1000226004": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR",
		"1000227000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD",
		"1000229000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD",
		"1000234000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT",
		"1000237000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT",
		"1000238000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT",
		"1000238001": "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT",
		"1000239000": "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR",
		"1000240000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV",
		"1000244000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT",
		"1000244002": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT",
		"1000247000": "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT",
		"1000248000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR",
		"1000249000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV",
		"1000249001": "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV",
		"1000249002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV",
		"1000250000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV",
		"1000250001": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV",
		"1000250002": "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV",
		"1000251000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT",
		"1000252000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT",
		"1000254000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT",
		"1000254001": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT",
		"1000254002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT",
		"1000255000": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT",
		"1000255002": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT",
		"1000255001": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT",
		"1000256000": "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT",
		"1000259000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT",
		"1000259001": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT",
		"1000259002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT",
		"1000260000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT",
		"1000265000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT",
		"1000267000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT",
		"1000269000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR",
		"1000269001": "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR",
		"1000269002": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR",
		"1000269003": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR",
		"1000269004": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR",
		"1000269005": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR",
		"1000273000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT",
		"1000277000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV",
		"1000277001": "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV",
		"1000277002": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV",
		"1000277003": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV",
		"1000277004": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV",
		"1000277005": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV",
		"1000277006": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV",
		"1000277007": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV",
		"1000278000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV",
		"1000278001": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV",
		"1000281000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT",
		"1000282000": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM",
		"1000282001": "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM",
		"1000284000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT",
		"1000284001": "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT",
		"1000284002": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT",
		"1000286000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT",
		"1000286001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT",
		"1000287000": "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT",
		"1000287001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT",
		"1000287002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT",
		"1000290000": "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR",
		"1000294000": "VK_STRUCTURE_TYPE_PRESENT_ID_KHR",
		"1000294001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR",
		"1000300000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV",
		"1000300001": "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV",
		"1000311000": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT",
		"1000311001": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT",
		"1000311002": "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT",
		"1000311003": "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT",
		"1000311004": "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT",
		"1000311005": "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT",
		"1000311006": "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT",
		"1000311007": "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT",
		"1000311008": "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT",
		"1000311009": "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT",
		"1000311010": "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT",
		"1000311011": "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT",
		"1000314008": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV",
		"1000314009": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV",
		"1000320000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT",
		"1000320001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT",
		"1000320002": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT",
		"1000321000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD",
		"1000203000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR",
		"1000322000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR",
		"1000323000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR",
		"1000326000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV",
		"1000326001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV",
		"1000326002": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV",
		"1000327000": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV",
		"1000327001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV",
		"1000327002": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV",
		"1000330000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT",
		"1000332000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT",
		"1000332001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT",
		"1000333000": "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM",
		"1000336000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR",
		"1000338000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT",
		"1000338001": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT",
		"1000338002": "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT",
		"1000338003": "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT",
		"1000338004": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT",
		"1000339000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT",
		"1000340000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT",
		"1000342000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM",
		"1000344000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT",
		"1000346000": "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT",
		"1000351000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE",
		"1000351002": "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE",
		"1000352000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT",
		"1000352001": "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT",
		"1000352002": "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT",
		"1000353000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT",
		"1000355000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT",
		"1000355001": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT",
		"1000356000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT",
		"1000364000": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA",
		"1000364001": "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA",
		"1000364002": "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA",
		"1000365000": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA",
		"1000365001": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA",
		"1000366000": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA",
		"1000366001": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA",
		"1000366002": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA",
		"1000366003": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA",
		"1000366004": "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA",
		"1000366005": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA",
		"1000366006": "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA",
		"1000366007": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA",
		"1000366008": "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA",
		"1000366009": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA",
		"1000369000": "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI",
		"1000369001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI",
		"1000369002": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI",
		"1000370000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI",
		"1000371000": "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV",
		"1000371001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV",
		"1000372000": "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT",
		"1000372001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT",
		"1000376000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT",
		"1000376001": "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT",
		"1000376002": "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT",
		"1000377000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT",
		"1000378000": "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX",
		"1000381000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT",
		"1000381001": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT",
		"1000382000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT",
		"1000386000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR",
		"1000391000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT",
		"1000391001": "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT",
		"1000392000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT",
		"1000392001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT",
		"1000393000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT",
		"1000411000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT",
		"1000411001": "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT",
		"1000412000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT",
		"1000420000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE",
		"1000420001": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE",
		"1000420002": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE",
		"1000422000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT",
		"1000425000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM",
		"1000425001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM",
		"1000425002": "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM",
		"1000430000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV",
		"1000437000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT",
		"1000440000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM",
		"1000440001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM",
		"1000440002": "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM",
		"1000458000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT",
		"1000458001": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT",
		"1000458002": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT",
		"1000458003": "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT",
		"1000462000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT",
		"1000462001": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT",
		"1000462002": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT",
		"1000462003": "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT",
		"1000484000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM",
		"1000484001": "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM",
		"1000485000": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC",
		"1000485001": "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES",
		"NaN": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_RENDERING_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV",
		"NaN": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR",
		"NaN": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR",
		"NaN": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR",
		"NaN": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR",
		"2147483647": "VK_STRUCTURE_TYPE_MAX_ENUM",
}};
export const VkPipelineCacheHeaderVersion = {
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE: 1,
	VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_CACHE_HEADER_VERSION_ONE",
		"2147483647": "VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM",
}};
export const VkImageLayout = {
	VK_IMAGE_LAYOUT_UNDEFINED: 0,
	VK_IMAGE_LAYOUT_GENERAL: 1,
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: 2,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: 3,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: 4,
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: 5,
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: 6,
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: 7,
	VK_IMAGE_LAYOUT_PREINITIALIZED: 8,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: 1000117000,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: 1000117001,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: 1000241000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: 1000241001,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: 1000241002,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: 1000241003,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: 1000314000,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: 1000314001,
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: 1000001002,
	VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: 1000111000,
	VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: 1000218000,
	VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: 1000164003,
	VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: 1000339000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: NaN,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: NaN,
	VK_IMAGE_LAYOUT_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_IMAGE_LAYOUT_UNDEFINED",
		"1": "VK_IMAGE_LAYOUT_GENERAL",
		"2": "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
		"3": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
		"4": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
		"5": "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
		"6": "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
		"7": "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
		"8": "VK_IMAGE_LAYOUT_PREINITIALIZED",
		"1000117000": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",
		"1000117001": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",
		"1000241000": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
		"1000241001": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
		"1000241002": "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
		"1000241003": "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
		"1000314000": "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL",
		"1000314001": "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL",
		"1000001002": "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",
		"1000111000": "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR",
		"1000218000": "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT",
		"1000164003": "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR",
		"1000339000": "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT",
		"NaN": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
		"NaN": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR",
		"NaN": "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR",
		"2147483647": "VK_IMAGE_LAYOUT_MAX_ENUM",
}};
export const VkObjectType = {
	VK_OBJECT_TYPE_UNKNOWN: 0,
	VK_OBJECT_TYPE_INSTANCE: 1,
	VK_OBJECT_TYPE_PHYSICAL_DEVICE: 2,
	VK_OBJECT_TYPE_DEVICE: 3,
	VK_OBJECT_TYPE_QUEUE: 4,
	VK_OBJECT_TYPE_SEMAPHORE: 5,
	VK_OBJECT_TYPE_COMMAND_BUFFER: 6,
	VK_OBJECT_TYPE_FENCE: 7,
	VK_OBJECT_TYPE_DEVICE_MEMORY: 8,
	VK_OBJECT_TYPE_BUFFER: 9,
	VK_OBJECT_TYPE_IMAGE: 10,
	VK_OBJECT_TYPE_EVENT: 11,
	VK_OBJECT_TYPE_QUERY_POOL: 12,
	VK_OBJECT_TYPE_BUFFER_VIEW: 13,
	VK_OBJECT_TYPE_IMAGE_VIEW: 14,
	VK_OBJECT_TYPE_SHADER_MODULE: 15,
	VK_OBJECT_TYPE_PIPELINE_CACHE: 16,
	VK_OBJECT_TYPE_PIPELINE_LAYOUT: 17,
	VK_OBJECT_TYPE_RENDER_PASS: 18,
	VK_OBJECT_TYPE_PIPELINE: 19,
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: 20,
	VK_OBJECT_TYPE_SAMPLER: 21,
	VK_OBJECT_TYPE_DESCRIPTOR_POOL: 22,
	VK_OBJECT_TYPE_DESCRIPTOR_SET: 23,
	VK_OBJECT_TYPE_FRAMEBUFFER: 24,
	VK_OBJECT_TYPE_COMMAND_POOL: 25,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: 1000156000,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: 1000085000,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: 1000295000,
	VK_OBJECT_TYPE_SURFACE_KHR: 1000000000,
	VK_OBJECT_TYPE_SWAPCHAIN_KHR: 1000001000,
	VK_OBJECT_TYPE_DISPLAY_KHR: 1000002000,
	VK_OBJECT_TYPE_DISPLAY_MODE_KHR: 1000002001,
	VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: 1000011000,
	VK_OBJECT_TYPE_CU_MODULE_NVX: 1000029000,
	VK_OBJECT_TYPE_CU_FUNCTION_NVX: 1000029001,
	VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: 1000128000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: 1000150000,
	VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: 1000160000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: 1000165000,
	VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: 1000210000,
	VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: 1000268000,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: 1000277000,
	VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: 1000366000,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: NaN,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: NaN,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: NaN,
	VK_OBJECT_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_OBJECT_TYPE_UNKNOWN",
		"1": "VK_OBJECT_TYPE_INSTANCE",
		"2": "VK_OBJECT_TYPE_PHYSICAL_DEVICE",
		"3": "VK_OBJECT_TYPE_DEVICE",
		"4": "VK_OBJECT_TYPE_QUEUE",
		"5": "VK_OBJECT_TYPE_SEMAPHORE",
		"6": "VK_OBJECT_TYPE_COMMAND_BUFFER",
		"7": "VK_OBJECT_TYPE_FENCE",
		"8": "VK_OBJECT_TYPE_DEVICE_MEMORY",
		"9": "VK_OBJECT_TYPE_BUFFER",
		"10": "VK_OBJECT_TYPE_IMAGE",
		"11": "VK_OBJECT_TYPE_EVENT",
		"12": "VK_OBJECT_TYPE_QUERY_POOL",
		"13": "VK_OBJECT_TYPE_BUFFER_VIEW",
		"14": "VK_OBJECT_TYPE_IMAGE_VIEW",
		"15": "VK_OBJECT_TYPE_SHADER_MODULE",
		"16": "VK_OBJECT_TYPE_PIPELINE_CACHE",
		"17": "VK_OBJECT_TYPE_PIPELINE_LAYOUT",
		"18": "VK_OBJECT_TYPE_RENDER_PASS",
		"19": "VK_OBJECT_TYPE_PIPELINE",
		"20": "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT",
		"21": "VK_OBJECT_TYPE_SAMPLER",
		"22": "VK_OBJECT_TYPE_DESCRIPTOR_POOL",
		"23": "VK_OBJECT_TYPE_DESCRIPTOR_SET",
		"24": "VK_OBJECT_TYPE_FRAMEBUFFER",
		"25": "VK_OBJECT_TYPE_COMMAND_POOL",
		"1000156000": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION",
		"1000085000": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE",
		"1000295000": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT",
		"1000000000": "VK_OBJECT_TYPE_SURFACE_KHR",
		"1000001000": "VK_OBJECT_TYPE_SWAPCHAIN_KHR",
		"1000002000": "VK_OBJECT_TYPE_DISPLAY_KHR",
		"1000002001": "VK_OBJECT_TYPE_DISPLAY_MODE_KHR",
		"1000011000": "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT",
		"1000029000": "VK_OBJECT_TYPE_CU_MODULE_NVX",
		"1000029001": "VK_OBJECT_TYPE_CU_FUNCTION_NVX",
		"1000128000": "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT",
		"1000150000": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR",
		"1000160000": "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT",
		"1000165000": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV",
		"1000210000": "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL",
		"1000268000": "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR",
		"1000277000": "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV",
		"1000366000": "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA",
		"NaN": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR",
		"NaN": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR",
		"NaN": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT",
		"2147483647": "VK_OBJECT_TYPE_MAX_ENUM",
}};
export const VkVendorId = {
	VK_VENDOR_ID_VIV: 65537,
	VK_VENDOR_ID_VSI: 65538,
	VK_VENDOR_ID_KAZAN: 65539,
	VK_VENDOR_ID_CODEPLAY: 65540,
	VK_VENDOR_ID_MESA: 65541,
	VK_VENDOR_ID_POCL: 65542,
	VK_VENDOR_ID_MAX_ENUM: 2147483647,
	keys:{
		"65537": "VK_VENDOR_ID_VIV",
		"65538": "VK_VENDOR_ID_VSI",
		"65539": "VK_VENDOR_ID_KAZAN",
		"65540": "VK_VENDOR_ID_CODEPLAY",
		"65541": "VK_VENDOR_ID_MESA",
		"65542": "VK_VENDOR_ID_POCL",
		"2147483647": "VK_VENDOR_ID_MAX_ENUM",
}};
export const VkSystemAllocationScope = {
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: 0,
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: 1,
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE: 2,
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: 3,
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: 4,
	VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND",
		"1": "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT",
		"2": "VK_SYSTEM_ALLOCATION_SCOPE_CACHE",
		"3": "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE",
		"4": "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE",
		"2147483647": "VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM",
}};
export const VkInternalAllocationType = {
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: 0,
	VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE",
		"2147483647": "VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM",
}};
export const VkFormat = {
	VK_FORMAT_UNDEFINED: 0,
	VK_FORMAT_R4G4_UNORM_PACK8: 1,
	VK_FORMAT_R4G4B4A4_UNORM_PACK16: 2,
	VK_FORMAT_B4G4R4A4_UNORM_PACK16: 3,
	VK_FORMAT_R5G6B5_UNORM_PACK16: 4,
	VK_FORMAT_B5G6R5_UNORM_PACK16: 5,
	VK_FORMAT_R5G5B5A1_UNORM_PACK16: 6,
	VK_FORMAT_B5G5R5A1_UNORM_PACK16: 7,
	VK_FORMAT_A1R5G5B5_UNORM_PACK16: 8,
	VK_FORMAT_R8_UNORM: 9,
	VK_FORMAT_R8_SNORM: 10,
	VK_FORMAT_R8_USCALED: 11,
	VK_FORMAT_R8_SSCALED: 12,
	VK_FORMAT_R8_UINT: 13,
	VK_FORMAT_R8_SINT: 14,
	VK_FORMAT_R8_SRGB: 15,
	VK_FORMAT_R8G8_UNORM: 16,
	VK_FORMAT_R8G8_SNORM: 17,
	VK_FORMAT_R8G8_USCALED: 18,
	VK_FORMAT_R8G8_SSCALED: 19,
	VK_FORMAT_R8G8_UINT: 20,
	VK_FORMAT_R8G8_SINT: 21,
	VK_FORMAT_R8G8_SRGB: 22,
	VK_FORMAT_R8G8B8_UNORM: 23,
	VK_FORMAT_R8G8B8_SNORM: 24,
	VK_FORMAT_R8G8B8_USCALED: 25,
	VK_FORMAT_R8G8B8_SSCALED: 26,
	VK_FORMAT_R8G8B8_UINT: 27,
	VK_FORMAT_R8G8B8_SINT: 28,
	VK_FORMAT_R8G8B8_SRGB: 29,
	VK_FORMAT_B8G8R8_UNORM: 30,
	VK_FORMAT_B8G8R8_SNORM: 31,
	VK_FORMAT_B8G8R8_USCALED: 32,
	VK_FORMAT_B8G8R8_SSCALED: 33,
	VK_FORMAT_B8G8R8_UINT: 34,
	VK_FORMAT_B8G8R8_SINT: 35,
	VK_FORMAT_B8G8R8_SRGB: 36,
	VK_FORMAT_R8G8B8A8_UNORM: 37,
	VK_FORMAT_R8G8B8A8_SNORM: 38,
	VK_FORMAT_R8G8B8A8_USCALED: 39,
	VK_FORMAT_R8G8B8A8_SSCALED: 40,
	VK_FORMAT_R8G8B8A8_UINT: 41,
	VK_FORMAT_R8G8B8A8_SINT: 42,
	VK_FORMAT_R8G8B8A8_SRGB: 43,
	VK_FORMAT_B8G8R8A8_UNORM: 44,
	VK_FORMAT_B8G8R8A8_SNORM: 45,
	VK_FORMAT_B8G8R8A8_USCALED: 46,
	VK_FORMAT_B8G8R8A8_SSCALED: 47,
	VK_FORMAT_B8G8R8A8_UINT: 48,
	VK_FORMAT_B8G8R8A8_SINT: 49,
	VK_FORMAT_B8G8R8A8_SRGB: 50,
	VK_FORMAT_A8B8G8R8_UNORM_PACK32: 51,
	VK_FORMAT_A8B8G8R8_SNORM_PACK32: 52,
	VK_FORMAT_A8B8G8R8_USCALED_PACK32: 53,
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32: 54,
	VK_FORMAT_A8B8G8R8_UINT_PACK32: 55,
	VK_FORMAT_A8B8G8R8_SINT_PACK32: 56,
	VK_FORMAT_A8B8G8R8_SRGB_PACK32: 57,
	VK_FORMAT_A2R10G10B10_UNORM_PACK32: 58,
	VK_FORMAT_A2R10G10B10_SNORM_PACK32: 59,
	VK_FORMAT_A2R10G10B10_USCALED_PACK32: 60,
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32: 61,
	VK_FORMAT_A2R10G10B10_UINT_PACK32: 62,
	VK_FORMAT_A2R10G10B10_SINT_PACK32: 63,
	VK_FORMAT_A2B10G10R10_UNORM_PACK32: 64,
	VK_FORMAT_A2B10G10R10_SNORM_PACK32: 65,
	VK_FORMAT_A2B10G10R10_USCALED_PACK32: 66,
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32: 67,
	VK_FORMAT_A2B10G10R10_UINT_PACK32: 68,
	VK_FORMAT_A2B10G10R10_SINT_PACK32: 69,
	VK_FORMAT_R16_UNORM: 70,
	VK_FORMAT_R16_SNORM: 71,
	VK_FORMAT_R16_USCALED: 72,
	VK_FORMAT_R16_SSCALED: 73,
	VK_FORMAT_R16_UINT: 74,
	VK_FORMAT_R16_SINT: 75,
	VK_FORMAT_R16_SFLOAT: 76,
	VK_FORMAT_R16G16_UNORM: 77,
	VK_FORMAT_R16G16_SNORM: 78,
	VK_FORMAT_R16G16_USCALED: 79,
	VK_FORMAT_R16G16_SSCALED: 80,
	VK_FORMAT_R16G16_UINT: 81,
	VK_FORMAT_R16G16_SINT: 82,
	VK_FORMAT_R16G16_SFLOAT: 83,
	VK_FORMAT_R16G16B16_UNORM: 84,
	VK_FORMAT_R16G16B16_SNORM: 85,
	VK_FORMAT_R16G16B16_USCALED: 86,
	VK_FORMAT_R16G16B16_SSCALED: 87,
	VK_FORMAT_R16G16B16_UINT: 88,
	VK_FORMAT_R16G16B16_SINT: 89,
	VK_FORMAT_R16G16B16_SFLOAT: 90,
	VK_FORMAT_R16G16B16A16_UNORM: 91,
	VK_FORMAT_R16G16B16A16_SNORM: 92,
	VK_FORMAT_R16G16B16A16_USCALED: 93,
	VK_FORMAT_R16G16B16A16_SSCALED: 94,
	VK_FORMAT_R16G16B16A16_UINT: 95,
	VK_FORMAT_R16G16B16A16_SINT: 96,
	VK_FORMAT_R16G16B16A16_SFLOAT: 97,
	VK_FORMAT_R32_UINT: 98,
	VK_FORMAT_R32_SINT: 99,
	VK_FORMAT_R32_SFLOAT: 100,
	VK_FORMAT_R32G32_UINT: 101,
	VK_FORMAT_R32G32_SINT: 102,
	VK_FORMAT_R32G32_SFLOAT: 103,
	VK_FORMAT_R32G32B32_UINT: 104,
	VK_FORMAT_R32G32B32_SINT: 105,
	VK_FORMAT_R32G32B32_SFLOAT: 106,
	VK_FORMAT_R32G32B32A32_UINT: 107,
	VK_FORMAT_R32G32B32A32_SINT: 108,
	VK_FORMAT_R32G32B32A32_SFLOAT: 109,
	VK_FORMAT_R64_UINT: 110,
	VK_FORMAT_R64_SINT: 111,
	VK_FORMAT_R64_SFLOAT: 112,
	VK_FORMAT_R64G64_UINT: 113,
	VK_FORMAT_R64G64_SINT: 114,
	VK_FORMAT_R64G64_SFLOAT: 115,
	VK_FORMAT_R64G64B64_UINT: 116,
	VK_FORMAT_R64G64B64_SINT: 117,
	VK_FORMAT_R64G64B64_SFLOAT: 118,
	VK_FORMAT_R64G64B64A64_UINT: 119,
	VK_FORMAT_R64G64B64A64_SINT: 120,
	VK_FORMAT_R64G64B64A64_SFLOAT: 121,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32: 122,
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: 123,
	VK_FORMAT_D16_UNORM: 124,
	VK_FORMAT_X8_D24_UNORM_PACK32: 125,
	VK_FORMAT_D32_SFLOAT: 126,
	VK_FORMAT_S8_UINT: 127,
	VK_FORMAT_D16_UNORM_S8_UINT: 128,
	VK_FORMAT_D24_UNORM_S8_UINT: 129,
	VK_FORMAT_D32_SFLOAT_S8_UINT: 130,
	VK_FORMAT_BC1_RGB_UNORM_BLOCK: 131,
	VK_FORMAT_BC1_RGB_SRGB_BLOCK: 132,
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK: 133,
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK: 134,
	VK_FORMAT_BC2_UNORM_BLOCK: 135,
	VK_FORMAT_BC2_SRGB_BLOCK: 136,
	VK_FORMAT_BC3_UNORM_BLOCK: 137,
	VK_FORMAT_BC3_SRGB_BLOCK: 138,
	VK_FORMAT_BC4_UNORM_BLOCK: 139,
	VK_FORMAT_BC4_SNORM_BLOCK: 140,
	VK_FORMAT_BC5_UNORM_BLOCK: 141,
	VK_FORMAT_BC5_SNORM_BLOCK: 142,
	VK_FORMAT_BC6H_UFLOAT_BLOCK: 143,
	VK_FORMAT_BC6H_SFLOAT_BLOCK: 144,
	VK_FORMAT_BC7_UNORM_BLOCK: 145,
	VK_FORMAT_BC7_SRGB_BLOCK: 146,
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: 147,
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: 148,
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: 149,
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: 150,
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: 151,
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: 152,
	VK_FORMAT_EAC_R11_UNORM_BLOCK: 153,
	VK_FORMAT_EAC_R11_SNORM_BLOCK: 154,
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK: 155,
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK: 156,
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK: 157,
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK: 158,
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK: 159,
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK: 160,
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK: 161,
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK: 162,
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK: 163,
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK: 164,
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK: 165,
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK: 166,
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK: 167,
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK: 168,
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK: 169,
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK: 170,
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK: 171,
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK: 172,
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK: 173,
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK: 174,
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK: 175,
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK: 176,
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK: 177,
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK: 178,
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK: 179,
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK: 180,
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK: 181,
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK: 182,
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK: 183,
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK: 184,
	VK_FORMAT_G8B8G8R8_422_UNORM: 1000156000,
	VK_FORMAT_B8G8R8G8_422_UNORM: 1000156001,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: 1000156002,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: 1000156003,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: 1000156004,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: 1000156005,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: 1000156006,
	VK_FORMAT_R10X6_UNORM_PACK16: 1000156007,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16: 1000156008,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: 1000156009,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: 1000156010,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: 1000156011,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: 1000156012,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: 1000156013,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: 1000156014,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: 1000156015,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: 1000156016,
	VK_FORMAT_R12X4_UNORM_PACK16: 1000156017,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16: 1000156018,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: 1000156019,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: 1000156020,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: 1000156021,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: 1000156022,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: 1000156023,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: 1000156024,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: 1000156025,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: 1000156026,
	VK_FORMAT_G16B16G16R16_422_UNORM: 1000156027,
	VK_FORMAT_B16G16R16G16_422_UNORM: 1000156028,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: 1000156029,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: 1000156030,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: 1000156031,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: 1000156032,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: 1000156033,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: 1000330000,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: 1000330001,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: 1000330002,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: 1000330003,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16: 1000340000,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16: 1000340001,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: 1000066000,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: 1000066001,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: 1000066002,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: 1000066003,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: 1000066004,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: 1000066005,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: 1000066006,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: 1000066007,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: 1000066008,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: 1000066009,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: 1000066010,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: 1000066011,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: 1000066012,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: 1000066013,
	VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: 1000054000,
	VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: 1000054001,
	VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: 1000054002,
	VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: 1000054003,
	VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: 1000054004,
	VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: 1000054005,
	VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: 1000054006,
	VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: 1000054007,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: NaN,
	VK_FORMAT_G8B8G8R8_422_UNORM_KHR: NaN,
	VK_FORMAT_B8G8R8G8_422_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: NaN,
	VK_FORMAT_R10X6_UNORM_PACK16_KHR: NaN,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: NaN,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_R12X4_UNORM_PACK16_KHR: NaN,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: NaN,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: NaN,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: NaN,
	VK_FORMAT_G16B16G16R16_422_UNORM_KHR: NaN,
	VK_FORMAT_B16G16R16G16_422_UNORM_KHR: NaN,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: NaN,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: NaN,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: NaN,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: NaN,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: NaN,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: NaN,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: NaN,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: NaN,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: NaN,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: NaN,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: NaN,
	VK_FORMAT_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_FORMAT_UNDEFINED",
		"1": "VK_FORMAT_R4G4_UNORM_PACK8",
		"2": "VK_FORMAT_R4G4B4A4_UNORM_PACK16",
		"3": "VK_FORMAT_B4G4R4A4_UNORM_PACK16",
		"4": "VK_FORMAT_R5G6B5_UNORM_PACK16",
		"5": "VK_FORMAT_B5G6R5_UNORM_PACK16",
		"6": "VK_FORMAT_R5G5B5A1_UNORM_PACK16",
		"7": "VK_FORMAT_B5G5R5A1_UNORM_PACK16",
		"8": "VK_FORMAT_A1R5G5B5_UNORM_PACK16",
		"9": "VK_FORMAT_R8_UNORM",
		"10": "VK_FORMAT_R8_SNORM",
		"11": "VK_FORMAT_R8_USCALED",
		"12": "VK_FORMAT_R8_SSCALED",
		"13": "VK_FORMAT_R8_UINT",
		"14": "VK_FORMAT_R8_SINT",
		"15": "VK_FORMAT_R8_SRGB",
		"16": "VK_FORMAT_R8G8_UNORM",
		"17": "VK_FORMAT_R8G8_SNORM",
		"18": "VK_FORMAT_R8G8_USCALED",
		"19": "VK_FORMAT_R8G8_SSCALED",
		"20": "VK_FORMAT_R8G8_UINT",
		"21": "VK_FORMAT_R8G8_SINT",
		"22": "VK_FORMAT_R8G8_SRGB",
		"23": "VK_FORMAT_R8G8B8_UNORM",
		"24": "VK_FORMAT_R8G8B8_SNORM",
		"25": "VK_FORMAT_R8G8B8_USCALED",
		"26": "VK_FORMAT_R8G8B8_SSCALED",
		"27": "VK_FORMAT_R8G8B8_UINT",
		"28": "VK_FORMAT_R8G8B8_SINT",
		"29": "VK_FORMAT_R8G8B8_SRGB",
		"30": "VK_FORMAT_B8G8R8_UNORM",
		"31": "VK_FORMAT_B8G8R8_SNORM",
		"32": "VK_FORMAT_B8G8R8_USCALED",
		"33": "VK_FORMAT_B8G8R8_SSCALED",
		"34": "VK_FORMAT_B8G8R8_UINT",
		"35": "VK_FORMAT_B8G8R8_SINT",
		"36": "VK_FORMAT_B8G8R8_SRGB",
		"37": "VK_FORMAT_R8G8B8A8_UNORM",
		"38": "VK_FORMAT_R8G8B8A8_SNORM",
		"39": "VK_FORMAT_R8G8B8A8_USCALED",
		"40": "VK_FORMAT_R8G8B8A8_SSCALED",
		"41": "VK_FORMAT_R8G8B8A8_UINT",
		"42": "VK_FORMAT_R8G8B8A8_SINT",
		"43": "VK_FORMAT_R8G8B8A8_SRGB",
		"44": "VK_FORMAT_B8G8R8A8_UNORM",
		"45": "VK_FORMAT_B8G8R8A8_SNORM",
		"46": "VK_FORMAT_B8G8R8A8_USCALED",
		"47": "VK_FORMAT_B8G8R8A8_SSCALED",
		"48": "VK_FORMAT_B8G8R8A8_UINT",
		"49": "VK_FORMAT_B8G8R8A8_SINT",
		"50": "VK_FORMAT_B8G8R8A8_SRGB",
		"51": "VK_FORMAT_A8B8G8R8_UNORM_PACK32",
		"52": "VK_FORMAT_A8B8G8R8_SNORM_PACK32",
		"53": "VK_FORMAT_A8B8G8R8_USCALED_PACK32",
		"54": "VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
		"55": "VK_FORMAT_A8B8G8R8_UINT_PACK32",
		"56": "VK_FORMAT_A8B8G8R8_SINT_PACK32",
		"57": "VK_FORMAT_A8B8G8R8_SRGB_PACK32",
		"58": "VK_FORMAT_A2R10G10B10_UNORM_PACK32",
		"59": "VK_FORMAT_A2R10G10B10_SNORM_PACK32",
		"60": "VK_FORMAT_A2R10G10B10_USCALED_PACK32",
		"61": "VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
		"62": "VK_FORMAT_A2R10G10B10_UINT_PACK32",
		"63": "VK_FORMAT_A2R10G10B10_SINT_PACK32",
		"64": "VK_FORMAT_A2B10G10R10_UNORM_PACK32",
		"65": "VK_FORMAT_A2B10G10R10_SNORM_PACK32",
		"66": "VK_FORMAT_A2B10G10R10_USCALED_PACK32",
		"67": "VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
		"68": "VK_FORMAT_A2B10G10R10_UINT_PACK32",
		"69": "VK_FORMAT_A2B10G10R10_SINT_PACK32",
		"70": "VK_FORMAT_R16_UNORM",
		"71": "VK_FORMAT_R16_SNORM",
		"72": "VK_FORMAT_R16_USCALED",
		"73": "VK_FORMAT_R16_SSCALED",
		"74": "VK_FORMAT_R16_UINT",
		"75": "VK_FORMAT_R16_SINT",
		"76": "VK_FORMAT_R16_SFLOAT",
		"77": "VK_FORMAT_R16G16_UNORM",
		"78": "VK_FORMAT_R16G16_SNORM",
		"79": "VK_FORMAT_R16G16_USCALED",
		"80": "VK_FORMAT_R16G16_SSCALED",
		"81": "VK_FORMAT_R16G16_UINT",
		"82": "VK_FORMAT_R16G16_SINT",
		"83": "VK_FORMAT_R16G16_SFLOAT",
		"84": "VK_FORMAT_R16G16B16_UNORM",
		"85": "VK_FORMAT_R16G16B16_SNORM",
		"86": "VK_FORMAT_R16G16B16_USCALED",
		"87": "VK_FORMAT_R16G16B16_SSCALED",
		"88": "VK_FORMAT_R16G16B16_UINT",
		"89": "VK_FORMAT_R16G16B16_SINT",
		"90": "VK_FORMAT_R16G16B16_SFLOAT",
		"91": "VK_FORMAT_R16G16B16A16_UNORM",
		"92": "VK_FORMAT_R16G16B16A16_SNORM",
		"93": "VK_FORMAT_R16G16B16A16_USCALED",
		"94": "VK_FORMAT_R16G16B16A16_SSCALED",
		"95": "VK_FORMAT_R16G16B16A16_UINT",
		"96": "VK_FORMAT_R16G16B16A16_SINT",
		"97": "VK_FORMAT_R16G16B16A16_SFLOAT",
		"98": "VK_FORMAT_R32_UINT",
		"99": "VK_FORMAT_R32_SINT",
		"100": "VK_FORMAT_R32_SFLOAT",
		"101": "VK_FORMAT_R32G32_UINT",
		"102": "VK_FORMAT_R32G32_SINT",
		"103": "VK_FORMAT_R32G32_SFLOAT",
		"104": "VK_FORMAT_R32G32B32_UINT",
		"105": "VK_FORMAT_R32G32B32_SINT",
		"106": "VK_FORMAT_R32G32B32_SFLOAT",
		"107": "VK_FORMAT_R32G32B32A32_UINT",
		"108": "VK_FORMAT_R32G32B32A32_SINT",
		"109": "VK_FORMAT_R32G32B32A32_SFLOAT",
		"110": "VK_FORMAT_R64_UINT",
		"111": "VK_FORMAT_R64_SINT",
		"112": "VK_FORMAT_R64_SFLOAT",
		"113": "VK_FORMAT_R64G64_UINT",
		"114": "VK_FORMAT_R64G64_SINT",
		"115": "VK_FORMAT_R64G64_SFLOAT",
		"116": "VK_FORMAT_R64G64B64_UINT",
		"117": "VK_FORMAT_R64G64B64_SINT",
		"118": "VK_FORMAT_R64G64B64_SFLOAT",
		"119": "VK_FORMAT_R64G64B64A64_UINT",
		"120": "VK_FORMAT_R64G64B64A64_SINT",
		"121": "VK_FORMAT_R64G64B64A64_SFLOAT",
		"122": "VK_FORMAT_B10G11R11_UFLOAT_PACK32",
		"123": "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
		"124": "VK_FORMAT_D16_UNORM",
		"125": "VK_FORMAT_X8_D24_UNORM_PACK32",
		"126": "VK_FORMAT_D32_SFLOAT",
		"127": "VK_FORMAT_S8_UINT",
		"128": "VK_FORMAT_D16_UNORM_S8_UINT",
		"129": "VK_FORMAT_D24_UNORM_S8_UINT",
		"130": "VK_FORMAT_D32_SFLOAT_S8_UINT",
		"131": "VK_FORMAT_BC1_RGB_UNORM_BLOCK",
		"132": "VK_FORMAT_BC1_RGB_SRGB_BLOCK",
		"133": "VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
		"134": "VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
		"135": "VK_FORMAT_BC2_UNORM_BLOCK",
		"136": "VK_FORMAT_BC2_SRGB_BLOCK",
		"137": "VK_FORMAT_BC3_UNORM_BLOCK",
		"138": "VK_FORMAT_BC3_SRGB_BLOCK",
		"139": "VK_FORMAT_BC4_UNORM_BLOCK",
		"140": "VK_FORMAT_BC4_SNORM_BLOCK",
		"141": "VK_FORMAT_BC5_UNORM_BLOCK",
		"142": "VK_FORMAT_BC5_SNORM_BLOCK",
		"143": "VK_FORMAT_BC6H_UFLOAT_BLOCK",
		"144": "VK_FORMAT_BC6H_SFLOAT_BLOCK",
		"145": "VK_FORMAT_BC7_UNORM_BLOCK",
		"146": "VK_FORMAT_BC7_SRGB_BLOCK",
		"147": "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
		"148": "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
		"149": "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
		"150": "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
		"151": "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
		"152": "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
		"153": "VK_FORMAT_EAC_R11_UNORM_BLOCK",
		"154": "VK_FORMAT_EAC_R11_SNORM_BLOCK",
		"155": "VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
		"156": "VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
		"157": "VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
		"158": "VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
		"159": "VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
		"160": "VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
		"161": "VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
		"162": "VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
		"163": "VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
		"164": "VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
		"165": "VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
		"166": "VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
		"167": "VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
		"168": "VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
		"169": "VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
		"170": "VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
		"171": "VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
		"172": "VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
		"173": "VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
		"174": "VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
		"175": "VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
		"176": "VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
		"177": "VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
		"178": "VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
		"179": "VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
		"180": "VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
		"181": "VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
		"182": "VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
		"183": "VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
		"184": "VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
		"1000156000": "VK_FORMAT_G8B8G8R8_422_UNORM",
		"1000156001": "VK_FORMAT_B8G8R8G8_422_UNORM",
		"1000156002": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
		"1000156003": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
		"1000156004": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
		"1000156005": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
		"1000156006": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
		"1000156007": "VK_FORMAT_R10X6_UNORM_PACK16",
		"1000156008": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
		"1000156009": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
		"1000156010": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
		"1000156011": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
		"1000156012": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
		"1000156013": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
		"1000156014": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
		"1000156015": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
		"1000156016": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
		"1000156017": "VK_FORMAT_R12X4_UNORM_PACK16",
		"1000156018": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
		"1000156019": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
		"1000156020": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
		"1000156021": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
		"1000156022": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
		"1000156023": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
		"1000156024": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
		"1000156025": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
		"1000156026": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
		"1000156027": "VK_FORMAT_G16B16G16R16_422_UNORM",
		"1000156028": "VK_FORMAT_B16G16R16G16_422_UNORM",
		"1000156029": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
		"1000156030": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
		"1000156031": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
		"1000156032": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
		"1000156033": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
		"1000330000": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM",
		"1000330001": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16",
		"1000330002": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16",
		"1000330003": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM",
		"1000340000": "VK_FORMAT_A4R4G4B4_UNORM_PACK16",
		"1000340001": "VK_FORMAT_A4B4G4R4_UNORM_PACK16",
		"1000066000": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK",
		"1000066001": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK",
		"1000066002": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK",
		"1000066003": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK",
		"1000066004": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK",
		"1000066005": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK",
		"1000066006": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK",
		"1000066007": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK",
		"1000066008": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK",
		"1000066009": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK",
		"1000066010": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK",
		"1000066011": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK",
		"1000066012": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK",
		"1000066013": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK",
		"1000054000": "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
		"1000054001": "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
		"1000054002": "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
		"1000054003": "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
		"1000054004": "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
		"1000054005": "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
		"1000054006": "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
		"1000054007": "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
		"NaN": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT",
		"NaN": "VK_FORMAT_G8B8G8R8_422_UNORM_KHR",
		"NaN": "VK_FORMAT_B8G8R8G8_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR",
		"NaN": "VK_FORMAT_R10X6_UNORM_PACK16_KHR",
		"NaN": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR",
		"NaN": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_R12X4_UNORM_PACK16_KHR",
		"NaN": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR",
		"NaN": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR",
		"NaN": "VK_FORMAT_G16B16G16R16_422_UNORM_KHR",
		"NaN": "VK_FORMAT_B16G16R16G16_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR",
		"NaN": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR",
		"NaN": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR",
		"NaN": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR",
		"NaN": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT",
		"NaN": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT",
		"NaN": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT",
		"NaN": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT",
		"NaN": "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT",
		"NaN": "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT",
		"2147483647": "VK_FORMAT_MAX_ENUM",
}};
export const VkImageTiling = {
	VK_IMAGE_TILING_OPTIMAL: 0,
	VK_IMAGE_TILING_LINEAR: 1,
	VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: 1000158000,
	VK_IMAGE_TILING_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_IMAGE_TILING_OPTIMAL",
		"1": "VK_IMAGE_TILING_LINEAR",
		"1000158000": "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT",
		"2147483647": "VK_IMAGE_TILING_MAX_ENUM",
}};
export const VkImageType = {
	VK_IMAGE_TYPE_1D: 0,
	VK_IMAGE_TYPE_2D: 1,
	VK_IMAGE_TYPE_3D: 2,
	VK_IMAGE_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_IMAGE_TYPE_1D",
		"1": "VK_IMAGE_TYPE_2D",
		"2": "VK_IMAGE_TYPE_3D",
		"2147483647": "VK_IMAGE_TYPE_MAX_ENUM",
}};
export const VkPhysicalDeviceType = {
	VK_PHYSICAL_DEVICE_TYPE_OTHER: 0,
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: 1,
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: 2,
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: 3,
	VK_PHYSICAL_DEVICE_TYPE_CPU: 4,
	VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_PHYSICAL_DEVICE_TYPE_OTHER",
		"1": "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU",
		"2": "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU",
		"3": "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU",
		"4": "VK_PHYSICAL_DEVICE_TYPE_CPU",
		"2147483647": "VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM",
}};
export const VkQueryType = {
	VK_QUERY_TYPE_OCCLUSION: 0,
	VK_QUERY_TYPE_PIPELINE_STATISTICS: 1,
	VK_QUERY_TYPE_TIMESTAMP: 2,
	VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: 1000028004,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: 1000116000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: 1000150000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: 1000150001,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: 1000165000,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: 1000210000,
	VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: 1000382000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR: 1000386000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: 1000386001,
	VK_QUERY_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_QUERY_TYPE_OCCLUSION",
		"1": "VK_QUERY_TYPE_PIPELINE_STATISTICS",
		"2": "VK_QUERY_TYPE_TIMESTAMP",
		"1000028004": "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT",
		"1000116000": "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR",
		"1000150000": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR",
		"1000150001": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR",
		"1000165000": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV",
		"1000210000": "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL",
		"1000382000": "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT",
		"1000386000": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR",
		"1000386001": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR",
		"2147483647": "VK_QUERY_TYPE_MAX_ENUM",
}};
export const VkSharingMode = {
	VK_SHARING_MODE_EXCLUSIVE: 0,
	VK_SHARING_MODE_CONCURRENT: 1,
	VK_SHARING_MODE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SHARING_MODE_EXCLUSIVE",
		"1": "VK_SHARING_MODE_CONCURRENT",
		"2147483647": "VK_SHARING_MODE_MAX_ENUM",
}};
export const VkComponentSwizzle = {
	VK_COMPONENT_SWIZZLE_IDENTITY: 0,
	VK_COMPONENT_SWIZZLE_ZERO: 1,
	VK_COMPONENT_SWIZZLE_ONE: 2,
	VK_COMPONENT_SWIZZLE_R: 3,
	VK_COMPONENT_SWIZZLE_G: 4,
	VK_COMPONENT_SWIZZLE_B: 5,
	VK_COMPONENT_SWIZZLE_A: 6,
	VK_COMPONENT_SWIZZLE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_COMPONENT_SWIZZLE_IDENTITY",
		"1": "VK_COMPONENT_SWIZZLE_ZERO",
		"2": "VK_COMPONENT_SWIZZLE_ONE",
		"3": "VK_COMPONENT_SWIZZLE_R",
		"4": "VK_COMPONENT_SWIZZLE_G",
		"5": "VK_COMPONENT_SWIZZLE_B",
		"6": "VK_COMPONENT_SWIZZLE_A",
		"2147483647": "VK_COMPONENT_SWIZZLE_MAX_ENUM",
}};
export const VkImageViewType = {
	VK_IMAGE_VIEW_TYPE_1D: 0,
	VK_IMAGE_VIEW_TYPE_2D: 1,
	VK_IMAGE_VIEW_TYPE_3D: 2,
	VK_IMAGE_VIEW_TYPE_CUBE: 3,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY: 4,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY: 5,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: 6,
	VK_IMAGE_VIEW_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_IMAGE_VIEW_TYPE_1D",
		"1": "VK_IMAGE_VIEW_TYPE_2D",
		"2": "VK_IMAGE_VIEW_TYPE_3D",
		"3": "VK_IMAGE_VIEW_TYPE_CUBE",
		"4": "VK_IMAGE_VIEW_TYPE_1D_ARRAY",
		"5": "VK_IMAGE_VIEW_TYPE_2D_ARRAY",
		"6": "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY",
		"2147483647": "VK_IMAGE_VIEW_TYPE_MAX_ENUM",
}};
export const VkBlendFactor = {
	VK_BLEND_FACTOR_ZERO: 0,
	VK_BLEND_FACTOR_ONE: 1,
	VK_BLEND_FACTOR_SRC_COLOR: 2,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: 3,
	VK_BLEND_FACTOR_DST_COLOR: 4,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: 5,
	VK_BLEND_FACTOR_SRC_ALPHA: 6,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: 7,
	VK_BLEND_FACTOR_DST_ALPHA: 8,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: 9,
	VK_BLEND_FACTOR_CONSTANT_COLOR: 10,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: 11,
	VK_BLEND_FACTOR_CONSTANT_ALPHA: 12,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: 13,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: 14,
	VK_BLEND_FACTOR_SRC1_COLOR: 15,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: 16,
	VK_BLEND_FACTOR_SRC1_ALPHA: 17,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: 18,
	VK_BLEND_FACTOR_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_BLEND_FACTOR_ZERO",
		"1": "VK_BLEND_FACTOR_ONE",
		"2": "VK_BLEND_FACTOR_SRC_COLOR",
		"3": "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
		"4": "VK_BLEND_FACTOR_DST_COLOR",
		"5": "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",
		"6": "VK_BLEND_FACTOR_SRC_ALPHA",
		"7": "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
		"8": "VK_BLEND_FACTOR_DST_ALPHA",
		"9": "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
		"10": "VK_BLEND_FACTOR_CONSTANT_COLOR",
		"11": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
		"12": "VK_BLEND_FACTOR_CONSTANT_ALPHA",
		"13": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
		"14": "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",
		"15": "VK_BLEND_FACTOR_SRC1_COLOR",
		"16": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
		"17": "VK_BLEND_FACTOR_SRC1_ALPHA",
		"18": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
		"2147483647": "VK_BLEND_FACTOR_MAX_ENUM",
}};
export const VkBlendOp = {
	VK_BLEND_OP_ADD: 0,
	VK_BLEND_OP_SUBTRACT: 1,
	VK_BLEND_OP_REVERSE_SUBTRACT: 2,
	VK_BLEND_OP_MIN: 3,
	VK_BLEND_OP_MAX: 4,
	VK_BLEND_OP_ZERO_EXT: 1000148000,
	VK_BLEND_OP_SRC_EXT: 1000148001,
	VK_BLEND_OP_DST_EXT: 1000148002,
	VK_BLEND_OP_SRC_OVER_EXT: 1000148003,
	VK_BLEND_OP_DST_OVER_EXT: 1000148004,
	VK_BLEND_OP_SRC_IN_EXT: 1000148005,
	VK_BLEND_OP_DST_IN_EXT: 1000148006,
	VK_BLEND_OP_SRC_OUT_EXT: 1000148007,
	VK_BLEND_OP_DST_OUT_EXT: 1000148008,
	VK_BLEND_OP_SRC_ATOP_EXT: 1000148009,
	VK_BLEND_OP_DST_ATOP_EXT: 1000148010,
	VK_BLEND_OP_XOR_EXT: 1000148011,
	VK_BLEND_OP_MULTIPLY_EXT: 1000148012,
	VK_BLEND_OP_SCREEN_EXT: 1000148013,
	VK_BLEND_OP_OVERLAY_EXT: 1000148014,
	VK_BLEND_OP_DARKEN_EXT: 1000148015,
	VK_BLEND_OP_LIGHTEN_EXT: 1000148016,
	VK_BLEND_OP_COLORDODGE_EXT: 1000148017,
	VK_BLEND_OP_COLORBURN_EXT: 1000148018,
	VK_BLEND_OP_HARDLIGHT_EXT: 1000148019,
	VK_BLEND_OP_SOFTLIGHT_EXT: 1000148020,
	VK_BLEND_OP_DIFFERENCE_EXT: 1000148021,
	VK_BLEND_OP_EXCLUSION_EXT: 1000148022,
	VK_BLEND_OP_INVERT_EXT: 1000148023,
	VK_BLEND_OP_INVERT_RGB_EXT: 1000148024,
	VK_BLEND_OP_LINEARDODGE_EXT: 1000148025,
	VK_BLEND_OP_LINEARBURN_EXT: 1000148026,
	VK_BLEND_OP_VIVIDLIGHT_EXT: 1000148027,
	VK_BLEND_OP_LINEARLIGHT_EXT: 1000148028,
	VK_BLEND_OP_PINLIGHT_EXT: 1000148029,
	VK_BLEND_OP_HARDMIX_EXT: 1000148030,
	VK_BLEND_OP_HSL_HUE_EXT: 1000148031,
	VK_BLEND_OP_HSL_SATURATION_EXT: 1000148032,
	VK_BLEND_OP_HSL_COLOR_EXT: 1000148033,
	VK_BLEND_OP_HSL_LUMINOSITY_EXT: 1000148034,
	VK_BLEND_OP_PLUS_EXT: 1000148035,
	VK_BLEND_OP_PLUS_CLAMPED_EXT: 1000148036,
	VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: 1000148037,
	VK_BLEND_OP_PLUS_DARKER_EXT: 1000148038,
	VK_BLEND_OP_MINUS_EXT: 1000148039,
	VK_BLEND_OP_MINUS_CLAMPED_EXT: 1000148040,
	VK_BLEND_OP_CONTRAST_EXT: 1000148041,
	VK_BLEND_OP_INVERT_OVG_EXT: 1000148042,
	VK_BLEND_OP_RED_EXT: 1000148043,
	VK_BLEND_OP_GREEN_EXT: 1000148044,
	VK_BLEND_OP_BLUE_EXT: 1000148045,
	VK_BLEND_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_BLEND_OP_ADD",
		"1": "VK_BLEND_OP_SUBTRACT",
		"2": "VK_BLEND_OP_REVERSE_SUBTRACT",
		"3": "VK_BLEND_OP_MIN",
		"4": "VK_BLEND_OP_MAX",
		"1000148000": "VK_BLEND_OP_ZERO_EXT",
		"1000148001": "VK_BLEND_OP_SRC_EXT",
		"1000148002": "VK_BLEND_OP_DST_EXT",
		"1000148003": "VK_BLEND_OP_SRC_OVER_EXT",
		"1000148004": "VK_BLEND_OP_DST_OVER_EXT",
		"1000148005": "VK_BLEND_OP_SRC_IN_EXT",
		"1000148006": "VK_BLEND_OP_DST_IN_EXT",
		"1000148007": "VK_BLEND_OP_SRC_OUT_EXT",
		"1000148008": "VK_BLEND_OP_DST_OUT_EXT",
		"1000148009": "VK_BLEND_OP_SRC_ATOP_EXT",
		"1000148010": "VK_BLEND_OP_DST_ATOP_EXT",
		"1000148011": "VK_BLEND_OP_XOR_EXT",
		"1000148012": "VK_BLEND_OP_MULTIPLY_EXT",
		"1000148013": "VK_BLEND_OP_SCREEN_EXT",
		"1000148014": "VK_BLEND_OP_OVERLAY_EXT",
		"1000148015": "VK_BLEND_OP_DARKEN_EXT",
		"1000148016": "VK_BLEND_OP_LIGHTEN_EXT",
		"1000148017": "VK_BLEND_OP_COLORDODGE_EXT",
		"1000148018": "VK_BLEND_OP_COLORBURN_EXT",
		"1000148019": "VK_BLEND_OP_HARDLIGHT_EXT",
		"1000148020": "VK_BLEND_OP_SOFTLIGHT_EXT",
		"1000148021": "VK_BLEND_OP_DIFFERENCE_EXT",
		"1000148022": "VK_BLEND_OP_EXCLUSION_EXT",
		"1000148023": "VK_BLEND_OP_INVERT_EXT",
		"1000148024": "VK_BLEND_OP_INVERT_RGB_EXT",
		"1000148025": "VK_BLEND_OP_LINEARDODGE_EXT",
		"1000148026": "VK_BLEND_OP_LINEARBURN_EXT",
		"1000148027": "VK_BLEND_OP_VIVIDLIGHT_EXT",
		"1000148028": "VK_BLEND_OP_LINEARLIGHT_EXT",
		"1000148029": "VK_BLEND_OP_PINLIGHT_EXT",
		"1000148030": "VK_BLEND_OP_HARDMIX_EXT",
		"1000148031": "VK_BLEND_OP_HSL_HUE_EXT",
		"1000148032": "VK_BLEND_OP_HSL_SATURATION_EXT",
		"1000148033": "VK_BLEND_OP_HSL_COLOR_EXT",
		"1000148034": "VK_BLEND_OP_HSL_LUMINOSITY_EXT",
		"1000148035": "VK_BLEND_OP_PLUS_EXT",
		"1000148036": "VK_BLEND_OP_PLUS_CLAMPED_EXT",
		"1000148037": "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
		"1000148038": "VK_BLEND_OP_PLUS_DARKER_EXT",
		"1000148039": "VK_BLEND_OP_MINUS_EXT",
		"1000148040": "VK_BLEND_OP_MINUS_CLAMPED_EXT",
		"1000148041": "VK_BLEND_OP_CONTRAST_EXT",
		"1000148042": "VK_BLEND_OP_INVERT_OVG_EXT",
		"1000148043": "VK_BLEND_OP_RED_EXT",
		"1000148044": "VK_BLEND_OP_GREEN_EXT",
		"1000148045": "VK_BLEND_OP_BLUE_EXT",
		"2147483647": "VK_BLEND_OP_MAX_ENUM",
}};
export const VkCompareOp = {
	VK_COMPARE_OP_NEVER: 0,
	VK_COMPARE_OP_LESS: 1,
	VK_COMPARE_OP_EQUAL: 2,
	VK_COMPARE_OP_LESS_OR_EQUAL: 3,
	VK_COMPARE_OP_GREATER: 4,
	VK_COMPARE_OP_NOT_EQUAL: 5,
	VK_COMPARE_OP_GREATER_OR_EQUAL: 6,
	VK_COMPARE_OP_ALWAYS: 7,
	VK_COMPARE_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_COMPARE_OP_NEVER",
		"1": "VK_COMPARE_OP_LESS",
		"2": "VK_COMPARE_OP_EQUAL",
		"3": "VK_COMPARE_OP_LESS_OR_EQUAL",
		"4": "VK_COMPARE_OP_GREATER",
		"5": "VK_COMPARE_OP_NOT_EQUAL",
		"6": "VK_COMPARE_OP_GREATER_OR_EQUAL",
		"7": "VK_COMPARE_OP_ALWAYS",
		"2147483647": "VK_COMPARE_OP_MAX_ENUM",
}};
export const VkDynamicState = {
	VK_DYNAMIC_STATE_VIEWPORT: 0,
	VK_DYNAMIC_STATE_SCISSOR: 1,
	VK_DYNAMIC_STATE_LINE_WIDTH: 2,
	VK_DYNAMIC_STATE_DEPTH_BIAS: 3,
	VK_DYNAMIC_STATE_BLEND_CONSTANTS: 4,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS: 5,
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: 6,
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: 7,
	VK_DYNAMIC_STATE_STENCIL_REFERENCE: 8,
	VK_DYNAMIC_STATE_CULL_MODE: 1000267000,
	VK_DYNAMIC_STATE_FRONT_FACE: 1000267001,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: 1000267002,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: 1000267003,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: 1000267004,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: 1000267005,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: 1000267006,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: 1000267007,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: 1000267008,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: 1000267009,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: 1000267010,
	VK_DYNAMIC_STATE_STENCIL_OP: 1000267011,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: 1000377001,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: 1000377002,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: 1000377004,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: 1000087000,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: 1000099000,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: 1000143000,
	VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: 1000347000,
	VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: 1000164004,
	VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: 1000164006,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: 1000205001,
	VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: 1000226000,
	VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: 1000259000,
	VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: 1000352000,
	VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: 1000377000,
	VK_DYNAMIC_STATE_LOGIC_OP_EXT: 1000377003,
	VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: 1000381000,
	VK_DYNAMIC_STATE_CULL_MODE_EXT: NaN,
	VK_DYNAMIC_STATE_FRONT_FACE_EXT: NaN,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: NaN,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: NaN,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: NaN,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: NaN,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: NaN,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_STENCIL_OP_EXT: NaN,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: NaN,
	VK_DYNAMIC_STATE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_DYNAMIC_STATE_VIEWPORT",
		"1": "VK_DYNAMIC_STATE_SCISSOR",
		"2": "VK_DYNAMIC_STATE_LINE_WIDTH",
		"3": "VK_DYNAMIC_STATE_DEPTH_BIAS",
		"4": "VK_DYNAMIC_STATE_BLEND_CONSTANTS",
		"5": "VK_DYNAMIC_STATE_DEPTH_BOUNDS",
		"6": "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK",
		"7": "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK",
		"8": "VK_DYNAMIC_STATE_STENCIL_REFERENCE",
		"1000267000": "VK_DYNAMIC_STATE_CULL_MODE",
		"1000267001": "VK_DYNAMIC_STATE_FRONT_FACE",
		"1000267002": "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY",
		"1000267003": "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT",
		"1000267004": "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT",
		"1000267005": "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE",
		"1000267006": "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE",
		"1000267007": "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE",
		"1000267008": "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP",
		"1000267009": "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE",
		"1000267010": "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE",
		"1000267011": "VK_DYNAMIC_STATE_STENCIL_OP",
		"1000377001": "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE",
		"1000377002": "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE",
		"1000377004": "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE",
		"1000087000": "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV",
		"1000099000": "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT",
		"1000143000": "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT",
		"1000347000": "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR",
		"1000164004": "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV",
		"1000164006": "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV",
		"1000205001": "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV",
		"1000226000": "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR",
		"1000259000": "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT",
		"1000352000": "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT",
		"1000377000": "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT",
		"1000377003": "VK_DYNAMIC_STATE_LOGIC_OP_EXT",
		"1000381000": "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_CULL_MODE_EXT",
		"NaN": "VK_DYNAMIC_STATE_FRONT_FACE_EXT",
		"NaN": "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT",
		"NaN": "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT",
		"NaN": "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT",
		"NaN": "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT",
		"NaN": "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT",
		"NaN": "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_STENCIL_OP_EXT",
		"NaN": "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT",
		"NaN": "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT",
		"2147483647": "VK_DYNAMIC_STATE_MAX_ENUM",
}};
export const VkFrontFace = {
	VK_FRONT_FACE_COUNTER_CLOCKWISE: 0,
	VK_FRONT_FACE_CLOCKWISE: 1,
	VK_FRONT_FACE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_FRONT_FACE_COUNTER_CLOCKWISE",
		"1": "VK_FRONT_FACE_CLOCKWISE",
		"2147483647": "VK_FRONT_FACE_MAX_ENUM",
}};
export const VkVertexInputRate = {
	VK_VERTEX_INPUT_RATE_VERTEX: 0,
	VK_VERTEX_INPUT_RATE_INSTANCE: 1,
	VK_VERTEX_INPUT_RATE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_VERTEX_INPUT_RATE_VERTEX",
		"1": "VK_VERTEX_INPUT_RATE_INSTANCE",
		"2147483647": "VK_VERTEX_INPUT_RATE_MAX_ENUM",
}};
export const VkPrimitiveTopology = {
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST: 0,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST: 1,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: 2,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: 3,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: 4,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: 5,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: 6,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: 7,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: 8,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: 9,
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: 10,
	VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_PRIMITIVE_TOPOLOGY_POINT_LIST",
		"1": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST",
		"2": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP",
		"3": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",
		"4": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",
		"5": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",
		"6": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",
		"7": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",
		"8": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY",
		"9": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY",
		"10": "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST",
		"2147483647": "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM",
}};
export const VkPolygonMode = {
	VK_POLYGON_MODE_FILL: 0,
	VK_POLYGON_MODE_LINE: 1,
	VK_POLYGON_MODE_POINT: 2,
	VK_POLYGON_MODE_FILL_RECTANGLE_NV: 1000153000,
	VK_POLYGON_MODE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_POLYGON_MODE_FILL",
		"1": "VK_POLYGON_MODE_LINE",
		"2": "VK_POLYGON_MODE_POINT",
		"1000153000": "VK_POLYGON_MODE_FILL_RECTANGLE_NV",
		"2147483647": "VK_POLYGON_MODE_MAX_ENUM",
}};
export const VkStencilOp = {
	VK_STENCIL_OP_KEEP: 0,
	VK_STENCIL_OP_ZERO: 1,
	VK_STENCIL_OP_REPLACE: 2,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP: 3,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP: 4,
	VK_STENCIL_OP_INVERT: 5,
	VK_STENCIL_OP_INCREMENT_AND_WRAP: 6,
	VK_STENCIL_OP_DECREMENT_AND_WRAP: 7,
	VK_STENCIL_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_STENCIL_OP_KEEP",
		"1": "VK_STENCIL_OP_ZERO",
		"2": "VK_STENCIL_OP_REPLACE",
		"3": "VK_STENCIL_OP_INCREMENT_AND_CLAMP",
		"4": "VK_STENCIL_OP_DECREMENT_AND_CLAMP",
		"5": "VK_STENCIL_OP_INVERT",
		"6": "VK_STENCIL_OP_INCREMENT_AND_WRAP",
		"7": "VK_STENCIL_OP_DECREMENT_AND_WRAP",
		"2147483647": "VK_STENCIL_OP_MAX_ENUM",
}};
export const VkLogicOp = {
	VK_LOGIC_OP_CLEAR: 0,
	VK_LOGIC_OP_AND: 1,
	VK_LOGIC_OP_AND_REVERSE: 2,
	VK_LOGIC_OP_COPY: 3,
	VK_LOGIC_OP_AND_INVERTED: 4,
	VK_LOGIC_OP_NO_OP: 5,
	VK_LOGIC_OP_XOR: 6,
	VK_LOGIC_OP_OR: 7,
	VK_LOGIC_OP_NOR: 8,
	VK_LOGIC_OP_EQUIVALENT: 9,
	VK_LOGIC_OP_INVERT: 10,
	VK_LOGIC_OP_OR_REVERSE: 11,
	VK_LOGIC_OP_COPY_INVERTED: 12,
	VK_LOGIC_OP_OR_INVERTED: 13,
	VK_LOGIC_OP_NAND: 14,
	VK_LOGIC_OP_SET: 15,
	VK_LOGIC_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_LOGIC_OP_CLEAR",
		"1": "VK_LOGIC_OP_AND",
		"2": "VK_LOGIC_OP_AND_REVERSE",
		"3": "VK_LOGIC_OP_COPY",
		"4": "VK_LOGIC_OP_AND_INVERTED",
		"5": "VK_LOGIC_OP_NO_OP",
		"6": "VK_LOGIC_OP_XOR",
		"7": "VK_LOGIC_OP_OR",
		"8": "VK_LOGIC_OP_NOR",
		"9": "VK_LOGIC_OP_EQUIVALENT",
		"10": "VK_LOGIC_OP_INVERT",
		"11": "VK_LOGIC_OP_OR_REVERSE",
		"12": "VK_LOGIC_OP_COPY_INVERTED",
		"13": "VK_LOGIC_OP_OR_INVERTED",
		"14": "VK_LOGIC_OP_NAND",
		"15": "VK_LOGIC_OP_SET",
		"2147483647": "VK_LOGIC_OP_MAX_ENUM",
}};
export const VkBorderColor = {
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: 0,
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: 1,
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: 2,
	VK_BORDER_COLOR_INT_OPAQUE_BLACK: 3,
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: 4,
	VK_BORDER_COLOR_INT_OPAQUE_WHITE: 5,
	VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: 1000287003,
	VK_BORDER_COLOR_INT_CUSTOM_EXT: 1000287004,
	VK_BORDER_COLOR_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK",
		"1": "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK",
		"2": "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK",
		"3": "VK_BORDER_COLOR_INT_OPAQUE_BLACK",
		"4": "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE",
		"5": "VK_BORDER_COLOR_INT_OPAQUE_WHITE",
		"1000287003": "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT",
		"1000287004": "VK_BORDER_COLOR_INT_CUSTOM_EXT",
		"2147483647": "VK_BORDER_COLOR_MAX_ENUM",
}};
export const VkFilter = {
	VK_FILTER_NEAREST: 0,
	VK_FILTER_LINEAR: 1,
	VK_FILTER_CUBIC_EXT: 1000015000,
	VK_FILTER_CUBIC_IMG: NaN,
	VK_FILTER_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_FILTER_NEAREST",
		"1": "VK_FILTER_LINEAR",
		"1000015000": "VK_FILTER_CUBIC_EXT",
		"NaN": "VK_FILTER_CUBIC_IMG",
		"2147483647": "VK_FILTER_MAX_ENUM",
}};
export const VkSamplerAddressMode = {
	VK_SAMPLER_ADDRESS_MODE_REPEAT: 0,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: 1,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: 2,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: 3,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: 4,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: NaN,
	VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SAMPLER_ADDRESS_MODE_REPEAT",
		"1": "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",
		"2": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",
		"3": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",
		"4": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
		"NaN": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR",
		"2147483647": "VK_SAMPLER_ADDRESS_MODE_MAX_ENUM",
}};
export const VkSamplerMipmapMode = {
	VK_SAMPLER_MIPMAP_MODE_NEAREST: 0,
	VK_SAMPLER_MIPMAP_MODE_LINEAR: 1,
	VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SAMPLER_MIPMAP_MODE_NEAREST",
		"1": "VK_SAMPLER_MIPMAP_MODE_LINEAR",
		"2147483647": "VK_SAMPLER_MIPMAP_MODE_MAX_ENUM",
}};
export const VkDescriptorType = {
	VK_DESCRIPTOR_TYPE_SAMPLER: 0,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: 1,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: 2,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: 3,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: 4,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: 5,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: 6,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: 7,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: 8,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: 9,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: 10,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: 1000138000,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: 1000150000,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: 1000165000,
	VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: 1000351000,
	VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: 1000440000,
	VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: 1000440001,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: NaN,
	VK_DESCRIPTOR_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_DESCRIPTOR_TYPE_SAMPLER",
		"1": "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",
		"2": "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",
		"3": "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
		"4": "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
		"5": "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
		"6": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",
		"7": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",
		"8": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",
		"9": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",
		"10": "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT",
		"1000138000": "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK",
		"1000150000": "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR",
		"1000165000": "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV",
		"1000351000": "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE",
		"1000440000": "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM",
		"1000440001": "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM",
		"NaN": "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT",
		"2147483647": "VK_DESCRIPTOR_TYPE_MAX_ENUM",
}};
export const VkAttachmentLoadOp = {
	VK_ATTACHMENT_LOAD_OP_LOAD: 0,
	VK_ATTACHMENT_LOAD_OP_CLEAR: 1,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE: 2,
	VK_ATTACHMENT_LOAD_OP_NONE_EXT: 1000400000,
	VK_ATTACHMENT_LOAD_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_ATTACHMENT_LOAD_OP_LOAD",
		"1": "VK_ATTACHMENT_LOAD_OP_CLEAR",
		"2": "VK_ATTACHMENT_LOAD_OP_DONT_CARE",
		"1000400000": "VK_ATTACHMENT_LOAD_OP_NONE_EXT",
		"2147483647": "VK_ATTACHMENT_LOAD_OP_MAX_ENUM",
}};
export const VkAttachmentStoreOp = {
	VK_ATTACHMENT_STORE_OP_STORE: 0,
	VK_ATTACHMENT_STORE_OP_DONT_CARE: 1,
	VK_ATTACHMENT_STORE_OP_NONE: 1000301000,
	VK_ATTACHMENT_STORE_OP_NONE_KHR: NaN,
	VK_ATTACHMENT_STORE_OP_NONE_QCOM: NaN,
	VK_ATTACHMENT_STORE_OP_NONE_EXT: NaN,
	VK_ATTACHMENT_STORE_OP_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_ATTACHMENT_STORE_OP_STORE",
		"1": "VK_ATTACHMENT_STORE_OP_DONT_CARE",
		"1000301000": "VK_ATTACHMENT_STORE_OP_NONE",
		"NaN": "VK_ATTACHMENT_STORE_OP_NONE_KHR",
		"NaN": "VK_ATTACHMENT_STORE_OP_NONE_QCOM",
		"NaN": "VK_ATTACHMENT_STORE_OP_NONE_EXT",
		"2147483647": "VK_ATTACHMENT_STORE_OP_MAX_ENUM",
}};
export const VkPipelineBindPoint = {
	VK_PIPELINE_BIND_POINT_GRAPHICS: 0,
	VK_PIPELINE_BIND_POINT_COMPUTE: 1,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: 1000165000,
	VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: 1000369003,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: NaN,
	VK_PIPELINE_BIND_POINT_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_PIPELINE_BIND_POINT_GRAPHICS",
		"1": "VK_PIPELINE_BIND_POINT_COMPUTE",
		"1000165000": "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR",
		"1000369003": "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI",
		"NaN": "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV",
		"2147483647": "VK_PIPELINE_BIND_POINT_MAX_ENUM",
}};
export const VkCommandBufferLevel = {
	VK_COMMAND_BUFFER_LEVEL_PRIMARY: 0,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY: 1,
	VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_COMMAND_BUFFER_LEVEL_PRIMARY",
		"1": "VK_COMMAND_BUFFER_LEVEL_SECONDARY",
		"2147483647": "VK_COMMAND_BUFFER_LEVEL_MAX_ENUM",
}};
export const VkIndexType = {
	VK_INDEX_TYPE_UINT16: 0,
	VK_INDEX_TYPE_UINT32: 1,
	VK_INDEX_TYPE_NONE_KHR: 1000165000,
	VK_INDEX_TYPE_UINT8_EXT: 1000265000,
	VK_INDEX_TYPE_NONE_NV: NaN,
	VK_INDEX_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_INDEX_TYPE_UINT16",
		"1": "VK_INDEX_TYPE_UINT32",
		"1000165000": "VK_INDEX_TYPE_NONE_KHR",
		"1000265000": "VK_INDEX_TYPE_UINT8_EXT",
		"NaN": "VK_INDEX_TYPE_NONE_NV",
		"2147483647": "VK_INDEX_TYPE_MAX_ENUM",
}};
export const VkSubpassContents = {
	VK_SUBPASS_CONTENTS_INLINE: 0,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: 1,
	VK_SUBPASS_CONTENTS_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SUBPASS_CONTENTS_INLINE",
		"1": "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS",
		"2147483647": "VK_SUBPASS_CONTENTS_MAX_ENUM",
}};
export const VkAccessFlagBits = {
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT: 1,
	VK_ACCESS_INDEX_READ_BIT: 2,
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: 4,
	VK_ACCESS_UNIFORM_READ_BIT: 8,
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: 16,
	VK_ACCESS_SHADER_READ_BIT: 32,
	VK_ACCESS_SHADER_WRITE_BIT: 64,
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: 128,
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: 256,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: 512,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: 1024,
	VK_ACCESS_TRANSFER_READ_BIT: 2048,
	VK_ACCESS_TRANSFER_WRITE_BIT: 4096,
	VK_ACCESS_HOST_READ_BIT: 8192,
	VK_ACCESS_HOST_WRITE_BIT: 16384,
	VK_ACCESS_MEMORY_READ_BIT: 32768,
	VK_ACCESS_MEMORY_WRITE_BIT: 65536,
	VK_ACCESS_NONE: 0,
	VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: 33554432,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: 67108864,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: 134217728,
	VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: 1048576,
	VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: 524288,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: 2097152,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: 4194304,
	VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: 16777216,
	VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: 8388608,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: 131072,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: 262144,
	VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: NaN,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: NaN,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: NaN,
	VK_ACCESS_NONE_KHR: NaN,
	VK_ACCESS_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
		"2": "VK_ACCESS_INDEX_READ_BIT",
		"4": "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
		"8": "VK_ACCESS_UNIFORM_READ_BIT",
		"16": "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
		"32": "VK_ACCESS_SHADER_READ_BIT",
		"64": "VK_ACCESS_SHADER_WRITE_BIT",
		"128": "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
		"256": "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
		"512": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
		"1024": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
		"2048": "VK_ACCESS_TRANSFER_READ_BIT",
		"4096": "VK_ACCESS_TRANSFER_WRITE_BIT",
		"8192": "VK_ACCESS_HOST_READ_BIT",
		"16384": "VK_ACCESS_HOST_WRITE_BIT",
		"32768": "VK_ACCESS_MEMORY_READ_BIT",
		"65536": "VK_ACCESS_MEMORY_WRITE_BIT",
		"0": "VK_ACCESS_NONE",
		"33554432": "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT",
		"67108864": "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT",
		"134217728": "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT",
		"1048576": "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",
		"524288": "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT",
		"2097152": "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
		"4194304": "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",
		"16777216": "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT",
		"8388608": "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR",
		"131072": "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV",
		"262144": "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV",
		"NaN": "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
		"NaN": "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",
		"NaN": "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
		"NaN": "VK_ACCESS_NONE_KHR",
		"2147483647": "VK_ACCESS_FLAG_BITS_MAX_ENUM",
}};
export const VkImageAspectFlagBits = {
	VK_IMAGE_ASPECT_COLOR_BIT: 1,
	VK_IMAGE_ASPECT_DEPTH_BIT: 2,
	VK_IMAGE_ASPECT_STENCIL_BIT: 4,
	VK_IMAGE_ASPECT_METADATA_BIT: 8,
	VK_IMAGE_ASPECT_PLANE_0_BIT: 16,
	VK_IMAGE_ASPECT_PLANE_1_BIT: 32,
	VK_IMAGE_ASPECT_PLANE_2_BIT: 64,
	VK_IMAGE_ASPECT_NONE: 0,
	VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: 128,
	VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: 256,
	VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: 512,
	VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: 1024,
	VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: NaN,
	VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: NaN,
	VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: NaN,
	VK_IMAGE_ASPECT_NONE_KHR: NaN,
	VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_IMAGE_ASPECT_COLOR_BIT",
		"2": "VK_IMAGE_ASPECT_DEPTH_BIT",
		"4": "VK_IMAGE_ASPECT_STENCIL_BIT",
		"8": "VK_IMAGE_ASPECT_METADATA_BIT",
		"16": "VK_IMAGE_ASPECT_PLANE_0_BIT",
		"32": "VK_IMAGE_ASPECT_PLANE_1_BIT",
		"64": "VK_IMAGE_ASPECT_PLANE_2_BIT",
		"0": "VK_IMAGE_ASPECT_NONE",
		"128": "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT",
		"256": "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT",
		"512": "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT",
		"1024": "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT",
		"NaN": "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR",
		"NaN": "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR",
		"NaN": "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR",
		"NaN": "VK_IMAGE_ASPECT_NONE_KHR",
		"2147483647": "VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM",
}};
export const VkFormatFeatureFlagBits = {
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: 1,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: 2,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: 4,
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: 8,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: 16,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: 32,
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: 64,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: 128,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: 256,
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: 512,
	VK_FORMAT_FEATURE_BLIT_SRC_BIT: 1024,
	VK_FORMAT_FEATURE_BLIT_DST_BIT: 2048,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: 4096,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: 16384,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT: 32768,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: 131072,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: 262144,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: 524288,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: 1048576,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: 2097152,
	VK_FORMAT_FEATURE_DISJOINT_BIT: 4194304,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: 8388608,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: 65536,
	VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: 536870912,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: 8192,
	VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: 16777216,
	VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: 1073741824,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: NaN,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: NaN,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: NaN,
	VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT",
		"2": "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT",
		"4": "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT",
		"8": "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT",
		"16": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT",
		"32": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT",
		"64": "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT",
		"128": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT",
		"256": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT",
		"512": "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT",
		"1024": "VK_FORMAT_FEATURE_BLIT_SRC_BIT",
		"2048": "VK_FORMAT_FEATURE_BLIT_DST_BIT",
		"4096": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT",
		"16384": "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT",
		"32768": "VK_FORMAT_FEATURE_TRANSFER_DST_BIT",
		"131072": "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT",
		"262144": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT",
		"524288": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT",
		"1048576": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT",
		"2097152": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT",
		"4194304": "VK_FORMAT_FEATURE_DISJOINT_BIT",
		"8388608": "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT",
		"65536": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT",
		"536870912": "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR",
		"8192": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT",
		"16777216": "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT",
		"1073741824": "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG",
		"NaN": "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT",
		"NaN": "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR",
		"NaN": "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR",
		"2147483647": "VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM",
}};
export const VkImageCreateFlagBits = {
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT: 1,
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: 2,
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: 4,
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: 8,
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: 16,
	VK_IMAGE_CREATE_ALIAS_BIT: 1024,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: 64,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: 32,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: 128,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: 256,
	VK_IMAGE_CREATE_PROTECTED_BIT: 2048,
	VK_IMAGE_CREATE_DISJOINT_BIT: 512,
	VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: 8192,
	VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: 4096,
	VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: 16384,
	VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT: 262144,
	VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: 131072,
	VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM: 32768,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: NaN,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: NaN,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: NaN,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: NaN,
	VK_IMAGE_CREATE_DISJOINT_BIT_KHR: NaN,
	VK_IMAGE_CREATE_ALIAS_BIT_KHR: NaN,
	VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_IMAGE_CREATE_SPARSE_BINDING_BIT",
		"2": "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT",
		"4": "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT",
		"8": "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT",
		"16": "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT",
		"1024": "VK_IMAGE_CREATE_ALIAS_BIT",
		"64": "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
		"32": "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT",
		"128": "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT",
		"256": "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT",
		"2048": "VK_IMAGE_CREATE_PROTECTED_BIT",
		"512": "VK_IMAGE_CREATE_DISJOINT_BIT",
		"8192": "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV",
		"4096": "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT",
		"16384": "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT",
		"262144": "VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT",
		"131072": "VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT",
		"32768": "VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM",
		"NaN": "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
		"NaN": "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR",
		"NaN": "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR",
		"NaN": "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR",
		"NaN": "VK_IMAGE_CREATE_DISJOINT_BIT_KHR",
		"NaN": "VK_IMAGE_CREATE_ALIAS_BIT_KHR",
		"2147483647": "VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkSampleCountFlagBits = {
	VK_SAMPLE_COUNT_1_BIT: 1,
	VK_SAMPLE_COUNT_2_BIT: 2,
	VK_SAMPLE_COUNT_4_BIT: 4,
	VK_SAMPLE_COUNT_8_BIT: 8,
	VK_SAMPLE_COUNT_16_BIT: 16,
	VK_SAMPLE_COUNT_32_BIT: 32,
	VK_SAMPLE_COUNT_64_BIT: 64,
	VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SAMPLE_COUNT_1_BIT",
		"2": "VK_SAMPLE_COUNT_2_BIT",
		"4": "VK_SAMPLE_COUNT_4_BIT",
		"8": "VK_SAMPLE_COUNT_8_BIT",
		"16": "VK_SAMPLE_COUNT_16_BIT",
		"32": "VK_SAMPLE_COUNT_32_BIT",
		"64": "VK_SAMPLE_COUNT_64_BIT",
		"2147483647": "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM",
}};
export const VkImageUsageFlagBits = {
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT: 1,
	VK_IMAGE_USAGE_TRANSFER_DST_BIT: 2,
	VK_IMAGE_USAGE_SAMPLED_BIT: 4,
	VK_IMAGE_USAGE_STORAGE_BIT: 8,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: 16,
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: 32,
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: 64,
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: 128,
	VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: 512,
	VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: 256,
	VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: 524288,
	VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: 262144,
	VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: 1048576,
	VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: 2097152,
	VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: NaN,
	VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_IMAGE_USAGE_TRANSFER_SRC_BIT",
		"2": "VK_IMAGE_USAGE_TRANSFER_DST_BIT",
		"4": "VK_IMAGE_USAGE_SAMPLED_BIT",
		"8": "VK_IMAGE_USAGE_STORAGE_BIT",
		"16": "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT",
		"32": "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT",
		"64": "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT",
		"128": "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT",
		"512": "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT",
		"256": "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
		"524288": "VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT",
		"262144": "VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI",
		"1048576": "VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM",
		"2097152": "VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM",
		"NaN": "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",
		"2147483647": "VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM",
}};
export const VkInstanceCreateFlagBits = {
	VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR: 1,
	VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR",
		"2147483647": "VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkMemoryHeapFlagBits = {
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: 1,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: 2,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: NaN,
	VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT",
		"2": "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT",
		"NaN": "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR",
		"2147483647": "VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM",
}};
export const VkMemoryPropertyFlagBits = {
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: 1,
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: 2,
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: 4,
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT: 8,
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: 16,
	VK_MEMORY_PROPERTY_PROTECTED_BIT: 32,
	VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: 64,
	VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: 128,
	VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV: 256,
	VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT",
		"2": "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT",
		"4": "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT",
		"8": "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",
		"16": "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT",
		"32": "VK_MEMORY_PROPERTY_PROTECTED_BIT",
		"64": "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD",
		"128": "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD",
		"256": "VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV",
		"2147483647": "VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM",
}};
export const VkQueueFlagBits = {
	VK_QUEUE_GRAPHICS_BIT: 1,
	VK_QUEUE_COMPUTE_BIT: 2,
	VK_QUEUE_TRANSFER_BIT: 4,
	VK_QUEUE_SPARSE_BINDING_BIT: 8,
	VK_QUEUE_PROTECTED_BIT: 16,
	VK_QUEUE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_QUEUE_GRAPHICS_BIT",
		"2": "VK_QUEUE_COMPUTE_BIT",
		"4": "VK_QUEUE_TRANSFER_BIT",
		"8": "VK_QUEUE_SPARSE_BINDING_BIT",
		"16": "VK_QUEUE_PROTECTED_BIT",
		"2147483647": "VK_QUEUE_FLAG_BITS_MAX_ENUM",
}};
export const VkDeviceQueueCreateFlagBits = {
	VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: 1,
	VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT",
		"2147483647": "VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineStageFlagBits = {
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: 1,
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: 2,
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: 4,
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: 8,
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: 16,
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: 32,
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: 64,
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: 128,
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: 256,
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: 512,
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: 1024,
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: 2048,
	VK_PIPELINE_STAGE_TRANSFER_BIT: 4096,
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: 8192,
	VK_PIPELINE_STAGE_HOST_BIT: 16384,
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: 32768,
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: 65536,
	VK_PIPELINE_STAGE_NONE: 0,
	VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: 16777216,
	VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: 262144,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: 33554432,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: 2097152,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: 524288,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: 1048576,
	VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: 8388608,
	VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: 4194304,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: 131072,
	VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: NaN,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: NaN,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: NaN,
	VK_PIPELINE_STAGE_NONE_KHR: NaN,
	VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
		"2": "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
		"4": "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
		"8": "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
		"16": "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
		"32": "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
		"64": "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
		"128": "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
		"256": "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
		"512": "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
		"1024": "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
		"2048": "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
		"4096": "VK_PIPELINE_STAGE_TRANSFER_BIT",
		"8192": "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
		"16384": "VK_PIPELINE_STAGE_HOST_BIT",
		"32768": "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
		"65536": "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
		"0": "VK_PIPELINE_STAGE_NONE",
		"16777216": "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT",
		"262144": "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",
		"33554432": "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",
		"2097152": "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",
		"524288": "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
		"1048576": "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",
		"8388608": "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT",
		"4194304": "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
		"131072": "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV",
		"NaN": "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
		"NaN": "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",
		"NaN": "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
		"NaN": "VK_PIPELINE_STAGE_NONE_KHR",
		"2147483647": "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM",
}};
export const VkSparseMemoryBindFlagBits = {
	VK_SPARSE_MEMORY_BIND_METADATA_BIT: 1,
	VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SPARSE_MEMORY_BIND_METADATA_BIT",
		"2147483647": "VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM",
}};
export const VkSparseImageFormatFlagBits = {
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: 1,
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: 2,
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: 4,
	VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT",
		"2": "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT",
		"4": "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT",
		"2147483647": "VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM",
}};
export const VkFenceCreateFlagBits = {
	VK_FENCE_CREATE_SIGNALED_BIT: 1,
	VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_FENCE_CREATE_SIGNALED_BIT",
		"2147483647": "VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkEventCreateFlagBits = {
	VK_EVENT_CREATE_DEVICE_ONLY_BIT: 1,
	VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: NaN,
	VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EVENT_CREATE_DEVICE_ONLY_BIT",
		"NaN": "VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR",
		"2147483647": "VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkQueryPipelineStatisticFlagBits = {
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: 1,
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: 2,
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: 4,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: 8,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: 16,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: 32,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: 64,
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: 128,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: 256,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: 512,
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: 1024,
	VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT",
		"2": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT",
		"4": "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT",
		"8": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT",
		"16": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT",
		"32": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT",
		"64": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT",
		"128": "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT",
		"256": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT",
		"512": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT",
		"1024": "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT",
		"2147483647": "VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM",
}};
export const VkQueryResultFlagBits = {
	VK_QUERY_RESULT_64_BIT: 1,
	VK_QUERY_RESULT_WAIT_BIT: 2,
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: 4,
	VK_QUERY_RESULT_PARTIAL_BIT: 8,
	VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_QUERY_RESULT_64_BIT",
		"2": "VK_QUERY_RESULT_WAIT_BIT",
		"4": "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT",
		"8": "VK_QUERY_RESULT_PARTIAL_BIT",
		"2147483647": "VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM",
}};
export const VkBufferCreateFlagBits = {
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT: 1,
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: 2,
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: 4,
	VK_BUFFER_CREATE_PROTECTED_BIT: 8,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: 16,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: NaN,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: NaN,
	VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_BUFFER_CREATE_SPARSE_BINDING_BIT",
		"2": "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT",
		"4": "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT",
		"8": "VK_BUFFER_CREATE_PROTECTED_BIT",
		"16": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
		"NaN": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT",
		"NaN": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
		"2147483647": "VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkBufferUsageFlagBits = {
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT: 1,
	VK_BUFFER_USAGE_TRANSFER_DST_BIT: 2,
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: 4,
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: 8,
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: 16,
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: 32,
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT: 64,
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: 128,
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: 256,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: 131072,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: 2048,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: 4096,
	VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: 512,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: 524288,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: 1048576,
	VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: 1024,
	VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: NaN,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: NaN,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: NaN,
	VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",
		"2": "VK_BUFFER_USAGE_TRANSFER_DST_BIT",
		"4": "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",
		"8": "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",
		"16": "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",
		"32": "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
		"64": "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
		"128": "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
		"256": "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT",
		"131072": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",
		"2048": "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT",
		"4096": "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT",
		"512": "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT",
		"524288": "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR",
		"1048576": "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR",
		"1024": "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR",
		"NaN": "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV",
		"NaN": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT",
		"NaN": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR",
		"2147483647": "VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM",
}};
export const VkImageViewCreateFlagBits = {
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: 1,
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: 2,
	VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT",
		"2": "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT",
		"2147483647": "VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineCacheCreateFlagBits = {
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: 1,
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: NaN,
	VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT",
		"NaN": "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT",
		"2147483647": "VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkColorComponentFlagBits = {
	VK_COLOR_COMPONENT_R_BIT: 1,
	VK_COLOR_COMPONENT_G_BIT: 2,
	VK_COLOR_COMPONENT_B_BIT: 4,
	VK_COLOR_COMPONENT_A_BIT: 8,
	VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_COLOR_COMPONENT_R_BIT",
		"2": "VK_COLOR_COMPONENT_G_BIT",
		"4": "VK_COLOR_COMPONENT_B_BIT",
		"8": "VK_COLOR_COMPONENT_A_BIT",
		"2147483647": "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineCreateFlagBits = {
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: 1,
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: 2,
	VK_PIPELINE_CREATE_DERIVATIVE_BIT: 4,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: 8,
	VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: 16,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: 256,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT: 512,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: 2097152,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: 4194304,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: 16384,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: 32768,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: 65536,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: 131072,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: 4096,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: 8192,
	VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: 524288,
	VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: 32,
	VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: 64,
	VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: 128,
	VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: 262144,
	VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: 2048,
	VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: 8388608,
	VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: 1024,
	VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV: 1048576,
	VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: 33554432,
	VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: 67108864,
	VK_PIPELINE_CREATE_DISPATCH_BASE: NaN,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: NaN,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: NaN,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: NaN,
	VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: NaN,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: NaN,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: NaN,
	VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT",
		"2": "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT",
		"4": "VK_PIPELINE_CREATE_DERIVATIVE_BIT",
		"8": "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT",
		"16": "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT",
		"256": "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT",
		"512": "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT",
		"2097152": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
		"4194304": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT",
		"16384": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR",
		"32768": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR",
		"65536": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR",
		"131072": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR",
		"4096": "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR",
		"8192": "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR",
		"524288": "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR",
		"32": "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV",
		"64": "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR",
		"128": "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR",
		"262144": "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV",
		"2048": "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR",
		"8388608": "VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT",
		"1024": "VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT",
		"1048576": "VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV",
		"33554432": "VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT",
		"67108864": "VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT",
		"NaN": "VK_PIPELINE_CREATE_DISPATCH_BASE",
		"NaN": "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
		"NaN": "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT",
		"NaN": "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR",
		"NaN": "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR",
		"NaN": "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT",
		"NaN": "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT",
		"2147483647": "VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineShaderStageCreateFlagBits = {
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT: 1,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT: 2,
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: NaN,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: NaN,
	VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT",
		"2": "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT",
		"NaN": "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT",
		"NaN": "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT",
		"2147483647": "VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkShaderStageFlagBits = {
	VK_SHADER_STAGE_VERTEX_BIT: 1,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: 2,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: 4,
	VK_SHADER_STAGE_GEOMETRY_BIT: 8,
	VK_SHADER_STAGE_FRAGMENT_BIT: 16,
	VK_SHADER_STAGE_COMPUTE_BIT: 32,
	VK_SHADER_STAGE_ALL_GRAPHICS: 31,
	VK_SHADER_STAGE_ALL: 2147483647,
	VK_SHADER_STAGE_RAYGEN_BIT_KHR: 256,
	VK_SHADER_STAGE_ANY_HIT_BIT_KHR: 512,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: 1024,
	VK_SHADER_STAGE_MISS_BIT_KHR: 2048,
	VK_SHADER_STAGE_INTERSECTION_BIT_KHR: 4096,
	VK_SHADER_STAGE_CALLABLE_BIT_KHR: 8192,
	VK_SHADER_STAGE_TASK_BIT_NV: 64,
	VK_SHADER_STAGE_MESH_BIT_NV: 128,
	VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: 16384,
	VK_SHADER_STAGE_RAYGEN_BIT_NV: NaN,
	VK_SHADER_STAGE_ANY_HIT_BIT_NV: NaN,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: NaN,
	VK_SHADER_STAGE_MISS_BIT_NV: NaN,
	VK_SHADER_STAGE_INTERSECTION_BIT_NV: NaN,
	VK_SHADER_STAGE_CALLABLE_BIT_NV: NaN,
	VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SHADER_STAGE_VERTEX_BIT",
		"2": "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT",
		"4": "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT",
		"8": "VK_SHADER_STAGE_GEOMETRY_BIT",
		"16": "VK_SHADER_STAGE_FRAGMENT_BIT",
		"32": "VK_SHADER_STAGE_COMPUTE_BIT",
		"31": "VK_SHADER_STAGE_ALL_GRAPHICS",
		"2147483647": "VK_SHADER_STAGE_ALL",
		"256": "VK_SHADER_STAGE_RAYGEN_BIT_KHR",
		"512": "VK_SHADER_STAGE_ANY_HIT_BIT_KHR",
		"1024": "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR",
		"2048": "VK_SHADER_STAGE_MISS_BIT_KHR",
		"4096": "VK_SHADER_STAGE_INTERSECTION_BIT_KHR",
		"8192": "VK_SHADER_STAGE_CALLABLE_BIT_KHR",
		"64": "VK_SHADER_STAGE_TASK_BIT_NV",
		"128": "VK_SHADER_STAGE_MESH_BIT_NV",
		"16384": "VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI",
		"NaN": "VK_SHADER_STAGE_RAYGEN_BIT_NV",
		"NaN": "VK_SHADER_STAGE_ANY_HIT_BIT_NV",
		"NaN": "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV",
		"NaN": "VK_SHADER_STAGE_MISS_BIT_NV",
		"NaN": "VK_SHADER_STAGE_INTERSECTION_BIT_NV",
		"NaN": "VK_SHADER_STAGE_CALLABLE_BIT_NV",
		"2147483647": "VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM",
}};
export const VkCullModeFlagBits = {
	VK_CULL_MODE_NONE: 0,
	VK_CULL_MODE_FRONT_BIT: 1,
	VK_CULL_MODE_BACK_BIT: 2,
	VK_CULL_MODE_FRONT_AND_BACK: 3,
	VK_CULL_MODE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_CULL_MODE_NONE",
		"1": "VK_CULL_MODE_FRONT_BIT",
		"2": "VK_CULL_MODE_BACK_BIT",
		"3": "VK_CULL_MODE_FRONT_AND_BACK",
		"2147483647": "VK_CULL_MODE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineDepthStencilStateCreateFlagBits = {
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: 1,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: 2,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM",
		"2": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM",
		"2147483647": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineColorBlendStateCreateFlagBits = {
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM: 1,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM",
		"2147483647": "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkPipelineLayoutCreateFlagBits = {
	VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT: 2,
	VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"2": "VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT",
		"2147483647": "VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkSamplerCreateFlagBits = {
	VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: 1,
	VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: 2,
	VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT: 4,
	VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM: 16,
	VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT",
		"2": "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT",
		"4": "VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT",
		"16": "VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM",
		"2147483647": "VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkDescriptorPoolCreateFlagBits = {
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: 1,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: 2,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: 4,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: NaN,
	VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT",
		"2": "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT",
		"4": "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE",
		"NaN": "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT",
		"2147483647": "VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkDescriptorSetLayoutCreateFlagBits = {
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: 2,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: 1,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE: 4,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: NaN,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"2": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT",
		"1": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR",
		"4": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE",
		"NaN": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT",
		"2147483647": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkAttachmentDescriptionFlagBits = {
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: 1,
	VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT",
		"2147483647": "VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM",
}};
export const VkDependencyFlagBits = {
	VK_DEPENDENCY_BY_REGION_BIT: 1,
	VK_DEPENDENCY_DEVICE_GROUP_BIT: 4,
	VK_DEPENDENCY_VIEW_LOCAL_BIT: 2,
	VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: 8,
	VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: NaN,
	VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: NaN,
	VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_DEPENDENCY_BY_REGION_BIT",
		"4": "VK_DEPENDENCY_DEVICE_GROUP_BIT",
		"2": "VK_DEPENDENCY_VIEW_LOCAL_BIT",
		"8": "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT",
		"NaN": "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",
		"NaN": "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",
		"2147483647": "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM",
}};
export const VkFramebufferCreateFlagBits = {
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: 1,
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: NaN,
	VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT",
		"NaN": "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR",
		"2147483647": "VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkRenderPassCreateFlagBits = {
	VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: 2,
	VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"2": "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM",
		"2147483647": "VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkSubpassDescriptionFlagBits = {
	VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: 1,
	VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: 2,
	VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: 4,
	VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: 8,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM: 16,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: 32,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: 64,
	VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX",
		"2": "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX",
		"4": "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM",
		"8": "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM",
		"16": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM",
		"32": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM",
		"64": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM",
		"2147483647": "VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM",
}};
export const VkCommandPoolCreateFlagBits = {
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: 1,
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: 2,
	VK_COMMAND_POOL_CREATE_PROTECTED_BIT: 4,
	VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT",
		"2": "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT",
		"4": "VK_COMMAND_POOL_CREATE_PROTECTED_BIT",
		"2147483647": "VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM",
}};
export const VkCommandPoolResetFlagBits = {
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: 1,
	VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT",
		"2147483647": "VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM",
}};
export const VkCommandBufferUsageFlagBits = {
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: 1,
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: 2,
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: 4,
	VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT",
		"2": "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT",
		"4": "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT",
		"2147483647": "VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM",
}};
export const VkQueryControlFlagBits = {
	VK_QUERY_CONTROL_PRECISE_BIT: 1,
	VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_QUERY_CONTROL_PRECISE_BIT",
		"2147483647": "VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM",
}};
export const VkCommandBufferResetFlagBits = {
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: 1,
	VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT",
		"2147483647": "VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM",
}};
export const VkStencilFaceFlagBits = {
	VK_STENCIL_FACE_FRONT_BIT: 1,
	VK_STENCIL_FACE_BACK_BIT: 2,
	VK_STENCIL_FACE_FRONT_AND_BACK: 3,
	VK_STENCIL_FRONT_AND_BACK: NaN,
	VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_STENCIL_FACE_FRONT_BIT",
		"2": "VK_STENCIL_FACE_BACK_BIT",
		"3": "VK_STENCIL_FACE_FRONT_AND_BACK",
		"NaN": "VK_STENCIL_FRONT_AND_BACK",
		"2147483647": "VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM",
}};

export function VkExtent2D_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkExtent2D_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.width, true);
	view.setUint32(4+(i*8), obj.height, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.width, true);
	view.setUint32(4, obj.height, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExtent2D_from_C(ptr){
	const obj = {
		width: read.u32(ptr, 0),
		height: read.u32(ptr, 4)
	};
	return obj;
}


export function VkExtent3D_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkExtent3D_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.width, true);
	view.setUint32(4+(i*12), obj.height, true);
	view.setUint32(8+(i*12), obj.depth, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.width, true);
	view.setUint32(4, obj.height, true);
	view.setUint32(8, obj.depth, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExtent3D_from_C(ptr){
	const obj = {
		width: read.u32(ptr, 0),
		height: read.u32(ptr, 4),
		depth: read.u32(ptr, 8)
	};
	return obj;
}


export function VkOffset2D_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkOffset2D_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setInt32(0+(i*8), obj.x, true);
	view.setInt32(4+(i*8), obj.y, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setInt32(0, obj.x, true);
	view.setInt32(4, obj.y, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkOffset2D_from_C(ptr){
	const obj = {
		x: null,
		y: null
	};
	return obj;
}


export function VkOffset3D_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkOffset3D_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setInt32(0+(i*12), obj.x, true);
	view.setInt32(4+(i*12), obj.y, true);
	view.setInt32(8+(i*12), obj.z, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setInt32(0, obj.x, true);
	view.setInt32(4, obj.y, true);
	view.setInt32(8, obj.z, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkOffset3D_from_C(ptr){
	const obj = {
		x: null,
		y: null,
		z: null
	};
	return obj;
}


export function VkRect2D_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkRect2D_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.offset){
	view.setInt32(0+(i*16), obj.offset.x, true);
	view.setInt32(4+(i*16), obj.offset.y, true);
	}
	if (obj.extent){
	view.setUint32(8+(i*16), obj.extent.width, true);
	view.setUint32(12+(i*16), obj.extent.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.offset){
	view.setInt32(0, obj.offset.x, true);
	view.setInt32(4, obj.offset.y, true);
	}
	if (obj.extent){
	view.setUint32(8, obj.extent.width, true);
	view.setUint32(12, obj.extent.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRect2D_from_C(ptr){
	const obj = {
		offset: null,
		extent: null
	};
	return obj;
}


export function VkBaseInStructure_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkBaseInStructure_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.sType, true)

	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBaseInStructure_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr)
	};
	return obj;
}


export function VkBaseOutStructure_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkBaseOutStructure_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.sType, true)

	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBaseOutStructure_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr)
	};
	return obj;
}


export function VkBufferMemoryBarrier_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkBufferMemoryBarrier_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.srcAccessMask, true);
	view.setUint32(20+(i*56), obj.dstAccessMask, true);
	view.setUint32(24+(i*56), obj.srcQueueFamilyIndex, true);
	view.setUint32(28+(i*56), obj.dstQueueFamilyIndex, true);

	view.setBigUint64(32+(i*56), BigInt(obj.buffer||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.buffer||0), true);

	view.setUint64(40+(i*56), obj.offset, true);
	view.setUint64(48+(i*56), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.srcAccessMask, true);
	view.setUint32(20, obj.dstAccessMask, true);
	view.setUint32(24, obj.srcQueueFamilyIndex, true);
	view.setUint32(28, obj.dstQueueFamilyIndex, true);

	view.setBigUint64(32, BigInt(obj.buffer||0), true);
	view.setBigUint64(32, BigInt(obj.buffer||0), true);

	view.setUint64(40, obj.offset, true);
	view.setUint64(48, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferMemoryBarrier_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcAccessMask: read.u32(ptr, 16),
		dstAccessMask: read.u32(ptr, 20),
		srcQueueFamilyIndex: read.u32(ptr, 24),
		dstQueueFamilyIndex: read.u32(ptr, 28),
		buffer: undefined,
		offset: null,
		size: null
	};
	return obj;
}


export function VkDispatchIndirectCommand_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkDispatchIndirectCommand_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.x, true);
	view.setUint32(4+(i*12), obj.y, true);
	view.setUint32(8+(i*12), obj.z, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.x, true);
	view.setUint32(4, obj.y, true);
	view.setUint32(8, obj.z, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDispatchIndirectCommand_from_C(ptr){
	const obj = {
		x: read.u32(ptr, 0),
		y: read.u32(ptr, 4),
		z: read.u32(ptr, 8)
	};
	return obj;
}


export function VkDrawIndexedIndirectCommand_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkDrawIndexedIndirectCommand_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*20), obj.indexCount, true);
	view.setUint32(4+(i*20), obj.instanceCount, true);
	view.setUint32(8+(i*20), obj.firstIndex, true);
	view.setInt32(12+(i*20), obj.vertexOffset, true);
	view.setUint32(16+(i*20), obj.firstInstance, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.indexCount, true);
	view.setUint32(4, obj.instanceCount, true);
	view.setUint32(8, obj.firstIndex, true);
	view.setInt32(12, obj.vertexOffset, true);
	view.setUint32(16, obj.firstInstance, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrawIndexedIndirectCommand_from_C(ptr){
	const obj = {
		indexCount: read.u32(ptr, 0),
		instanceCount: read.u32(ptr, 4),
		firstIndex: read.u32(ptr, 8),
		vertexOffset: null,
		firstInstance: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDrawIndirectCommand_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkDrawIndirectCommand_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.vertexCount, true);
	view.setUint32(4+(i*16), obj.instanceCount, true);
	view.setUint32(8+(i*16), obj.firstVertex, true);
	view.setUint32(12+(i*16), obj.firstInstance, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.vertexCount, true);
	view.setUint32(4, obj.instanceCount, true);
	view.setUint32(8, obj.firstVertex, true);
	view.setUint32(12, obj.firstInstance, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrawIndirectCommand_from_C(ptr){
	const obj = {
		vertexCount: read.u32(ptr, 0),
		instanceCount: read.u32(ptr, 4),
		firstVertex: read.u32(ptr, 8),
		firstInstance: read.u32(ptr, 12)
	};
	return obj;
}


export function VkImageSubresourceRange_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkImageSubresourceRange_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*20), obj.aspectMask, true);
	view.setUint32(4+(i*20), obj.baseMipLevel, true);
	view.setUint32(8+(i*20), obj.levelCount, true);
	view.setUint32(12+(i*20), obj.baseArrayLayer, true);
	view.setUint32(16+(i*20), obj.layerCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.aspectMask, true);
	view.setUint32(4, obj.baseMipLevel, true);
	view.setUint32(8, obj.levelCount, true);
	view.setUint32(12, obj.baseArrayLayer, true);
	view.setUint32(16, obj.layerCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSubresourceRange_from_C(ptr){
	const obj = {
		aspectMask: read.u32(ptr, 0),
		baseMipLevel: read.u32(ptr, 4),
		levelCount: read.u32(ptr, 8),
		baseArrayLayer: read.u32(ptr, 12),
		layerCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImageMemoryBarrier_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkImageMemoryBarrier_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.srcAccessMask, true);
	view.setUint32(20+(i*72), obj.dstAccessMask, true);
	view.setUint32(24+(i*72), obj.oldLayout, true)
	view.setUint32(28+(i*72), obj.newLayout, true)
	view.setUint32(32+(i*72), obj.srcQueueFamilyIndex, true);
	view.setUint32(36+(i*72), obj.dstQueueFamilyIndex, true);

	view.setBigUint64(40+(i*72), BigInt(obj.image||0), true);
	view.setBigUint64(40+(i*72), BigInt(obj.image||0), true);

	if (obj.subresourceRange){
	view.setUint32(48+(i*72), obj.subresourceRange.aspectMask, true);
	view.setUint32(52+(i*72), obj.subresourceRange.baseMipLevel, true);
	view.setUint32(56+(i*72), obj.subresourceRange.levelCount, true);
	view.setUint32(60+(i*72), obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(64+(i*72), obj.subresourceRange.layerCount, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.srcAccessMask, true);
	view.setUint32(20, obj.dstAccessMask, true);
	view.setUint32(24, obj.oldLayout, true)
	view.setUint32(28, obj.newLayout, true)
	view.setUint32(32, obj.srcQueueFamilyIndex, true);
	view.setUint32(36, obj.dstQueueFamilyIndex, true);

	view.setBigUint64(40, BigInt(obj.image||0), true);
	view.setBigUint64(40, BigInt(obj.image||0), true);

	if (obj.subresourceRange){
	view.setUint32(48, obj.subresourceRange.aspectMask, true);
	view.setUint32(52, obj.subresourceRange.baseMipLevel, true);
	view.setUint32(56, obj.subresourceRange.levelCount, true);
	view.setUint32(60, obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(64, obj.subresourceRange.layerCount, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageMemoryBarrier_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcAccessMask: read.u32(ptr, 16),
		dstAccessMask: read.u32(ptr, 20),
		oldLayout: read.u32(ptr, 24),
		newLayout: read.u32(ptr, 28),
		srcQueueFamilyIndex: read.u32(ptr, 32),
		dstQueueFamilyIndex: read.u32(ptr, 36),
		image: undefined,
		subresourceRange: null
	};
	return obj;
}


export function VkMemoryBarrier_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryBarrier_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.srcAccessMask, true);
	view.setUint32(20+(i*24), obj.dstAccessMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.srcAccessMask, true);
	view.setUint32(20, obj.dstAccessMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryBarrier_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcAccessMask: read.u32(ptr, 16),
		dstAccessMask: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPipelineCacheHeaderVersionOne_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkPipelineCacheHeaderVersionOne_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*20), obj.headerSize, true);
	view.setUint32(4+(i*20), obj.headerVersion, true)
	view.setUint32(8+(i*20), obj.vendorID, true);
	view.setUint32(12+(i*20), obj.deviceID, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.headerSize, true);
	view.setUint32(4, obj.headerVersion, true)
	view.setUint32(8, obj.vendorID, true);
	view.setUint32(12, obj.deviceID, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCacheHeaderVersionOne_from_C(ptr){
	const obj = {
		headerSize: read.u32(ptr, 0),
		headerVersion: read.u32(ptr, 4),
		vendorID: read.u32(ptr, 8),
		deviceID: read.u32(ptr, 12),
		pipelineCacheUUID: null
	};
	return obj;
}


export function VkAllocationCallbacks_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkAllocationCallbacks_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*48), BigInt(obj.pUserData||0), true);
	view.setBigUint64(0+(i*48), BigInt(obj.pUserData||0), true);


	view.setBigUint64(8+(i*48), BigInt(obj.pfnAllocation||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pfnAllocation||0), true);


	view.setBigUint64(16+(i*48), BigInt(obj.pfnReallocation||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.pfnReallocation||0), true);


	view.setBigUint64(24+(i*48), BigInt(obj.pfnFree||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pfnFree||0), true);


	view.setBigUint64(32+(i*48), BigInt(obj.pfnInternalAllocation||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.pfnInternalAllocation||0), true);


	view.setBigUint64(40+(i*48), BigInt(obj.pfnInternalFree||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pfnInternalFree||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.pUserData||0), true);
	view.setBigUint64(0, BigInt(obj.pUserData||0), true);


	view.setBigUint64(8, BigInt(obj.pfnAllocation||0), true);
	view.setBigUint64(8, BigInt(obj.pfnAllocation||0), true);


	view.setBigUint64(16, BigInt(obj.pfnReallocation||0), true);
	view.setBigUint64(16, BigInt(obj.pfnReallocation||0), true);


	view.setBigUint64(24, BigInt(obj.pfnFree||0), true);
	view.setBigUint64(24, BigInt(obj.pfnFree||0), true);


	view.setBigUint64(32, BigInt(obj.pfnInternalAllocation||0), true);
	view.setBigUint64(32, BigInt(obj.pfnInternalAllocation||0), true);


	view.setBigUint64(40, BigInt(obj.pfnInternalFree||0), true);
	view.setBigUint64(40, BigInt(obj.pfnInternalFree||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAllocationCallbacks_from_C(ptr){
	const obj = {
		pUserData: read.ptr(ptr),
		pfnAllocation: undefined,
		pfnReallocation: undefined,
		pfnFree: undefined,
		pfnInternalAllocation: undefined,
		pfnInternalFree: undefined
	};
	return obj;
}


export function VkApplicationInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkApplicationInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*48), BigInt(obj.pApplicationName||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.pApplicationName||0), true);

	view.setUint32(24+(i*48), obj.applicationVersion, true);

	view.setBigUint64(32+(i*48), BigInt(obj.pEngineName||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.pEngineName||0), true);

	view.setUint32(40+(i*48), obj.engineVersion, true);
	view.setUint32(44+(i*48), obj.apiVersion, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pApplicationName||0), true);
	view.setBigUint64(16, BigInt(obj.pApplicationName||0), true);

	view.setUint32(24, obj.applicationVersion, true);

	view.setBigUint64(32, BigInt(obj.pEngineName||0), true);
	view.setBigUint64(32, BigInt(obj.pEngineName||0), true);

	view.setUint32(40, obj.engineVersion, true);
	view.setUint32(44, obj.apiVersion, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkApplicationInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pApplicationName: read.ptr(ptr),
		applicationVersion: read.u32(ptr, 24),
		pEngineName: read.ptr(ptr),
		engineVersion: read.u32(ptr, 40),
		apiVersion: read.u32(ptr, 44)
	};
	return obj;
}


export function VkFormatProperties_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkFormatProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.linearTilingFeatures, true);
	view.setUint32(4+(i*12), obj.optimalTilingFeatures, true);
	view.setUint32(8+(i*12), obj.bufferFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.linearTilingFeatures, true);
	view.setUint32(4, obj.optimalTilingFeatures, true);
	view.setUint32(8, obj.bufferFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFormatProperties_from_C(ptr){
	const obj = {
		linearTilingFeatures: read.u32(ptr, 0),
		optimalTilingFeatures: read.u32(ptr, 4),
		bufferFeatures: read.u32(ptr, 8)
	};
	return obj;
}


export function VkImageFormatProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageFormatProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.maxExtent){
	view.setUint32(0+(i*32), obj.maxExtent.width, true);
	view.setUint32(4+(i*32), obj.maxExtent.height, true);
	view.setUint32(8+(i*32), obj.maxExtent.depth, true);
	}
	view.setUint32(12+(i*32), obj.maxMipLevels, true);
	view.setUint32(16+(i*32), obj.maxArrayLayers, true);
	view.setUint32(20+(i*32), obj.sampleCounts, true);
	view.setUint64(24+(i*32), obj.maxResourceSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.maxExtent){
	view.setUint32(0, obj.maxExtent.width, true);
	view.setUint32(4, obj.maxExtent.height, true);
	view.setUint32(8, obj.maxExtent.depth, true);
	}
	view.setUint32(12, obj.maxMipLevels, true);
	view.setUint32(16, obj.maxArrayLayers, true);
	view.setUint32(20, obj.sampleCounts, true);
	view.setUint64(24, obj.maxResourceSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageFormatProperties_from_C(ptr){
	const obj = {
		maxExtent: null,
		maxMipLevels: read.u32(ptr, 12),
		maxArrayLayers: read.u32(ptr, 16),
		sampleCounts: read.u32(ptr, 20),
		maxResourceSize: null
	};
	return obj;
}


export function VkInstanceCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkInstanceCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);
	if (obj.pApplicationInfo){
		const wrapped = VkApplicationInfo_to_C(obj.pApplicationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*64), BigInt(obj.pApplicationInfo||0), true);
	}
	view.setUint32(32+(i*64), obj.enabledLayerCount, true);

	view.setBigUint64(40+(i*64), BigInt(obj.ppEnabledLayerNames||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.ppEnabledLayerNames||0), true);

	view.setUint32(48+(i*64), obj.enabledExtensionCount, true);

	view.setBigUint64(56+(i*64), BigInt(obj.ppEnabledExtensionNames||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.ppEnabledExtensionNames||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	if (obj.pApplicationInfo){
		const wrapped = VkApplicationInfo_to_C(obj.pApplicationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pApplicationInfo||0), true);
	}
	view.setUint32(32, obj.enabledLayerCount, true);

	view.setBigUint64(40, BigInt(obj.ppEnabledLayerNames||0), true);
	view.setBigUint64(40, BigInt(obj.ppEnabledLayerNames||0), true);

	view.setUint32(48, obj.enabledExtensionCount, true);

	view.setBigUint64(56, BigInt(obj.ppEnabledExtensionNames||0), true);
	view.setBigUint64(56, BigInt(obj.ppEnabledExtensionNames||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkInstanceCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pApplicationInfo: VkApplicationInfo_from_C(read.ptr(ptr)),
		enabledLayerCount: read.u32(ptr, 32),
		ppEnabledLayerNames: read.ptr(ptr),
		enabledExtensionCount: read.u32(ptr, 48),
		ppEnabledExtensionNames: read.ptr(ptr)
	};
	return obj;
}


export function VkMemoryHeap_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkMemoryHeap_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*16), obj.size, true);
	view.setUint32(8+(i*16), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.size, true);
	view.setUint32(8, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryHeap_from_C(ptr){
	const obj = {
		size: null,
		flags: read.u32(ptr, 8)
	};
	return obj;
}


export function VkMemoryType_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkMemoryType_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.propertyFlags, true);
	view.setUint32(4+(i*8), obj.heapIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.propertyFlags, true);
	view.setUint32(4, obj.heapIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryType_from_C(ptr){
	const obj = {
		propertyFlags: read.u32(ptr, 0),
		heapIndex: read.u32(ptr, 4)
	};
	return obj;
}


export function VkPhysicalDeviceFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(220*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(220*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*220), obj.robustBufferAccess, true);
	view.setUint32(4+(i*220), obj.fullDrawIndexUint32, true);
	view.setUint32(8+(i*220), obj.imageCubeArray, true);
	view.setUint32(12+(i*220), obj.independentBlend, true);
	view.setUint32(16+(i*220), obj.geometryShader, true);
	view.setUint32(20+(i*220), obj.tessellationShader, true);
	view.setUint32(24+(i*220), obj.sampleRateShading, true);
	view.setUint32(28+(i*220), obj.dualSrcBlend, true);
	view.setUint32(32+(i*220), obj.logicOp, true);
	view.setUint32(36+(i*220), obj.multiDrawIndirect, true);
	view.setUint32(40+(i*220), obj.drawIndirectFirstInstance, true);
	view.setUint32(44+(i*220), obj.depthClamp, true);
	view.setUint32(48+(i*220), obj.depthBiasClamp, true);
	view.setUint32(52+(i*220), obj.fillModeNonSolid, true);
	view.setUint32(56+(i*220), obj.depthBounds, true);
	view.setUint32(60+(i*220), obj.wideLines, true);
	view.setUint32(64+(i*220), obj.largePoints, true);
	view.setUint32(68+(i*220), obj.alphaToOne, true);
	view.setUint32(72+(i*220), obj.multiViewport, true);
	view.setUint32(76+(i*220), obj.samplerAnisotropy, true);
	view.setUint32(80+(i*220), obj.textureCompressionETC2, true);
	view.setUint32(84+(i*220), obj.textureCompressionASTC_LDR, true);
	view.setUint32(88+(i*220), obj.textureCompressionBC, true);
	view.setUint32(92+(i*220), obj.occlusionQueryPrecise, true);
	view.setUint32(96+(i*220), obj.pipelineStatisticsQuery, true);
	view.setUint32(100+(i*220), obj.vertexPipelineStoresAndAtomics, true);
	view.setUint32(104+(i*220), obj.fragmentStoresAndAtomics, true);
	view.setUint32(108+(i*220), obj.shaderTessellationAndGeometryPointSize, true);
	view.setUint32(112+(i*220), obj.shaderImageGatherExtended, true);
	view.setUint32(116+(i*220), obj.shaderStorageImageExtendedFormats, true);
	view.setUint32(120+(i*220), obj.shaderStorageImageMultisample, true);
	view.setUint32(124+(i*220), obj.shaderStorageImageReadWithoutFormat, true);
	view.setUint32(128+(i*220), obj.shaderStorageImageWriteWithoutFormat, true);
	view.setUint32(132+(i*220), obj.shaderUniformBufferArrayDynamicIndexing, true);
	view.setUint32(136+(i*220), obj.shaderSampledImageArrayDynamicIndexing, true);
	view.setUint32(140+(i*220), obj.shaderStorageBufferArrayDynamicIndexing, true);
	view.setUint32(144+(i*220), obj.shaderStorageImageArrayDynamicIndexing, true);
	view.setUint32(148+(i*220), obj.shaderClipDistance, true);
	view.setUint32(152+(i*220), obj.shaderCullDistance, true);
	view.setUint32(156+(i*220), obj.shaderFloat64, true);
	view.setUint32(160+(i*220), obj.shaderInt64, true);
	view.setUint32(164+(i*220), obj.shaderInt16, true);
	view.setUint32(168+(i*220), obj.shaderResourceResidency, true);
	view.setUint32(172+(i*220), obj.shaderResourceMinLod, true);
	view.setUint32(176+(i*220), obj.sparseBinding, true);
	view.setUint32(180+(i*220), obj.sparseResidencyBuffer, true);
	view.setUint32(184+(i*220), obj.sparseResidencyImage2D, true);
	view.setUint32(188+(i*220), obj.sparseResidencyImage3D, true);
	view.setUint32(192+(i*220), obj.sparseResidency2Samples, true);
	view.setUint32(196+(i*220), obj.sparseResidency4Samples, true);
	view.setUint32(200+(i*220), obj.sparseResidency8Samples, true);
	view.setUint32(204+(i*220), obj.sparseResidency16Samples, true);
	view.setUint32(208+(i*220), obj.sparseResidencyAliased, true);
	view.setUint32(212+(i*220), obj.variableMultisampleRate, true);
	view.setUint32(216+(i*220), obj.inheritedQueries, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(220);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.robustBufferAccess, true);
	view.setUint32(4, obj.fullDrawIndexUint32, true);
	view.setUint32(8, obj.imageCubeArray, true);
	view.setUint32(12, obj.independentBlend, true);
	view.setUint32(16, obj.geometryShader, true);
	view.setUint32(20, obj.tessellationShader, true);
	view.setUint32(24, obj.sampleRateShading, true);
	view.setUint32(28, obj.dualSrcBlend, true);
	view.setUint32(32, obj.logicOp, true);
	view.setUint32(36, obj.multiDrawIndirect, true);
	view.setUint32(40, obj.drawIndirectFirstInstance, true);
	view.setUint32(44, obj.depthClamp, true);
	view.setUint32(48, obj.depthBiasClamp, true);
	view.setUint32(52, obj.fillModeNonSolid, true);
	view.setUint32(56, obj.depthBounds, true);
	view.setUint32(60, obj.wideLines, true);
	view.setUint32(64, obj.largePoints, true);
	view.setUint32(68, obj.alphaToOne, true);
	view.setUint32(72, obj.multiViewport, true);
	view.setUint32(76, obj.samplerAnisotropy, true);
	view.setUint32(80, obj.textureCompressionETC2, true);
	view.setUint32(84, obj.textureCompressionASTC_LDR, true);
	view.setUint32(88, obj.textureCompressionBC, true);
	view.setUint32(92, obj.occlusionQueryPrecise, true);
	view.setUint32(96, obj.pipelineStatisticsQuery, true);
	view.setUint32(100, obj.vertexPipelineStoresAndAtomics, true);
	view.setUint32(104, obj.fragmentStoresAndAtomics, true);
	view.setUint32(108, obj.shaderTessellationAndGeometryPointSize, true);
	view.setUint32(112, obj.shaderImageGatherExtended, true);
	view.setUint32(116, obj.shaderStorageImageExtendedFormats, true);
	view.setUint32(120, obj.shaderStorageImageMultisample, true);
	view.setUint32(124, obj.shaderStorageImageReadWithoutFormat, true);
	view.setUint32(128, obj.shaderStorageImageWriteWithoutFormat, true);
	view.setUint32(132, obj.shaderUniformBufferArrayDynamicIndexing, true);
	view.setUint32(136, obj.shaderSampledImageArrayDynamicIndexing, true);
	view.setUint32(140, obj.shaderStorageBufferArrayDynamicIndexing, true);
	view.setUint32(144, obj.shaderStorageImageArrayDynamicIndexing, true);
	view.setUint32(148, obj.shaderClipDistance, true);
	view.setUint32(152, obj.shaderCullDistance, true);
	view.setUint32(156, obj.shaderFloat64, true);
	view.setUint32(160, obj.shaderInt64, true);
	view.setUint32(164, obj.shaderInt16, true);
	view.setUint32(168, obj.shaderResourceResidency, true);
	view.setUint32(172, obj.shaderResourceMinLod, true);
	view.setUint32(176, obj.sparseBinding, true);
	view.setUint32(180, obj.sparseResidencyBuffer, true);
	view.setUint32(184, obj.sparseResidencyImage2D, true);
	view.setUint32(188, obj.sparseResidencyImage3D, true);
	view.setUint32(192, obj.sparseResidency2Samples, true);
	view.setUint32(196, obj.sparseResidency4Samples, true);
	view.setUint32(200, obj.sparseResidency8Samples, true);
	view.setUint32(204, obj.sparseResidency16Samples, true);
	view.setUint32(208, obj.sparseResidencyAliased, true);
	view.setUint32(212, obj.variableMultisampleRate, true);
	view.setUint32(216, obj.inheritedQueries, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFeatures_from_C(ptr){
	const obj = {
		robustBufferAccess: read.u32(ptr, 0),
		fullDrawIndexUint32: read.u32(ptr, 4),
		imageCubeArray: read.u32(ptr, 8),
		independentBlend: read.u32(ptr, 12),
		geometryShader: read.u32(ptr, 16),
		tessellationShader: read.u32(ptr, 20),
		sampleRateShading: read.u32(ptr, 24),
		dualSrcBlend: read.u32(ptr, 28),
		logicOp: read.u32(ptr, 32),
		multiDrawIndirect: read.u32(ptr, 36),
		drawIndirectFirstInstance: read.u32(ptr, 40),
		depthClamp: read.u32(ptr, 44),
		depthBiasClamp: read.u32(ptr, 48),
		fillModeNonSolid: read.u32(ptr, 52),
		depthBounds: read.u32(ptr, 56),
		wideLines: read.u32(ptr, 60),
		largePoints: read.u32(ptr, 64),
		alphaToOne: read.u32(ptr, 68),
		multiViewport: read.u32(ptr, 72),
		samplerAnisotropy: read.u32(ptr, 76),
		textureCompressionETC2: read.u32(ptr, 80),
		textureCompressionASTC_LDR: read.u32(ptr, 84),
		textureCompressionBC: read.u32(ptr, 88),
		occlusionQueryPrecise: read.u32(ptr, 92),
		pipelineStatisticsQuery: read.u32(ptr, 96),
		vertexPipelineStoresAndAtomics: read.u32(ptr, 100),
		fragmentStoresAndAtomics: read.u32(ptr, 104),
		shaderTessellationAndGeometryPointSize: read.u32(ptr, 108),
		shaderImageGatherExtended: read.u32(ptr, 112),
		shaderStorageImageExtendedFormats: read.u32(ptr, 116),
		shaderStorageImageMultisample: read.u32(ptr, 120),
		shaderStorageImageReadWithoutFormat: read.u32(ptr, 124),
		shaderStorageImageWriteWithoutFormat: read.u32(ptr, 128),
		shaderUniformBufferArrayDynamicIndexing: read.u32(ptr, 132),
		shaderSampledImageArrayDynamicIndexing: read.u32(ptr, 136),
		shaderStorageBufferArrayDynamicIndexing: read.u32(ptr, 140),
		shaderStorageImageArrayDynamicIndexing: read.u32(ptr, 144),
		shaderClipDistance: read.u32(ptr, 148),
		shaderCullDistance: read.u32(ptr, 152),
		shaderFloat64: read.u32(ptr, 156),
		shaderInt64: read.u32(ptr, 160),
		shaderInt16: read.u32(ptr, 164),
		shaderResourceResidency: read.u32(ptr, 168),
		shaderResourceMinLod: read.u32(ptr, 172),
		sparseBinding: read.u32(ptr, 176),
		sparseResidencyBuffer: read.u32(ptr, 180),
		sparseResidencyImage2D: read.u32(ptr, 184),
		sparseResidencyImage3D: read.u32(ptr, 188),
		sparseResidency2Samples: read.u32(ptr, 192),
		sparseResidency4Samples: read.u32(ptr, 196),
		sparseResidency8Samples: read.u32(ptr, 200),
		sparseResidency16Samples: read.u32(ptr, 204),
		sparseResidencyAliased: read.u32(ptr, 208),
		variableMultisampleRate: read.u32(ptr, 212),
		inheritedQueries: read.u32(ptr, 216)
	};
	return obj;
}


export function VkPhysicalDeviceLimits_alloc_array(size){
	const buffer = new ArrayBuffer(472*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceLimits_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(472*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*472), obj.maxImageDimension1D, true);
	view.setUint32(4+(i*472), obj.maxImageDimension2D, true);
	view.setUint32(8+(i*472), obj.maxImageDimension3D, true);
	view.setUint32(12+(i*472), obj.maxImageDimensionCube, true);
	view.setUint32(16+(i*472), obj.maxImageArrayLayers, true);
	view.setUint32(20+(i*472), obj.maxTexelBufferElements, true);
	view.setUint32(24+(i*472), obj.maxUniformBufferRange, true);
	view.setUint32(28+(i*472), obj.maxStorageBufferRange, true);
	view.setUint32(32+(i*472), obj.maxPushConstantsSize, true);
	view.setUint32(36+(i*472), obj.maxMemoryAllocationCount, true);
	view.setUint32(40+(i*472), obj.maxSamplerAllocationCount, true);
	view.setUint64(48+(i*472), obj.bufferImageGranularity, true);
	view.setUint64(56+(i*472), obj.sparseAddressSpaceSize, true);
	view.setUint32(64+(i*472), obj.maxBoundDescriptorSets, true);
	view.setUint32(68+(i*472), obj.maxPerStageDescriptorSamplers, true);
	view.setUint32(72+(i*472), obj.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(76+(i*472), obj.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(80+(i*472), obj.maxPerStageDescriptorSampledImages, true);
	view.setUint32(84+(i*472), obj.maxPerStageDescriptorStorageImages, true);
	view.setUint32(88+(i*472), obj.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(92+(i*472), obj.maxPerStageResources, true);
	view.setUint32(96+(i*472), obj.maxDescriptorSetSamplers, true);
	view.setUint32(100+(i*472), obj.maxDescriptorSetUniformBuffers, true);
	view.setUint32(104+(i*472), obj.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(108+(i*472), obj.maxDescriptorSetStorageBuffers, true);
	view.setUint32(112+(i*472), obj.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(116+(i*472), obj.maxDescriptorSetSampledImages, true);
	view.setUint32(120+(i*472), obj.maxDescriptorSetStorageImages, true);
	view.setUint32(124+(i*472), obj.maxDescriptorSetInputAttachments, true);
	view.setUint32(128+(i*472), obj.maxVertexInputAttributes, true);
	view.setUint32(132+(i*472), obj.maxVertexInputBindings, true);
	view.setUint32(136+(i*472), obj.maxVertexInputAttributeOffset, true);
	view.setUint32(140+(i*472), obj.maxVertexInputBindingStride, true);
	view.setUint32(144+(i*472), obj.maxVertexOutputComponents, true);
	view.setUint32(148+(i*472), obj.maxTessellationGenerationLevel, true);
	view.setUint32(152+(i*472), obj.maxTessellationPatchSize, true);
	view.setUint32(156+(i*472), obj.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(160+(i*472), obj.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(164+(i*472), obj.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(168+(i*472), obj.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(172+(i*472), obj.maxTessellationEvaluationInputComponents, true);
	view.setUint32(176+(i*472), obj.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(180+(i*472), obj.maxGeometryShaderInvocations, true);
	view.setUint32(184+(i*472), obj.maxGeometryInputComponents, true);
	view.setUint32(188+(i*472), obj.maxGeometryOutputComponents, true);
	view.setUint32(192+(i*472), obj.maxGeometryOutputVertices, true);
	view.setUint32(196+(i*472), obj.maxGeometryTotalOutputComponents, true);
	view.setUint32(200+(i*472), obj.maxFragmentInputComponents, true);
	view.setUint32(204+(i*472), obj.maxFragmentOutputAttachments, true);
	view.setUint32(208+(i*472), obj.maxFragmentDualSrcAttachments, true);
	view.setUint32(212+(i*472), obj.maxFragmentCombinedOutputResources, true);
	view.setUint32(216+(i*472), obj.maxComputeSharedMemorySize, true);

	view.setUint32(224+(i*472), obj.maxComputeWorkGroupInvocations, true);

	view.setUint32(232+(i*472), obj.subPixelPrecisionBits, true);
	view.setUint32(236+(i*472), obj.subTexelPrecisionBits, true);
	view.setUint32(240+(i*472), obj.mipmapPrecisionBits, true);
	view.setUint32(244+(i*472), obj.maxDrawIndexedIndexValue, true);
	view.setUint32(248+(i*472), obj.maxDrawIndirectCount, true);
	view.setFloat32(252+(i*472), obj.maxSamplerLodBias, true);
	view.setFloat32(256+(i*472), obj.maxSamplerAnisotropy, true);
	view.setUint32(260+(i*472), obj.maxViewports, true);


	view.setUint32(272+(i*472), obj.viewportSubPixelBits, true);

	view.setBigUint64(280+(i*472), BigInt(obj.minMemoryMapAlignment||0), true);
	view.setBigUint64(280+(i*472), BigInt(obj.minMemoryMapAlignment||0), true);

	view.setUint64(288+(i*472), obj.minTexelBufferOffsetAlignment, true);
	view.setUint64(296+(i*472), obj.minUniformBufferOffsetAlignment, true);
	view.setUint64(304+(i*472), obj.minStorageBufferOffsetAlignment, true);
	view.setInt32(312+(i*472), obj.minTexelOffset, true);
	view.setUint32(316+(i*472), obj.maxTexelOffset, true);
	view.setInt32(320+(i*472), obj.minTexelGatherOffset, true);
	view.setUint32(324+(i*472), obj.maxTexelGatherOffset, true);
	view.setFloat32(328+(i*472), obj.minInterpolationOffset, true);
	view.setFloat32(332+(i*472), obj.maxInterpolationOffset, true);
	view.setUint32(336+(i*472), obj.subPixelInterpolationOffsetBits, true);
	view.setUint32(340+(i*472), obj.maxFramebufferWidth, true);
	view.setUint32(344+(i*472), obj.maxFramebufferHeight, true);
	view.setUint32(348+(i*472), obj.maxFramebufferLayers, true);
	view.setUint32(352+(i*472), obj.framebufferColorSampleCounts, true);
	view.setUint32(356+(i*472), obj.framebufferDepthSampleCounts, true);
	view.setUint32(360+(i*472), obj.framebufferStencilSampleCounts, true);
	view.setUint32(364+(i*472), obj.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(368+(i*472), obj.maxColorAttachments, true);
	view.setUint32(372+(i*472), obj.sampledImageColorSampleCounts, true);
	view.setUint32(376+(i*472), obj.sampledImageIntegerSampleCounts, true);
	view.setUint32(380+(i*472), obj.sampledImageDepthSampleCounts, true);
	view.setUint32(384+(i*472), obj.sampledImageStencilSampleCounts, true);
	view.setUint32(388+(i*472), obj.storageImageSampleCounts, true);
	view.setUint32(392+(i*472), obj.maxSampleMaskWords, true);
	view.setUint32(396+(i*472), obj.timestampComputeAndGraphics, true);
	view.setFloat32(400+(i*472), obj.timestampPeriod, true);
	view.setUint32(404+(i*472), obj.maxClipDistances, true);
	view.setUint32(408+(i*472), obj.maxCullDistances, true);
	view.setUint32(412+(i*472), obj.maxCombinedClipAndCullDistances, true);
	view.setUint32(416+(i*472), obj.discreteQueuePriorities, true);


	view.setFloat32(428+(i*472), obj.pointSizeGranularity, true);
	view.setFloat32(432+(i*472), obj.lineWidthGranularity, true);
	view.setUint32(436+(i*472), obj.strictLines, true);
	view.setUint32(440+(i*472), obj.standardSampleLocations, true);
	view.setUint64(448+(i*472), obj.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(456+(i*472), obj.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(464+(i*472), obj.nonCoherentAtomSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(472);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.maxImageDimension1D, true);
	view.setUint32(4, obj.maxImageDimension2D, true);
	view.setUint32(8, obj.maxImageDimension3D, true);
	view.setUint32(12, obj.maxImageDimensionCube, true);
	view.setUint32(16, obj.maxImageArrayLayers, true);
	view.setUint32(20, obj.maxTexelBufferElements, true);
	view.setUint32(24, obj.maxUniformBufferRange, true);
	view.setUint32(28, obj.maxStorageBufferRange, true);
	view.setUint32(32, obj.maxPushConstantsSize, true);
	view.setUint32(36, obj.maxMemoryAllocationCount, true);
	view.setUint32(40, obj.maxSamplerAllocationCount, true);
	view.setUint64(48, obj.bufferImageGranularity, true);
	view.setUint64(56, obj.sparseAddressSpaceSize, true);
	view.setUint32(64, obj.maxBoundDescriptorSets, true);
	view.setUint32(68, obj.maxPerStageDescriptorSamplers, true);
	view.setUint32(72, obj.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(76, obj.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(80, obj.maxPerStageDescriptorSampledImages, true);
	view.setUint32(84, obj.maxPerStageDescriptorStorageImages, true);
	view.setUint32(88, obj.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(92, obj.maxPerStageResources, true);
	view.setUint32(96, obj.maxDescriptorSetSamplers, true);
	view.setUint32(100, obj.maxDescriptorSetUniformBuffers, true);
	view.setUint32(104, obj.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(108, obj.maxDescriptorSetStorageBuffers, true);
	view.setUint32(112, obj.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(116, obj.maxDescriptorSetSampledImages, true);
	view.setUint32(120, obj.maxDescriptorSetStorageImages, true);
	view.setUint32(124, obj.maxDescriptorSetInputAttachments, true);
	view.setUint32(128, obj.maxVertexInputAttributes, true);
	view.setUint32(132, obj.maxVertexInputBindings, true);
	view.setUint32(136, obj.maxVertexInputAttributeOffset, true);
	view.setUint32(140, obj.maxVertexInputBindingStride, true);
	view.setUint32(144, obj.maxVertexOutputComponents, true);
	view.setUint32(148, obj.maxTessellationGenerationLevel, true);
	view.setUint32(152, obj.maxTessellationPatchSize, true);
	view.setUint32(156, obj.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(160, obj.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(164, obj.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(168, obj.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(172, obj.maxTessellationEvaluationInputComponents, true);
	view.setUint32(176, obj.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(180, obj.maxGeometryShaderInvocations, true);
	view.setUint32(184, obj.maxGeometryInputComponents, true);
	view.setUint32(188, obj.maxGeometryOutputComponents, true);
	view.setUint32(192, obj.maxGeometryOutputVertices, true);
	view.setUint32(196, obj.maxGeometryTotalOutputComponents, true);
	view.setUint32(200, obj.maxFragmentInputComponents, true);
	view.setUint32(204, obj.maxFragmentOutputAttachments, true);
	view.setUint32(208, obj.maxFragmentDualSrcAttachments, true);
	view.setUint32(212, obj.maxFragmentCombinedOutputResources, true);
	view.setUint32(216, obj.maxComputeSharedMemorySize, true);

	view.setUint32(224, obj.maxComputeWorkGroupInvocations, true);

	view.setUint32(232, obj.subPixelPrecisionBits, true);
	view.setUint32(236, obj.subTexelPrecisionBits, true);
	view.setUint32(240, obj.mipmapPrecisionBits, true);
	view.setUint32(244, obj.maxDrawIndexedIndexValue, true);
	view.setUint32(248, obj.maxDrawIndirectCount, true);
	view.setFloat32(252, obj.maxSamplerLodBias, true);
	view.setFloat32(256, obj.maxSamplerAnisotropy, true);
	view.setUint32(260, obj.maxViewports, true);


	view.setUint32(272, obj.viewportSubPixelBits, true);

	view.setBigUint64(280, BigInt(obj.minMemoryMapAlignment||0), true);
	view.setBigUint64(280, BigInt(obj.minMemoryMapAlignment||0), true);

	view.setUint64(288, obj.minTexelBufferOffsetAlignment, true);
	view.setUint64(296, obj.minUniformBufferOffsetAlignment, true);
	view.setUint64(304, obj.minStorageBufferOffsetAlignment, true);
	view.setInt32(312, obj.minTexelOffset, true);
	view.setUint32(316, obj.maxTexelOffset, true);
	view.setInt32(320, obj.minTexelGatherOffset, true);
	view.setUint32(324, obj.maxTexelGatherOffset, true);
	view.setFloat32(328, obj.minInterpolationOffset, true);
	view.setFloat32(332, obj.maxInterpolationOffset, true);
	view.setUint32(336, obj.subPixelInterpolationOffsetBits, true);
	view.setUint32(340, obj.maxFramebufferWidth, true);
	view.setUint32(344, obj.maxFramebufferHeight, true);
	view.setUint32(348, obj.maxFramebufferLayers, true);
	view.setUint32(352, obj.framebufferColorSampleCounts, true);
	view.setUint32(356, obj.framebufferDepthSampleCounts, true);
	view.setUint32(360, obj.framebufferStencilSampleCounts, true);
	view.setUint32(364, obj.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(368, obj.maxColorAttachments, true);
	view.setUint32(372, obj.sampledImageColorSampleCounts, true);
	view.setUint32(376, obj.sampledImageIntegerSampleCounts, true);
	view.setUint32(380, obj.sampledImageDepthSampleCounts, true);
	view.setUint32(384, obj.sampledImageStencilSampleCounts, true);
	view.setUint32(388, obj.storageImageSampleCounts, true);
	view.setUint32(392, obj.maxSampleMaskWords, true);
	view.setUint32(396, obj.timestampComputeAndGraphics, true);
	view.setFloat32(400, obj.timestampPeriod, true);
	view.setUint32(404, obj.maxClipDistances, true);
	view.setUint32(408, obj.maxCullDistances, true);
	view.setUint32(412, obj.maxCombinedClipAndCullDistances, true);
	view.setUint32(416, obj.discreteQueuePriorities, true);


	view.setFloat32(428, obj.pointSizeGranularity, true);
	view.setFloat32(432, obj.lineWidthGranularity, true);
	view.setUint32(436, obj.strictLines, true);
	view.setUint32(440, obj.standardSampleLocations, true);
	view.setUint64(448, obj.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(456, obj.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(464, obj.nonCoherentAtomSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceLimits_from_C(ptr){
	const obj = {
		maxImageDimension1D: read.u32(ptr, 0),
		maxImageDimension2D: read.u32(ptr, 4),
		maxImageDimension3D: read.u32(ptr, 8),
		maxImageDimensionCube: read.u32(ptr, 12),
		maxImageArrayLayers: read.u32(ptr, 16),
		maxTexelBufferElements: read.u32(ptr, 20),
		maxUniformBufferRange: read.u32(ptr, 24),
		maxStorageBufferRange: read.u32(ptr, 28),
		maxPushConstantsSize: read.u32(ptr, 32),
		maxMemoryAllocationCount: read.u32(ptr, 36),
		maxSamplerAllocationCount: read.u32(ptr, 40),
		bufferImageGranularity: null,
		sparseAddressSpaceSize: null,
		maxBoundDescriptorSets: read.u32(ptr, 64),
		maxPerStageDescriptorSamplers: read.u32(ptr, 68),
		maxPerStageDescriptorUniformBuffers: read.u32(ptr, 72),
		maxPerStageDescriptorStorageBuffers: read.u32(ptr, 76),
		maxPerStageDescriptorSampledImages: read.u32(ptr, 80),
		maxPerStageDescriptorStorageImages: read.u32(ptr, 84),
		maxPerStageDescriptorInputAttachments: read.u32(ptr, 88),
		maxPerStageResources: read.u32(ptr, 92),
		maxDescriptorSetSamplers: read.u32(ptr, 96),
		maxDescriptorSetUniformBuffers: read.u32(ptr, 100),
		maxDescriptorSetUniformBuffersDynamic: read.u32(ptr, 104),
		maxDescriptorSetStorageBuffers: read.u32(ptr, 108),
		maxDescriptorSetStorageBuffersDynamic: read.u32(ptr, 112),
		maxDescriptorSetSampledImages: read.u32(ptr, 116),
		maxDescriptorSetStorageImages: read.u32(ptr, 120),
		maxDescriptorSetInputAttachments: read.u32(ptr, 124),
		maxVertexInputAttributes: read.u32(ptr, 128),
		maxVertexInputBindings: read.u32(ptr, 132),
		maxVertexInputAttributeOffset: read.u32(ptr, 136),
		maxVertexInputBindingStride: read.u32(ptr, 140),
		maxVertexOutputComponents: read.u32(ptr, 144),
		maxTessellationGenerationLevel: read.u32(ptr, 148),
		maxTessellationPatchSize: read.u32(ptr, 152),
		maxTessellationControlPerVertexInputComponents: read.u32(ptr, 156),
		maxTessellationControlPerVertexOutputComponents: read.u32(ptr, 160),
		maxTessellationControlPerPatchOutputComponents: read.u32(ptr, 164),
		maxTessellationControlTotalOutputComponents: read.u32(ptr, 168),
		maxTessellationEvaluationInputComponents: read.u32(ptr, 172),
		maxTessellationEvaluationOutputComponents: read.u32(ptr, 176),
		maxGeometryShaderInvocations: read.u32(ptr, 180),
		maxGeometryInputComponents: read.u32(ptr, 184),
		maxGeometryOutputComponents: read.u32(ptr, 188),
		maxGeometryOutputVertices: read.u32(ptr, 192),
		maxGeometryTotalOutputComponents: read.u32(ptr, 196),
		maxFragmentInputComponents: read.u32(ptr, 200),
		maxFragmentOutputAttachments: read.u32(ptr, 204),
		maxFragmentDualSrcAttachments: read.u32(ptr, 208),
		maxFragmentCombinedOutputResources: read.u32(ptr, 212),
		maxComputeSharedMemorySize: read.u32(ptr, 216),
		maxComputeWorkGroupCount: null,
		maxComputeWorkGroupInvocations: read.u32(ptr, 224),
		maxComputeWorkGroupSize: null,
		subPixelPrecisionBits: read.u32(ptr, 232),
		subTexelPrecisionBits: read.u32(ptr, 236),
		mipmapPrecisionBits: read.u32(ptr, 240),
		maxDrawIndexedIndexValue: read.u32(ptr, 244),
		maxDrawIndirectCount: read.u32(ptr, 248),
		maxSamplerLodBias: null,
		maxSamplerAnisotropy: null,
		maxViewports: read.u32(ptr, 260),
		maxViewportDimensions: null,
		viewportBoundsRange: null,
		viewportSubPixelBits: read.u32(ptr, 272),
		minMemoryMapAlignment: undefined,
		minTexelBufferOffsetAlignment: null,
		minUniformBufferOffsetAlignment: null,
		minStorageBufferOffsetAlignment: null,
		minTexelOffset: null,
		maxTexelOffset: read.u32(ptr, 316),
		minTexelGatherOffset: null,
		maxTexelGatherOffset: read.u32(ptr, 324),
		minInterpolationOffset: null,
		maxInterpolationOffset: null,
		subPixelInterpolationOffsetBits: read.u32(ptr, 336),
		maxFramebufferWidth: read.u32(ptr, 340),
		maxFramebufferHeight: read.u32(ptr, 344),
		maxFramebufferLayers: read.u32(ptr, 348),
		framebufferColorSampleCounts: read.u32(ptr, 352),
		framebufferDepthSampleCounts: read.u32(ptr, 356),
		framebufferStencilSampleCounts: read.u32(ptr, 360),
		framebufferNoAttachmentsSampleCounts: read.u32(ptr, 364),
		maxColorAttachments: read.u32(ptr, 368),
		sampledImageColorSampleCounts: read.u32(ptr, 372),
		sampledImageIntegerSampleCounts: read.u32(ptr, 376),
		sampledImageDepthSampleCounts: read.u32(ptr, 380),
		sampledImageStencilSampleCounts: read.u32(ptr, 384),
		storageImageSampleCounts: read.u32(ptr, 388),
		maxSampleMaskWords: read.u32(ptr, 392),
		timestampComputeAndGraphics: read.u32(ptr, 396),
		timestampPeriod: null,
		maxClipDistances: read.u32(ptr, 404),
		maxCullDistances: read.u32(ptr, 408),
		maxCombinedClipAndCullDistances: read.u32(ptr, 412),
		discreteQueuePriorities: read.u32(ptr, 416),
		pointSizeRange: null,
		lineWidthRange: null,
		pointSizeGranularity: null,
		lineWidthGranularity: null,
		strictLines: read.u32(ptr, 436),
		standardSampleLocations: read.u32(ptr, 440),
		optimalBufferCopyOffsetAlignment: null,
		optimalBufferCopyRowPitchAlignment: null,
		nonCoherentAtomSize: null
	};
	return obj;
}


export function VkPhysicalDeviceMemoryProperties_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMemoryProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.memoryTypeCount, true);

	view.setUint32(16+(i*48), obj.memoryHeapCount, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.memoryTypeCount, true);

	view.setUint32(16, obj.memoryHeapCount, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMemoryProperties_from_C(ptr){
	const obj = {
		memoryTypeCount: read.u32(ptr, 0),
		memoryTypes: null,
		memoryHeapCount: read.u32(ptr, 16),
		memoryHeaps: null
	};
	return obj;
}


export function VkPhysicalDeviceSparseProperties_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSparseProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*20), obj.residencyStandard2DBlockShape, true);
	view.setUint32(4+(i*20), obj.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(8+(i*20), obj.residencyStandard3DBlockShape, true);
	view.setUint32(12+(i*20), obj.residencyAlignedMipSize, true);
	view.setUint32(16+(i*20), obj.residencyNonResidentStrict, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.residencyStandard2DBlockShape, true);
	view.setUint32(4, obj.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(8, obj.residencyStandard3DBlockShape, true);
	view.setUint32(12, obj.residencyAlignedMipSize, true);
	view.setUint32(16, obj.residencyNonResidentStrict, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSparseProperties_from_C(ptr){
	const obj = {
		residencyStandard2DBlockShape: read.u32(ptr, 0),
		residencyStandard2DMultisampleBlockShape: read.u32(ptr, 4),
		residencyStandard3DBlockShape: read.u32(ptr, 8),
		residencyAlignedMipSize: read.u32(ptr, 12),
		residencyNonResidentStrict: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceProperties_alloc_array(size){
	const buffer = new ArrayBuffer(536*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(536*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*536), obj.apiVersion, true);
	view.setUint32(4+(i*536), obj.driverVersion, true);
	view.setUint32(8+(i*536), obj.vendorID, true);
	view.setUint32(12+(i*536), obj.deviceID, true);
	view.setUint32(16+(i*536), obj.deviceType, true)


	if (obj.limits){
	view.setUint32(40+(i*536), obj.limits.maxImageDimension1D, true);
	view.setUint32(44+(i*536), obj.limits.maxImageDimension2D, true);
	view.setUint32(48+(i*536), obj.limits.maxImageDimension3D, true);
	view.setUint32(52+(i*536), obj.limits.maxImageDimensionCube, true);
	view.setUint32(56+(i*536), obj.limits.maxImageArrayLayers, true);
	view.setUint32(60+(i*536), obj.limits.maxTexelBufferElements, true);
	view.setUint32(64+(i*536), obj.limits.maxUniformBufferRange, true);
	view.setUint32(68+(i*536), obj.limits.maxStorageBufferRange, true);
	view.setUint32(72+(i*536), obj.limits.maxPushConstantsSize, true);
	view.setUint32(76+(i*536), obj.limits.maxMemoryAllocationCount, true);
	view.setUint32(80+(i*536), obj.limits.maxSamplerAllocationCount, true);
	view.setUint64(88+(i*536), obj.limits.bufferImageGranularity, true);
	view.setUint64(96+(i*536), obj.limits.sparseAddressSpaceSize, true);
	view.setUint32(104+(i*536), obj.limits.maxBoundDescriptorSets, true);
	view.setUint32(108+(i*536), obj.limits.maxPerStageDescriptorSamplers, true);
	view.setUint32(112+(i*536), obj.limits.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(116+(i*536), obj.limits.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(120+(i*536), obj.limits.maxPerStageDescriptorSampledImages, true);
	view.setUint32(124+(i*536), obj.limits.maxPerStageDescriptorStorageImages, true);
	view.setUint32(128+(i*536), obj.limits.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(132+(i*536), obj.limits.maxPerStageResources, true);
	view.setUint32(136+(i*536), obj.limits.maxDescriptorSetSamplers, true);
	view.setUint32(140+(i*536), obj.limits.maxDescriptorSetUniformBuffers, true);
	view.setUint32(144+(i*536), obj.limits.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(148+(i*536), obj.limits.maxDescriptorSetStorageBuffers, true);
	view.setUint32(152+(i*536), obj.limits.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(156+(i*536), obj.limits.maxDescriptorSetSampledImages, true);
	view.setUint32(160+(i*536), obj.limits.maxDescriptorSetStorageImages, true);
	view.setUint32(164+(i*536), obj.limits.maxDescriptorSetInputAttachments, true);
	view.setUint32(168+(i*536), obj.limits.maxVertexInputAttributes, true);
	view.setUint32(172+(i*536), obj.limits.maxVertexInputBindings, true);
	view.setUint32(176+(i*536), obj.limits.maxVertexInputAttributeOffset, true);
	view.setUint32(180+(i*536), obj.limits.maxVertexInputBindingStride, true);
	view.setUint32(184+(i*536), obj.limits.maxVertexOutputComponents, true);
	view.setUint32(188+(i*536), obj.limits.maxTessellationGenerationLevel, true);
	view.setUint32(192+(i*536), obj.limits.maxTessellationPatchSize, true);
	view.setUint32(196+(i*536), obj.limits.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(200+(i*536), obj.limits.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(204+(i*536), obj.limits.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(208+(i*536), obj.limits.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(212+(i*536), obj.limits.maxTessellationEvaluationInputComponents, true);
	view.setUint32(216+(i*536), obj.limits.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(220+(i*536), obj.limits.maxGeometryShaderInvocations, true);
	view.setUint32(224+(i*536), obj.limits.maxGeometryInputComponents, true);
	view.setUint32(228+(i*536), obj.limits.maxGeometryOutputComponents, true);
	view.setUint32(232+(i*536), obj.limits.maxGeometryOutputVertices, true);
	view.setUint32(236+(i*536), obj.limits.maxGeometryTotalOutputComponents, true);
	view.setUint32(240+(i*536), obj.limits.maxFragmentInputComponents, true);
	view.setUint32(244+(i*536), obj.limits.maxFragmentOutputAttachments, true);
	view.setUint32(248+(i*536), obj.limits.maxFragmentDualSrcAttachments, true);
	view.setUint32(252+(i*536), obj.limits.maxFragmentCombinedOutputResources, true);
	view.setUint32(256+(i*536), obj.limits.maxComputeSharedMemorySize, true);

	view.setUint32(264+(i*536), obj.limits.maxComputeWorkGroupInvocations, true);

	view.setUint32(272+(i*536), obj.limits.subPixelPrecisionBits, true);
	view.setUint32(276+(i*536), obj.limits.subTexelPrecisionBits, true);
	view.setUint32(280+(i*536), obj.limits.mipmapPrecisionBits, true);
	view.setUint32(284+(i*536), obj.limits.maxDrawIndexedIndexValue, true);
	view.setUint32(288+(i*536), obj.limits.maxDrawIndirectCount, true);
	view.setFloat32(292+(i*536), obj.limits.maxSamplerLodBias, true);
	view.setFloat32(296+(i*536), obj.limits.maxSamplerAnisotropy, true);
	view.setUint32(300+(i*536), obj.limits.maxViewports, true);


	view.setUint32(312+(i*536), obj.limits.viewportSubPixelBits, true);

	view.setBigUint64(320+(i*536), BigInt(obj.limits.minMemoryMapAlignment||0), true);
	view.setBigUint64(320+(i*536), BigInt(obj.limits.minMemoryMapAlignment||0), true);

	view.setUint64(328+(i*536), obj.limits.minTexelBufferOffsetAlignment, true);
	view.setUint64(336+(i*536), obj.limits.minUniformBufferOffsetAlignment, true);
	view.setUint64(344+(i*536), obj.limits.minStorageBufferOffsetAlignment, true);
	view.setInt32(352+(i*536), obj.limits.minTexelOffset, true);
	view.setUint32(356+(i*536), obj.limits.maxTexelOffset, true);
	view.setInt32(360+(i*536), obj.limits.minTexelGatherOffset, true);
	view.setUint32(364+(i*536), obj.limits.maxTexelGatherOffset, true);
	view.setFloat32(368+(i*536), obj.limits.minInterpolationOffset, true);
	view.setFloat32(372+(i*536), obj.limits.maxInterpolationOffset, true);
	view.setUint32(376+(i*536), obj.limits.subPixelInterpolationOffsetBits, true);
	view.setUint32(380+(i*536), obj.limits.maxFramebufferWidth, true);
	view.setUint32(384+(i*536), obj.limits.maxFramebufferHeight, true);
	view.setUint32(388+(i*536), obj.limits.maxFramebufferLayers, true);
	view.setUint32(392+(i*536), obj.limits.framebufferColorSampleCounts, true);
	view.setUint32(396+(i*536), obj.limits.framebufferDepthSampleCounts, true);
	view.setUint32(400+(i*536), obj.limits.framebufferStencilSampleCounts, true);
	view.setUint32(404+(i*536), obj.limits.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(408+(i*536), obj.limits.maxColorAttachments, true);
	view.setUint32(412+(i*536), obj.limits.sampledImageColorSampleCounts, true);
	view.setUint32(416+(i*536), obj.limits.sampledImageIntegerSampleCounts, true);
	view.setUint32(420+(i*536), obj.limits.sampledImageDepthSampleCounts, true);
	view.setUint32(424+(i*536), obj.limits.sampledImageStencilSampleCounts, true);
	view.setUint32(428+(i*536), obj.limits.storageImageSampleCounts, true);
	view.setUint32(432+(i*536), obj.limits.maxSampleMaskWords, true);
	view.setUint32(436+(i*536), obj.limits.timestampComputeAndGraphics, true);
	view.setFloat32(440+(i*536), obj.limits.timestampPeriod, true);
	view.setUint32(444+(i*536), obj.limits.maxClipDistances, true);
	view.setUint32(448+(i*536), obj.limits.maxCullDistances, true);
	view.setUint32(452+(i*536), obj.limits.maxCombinedClipAndCullDistances, true);
	view.setUint32(456+(i*536), obj.limits.discreteQueuePriorities, true);


	view.setFloat32(468+(i*536), obj.limits.pointSizeGranularity, true);
	view.setFloat32(472+(i*536), obj.limits.lineWidthGranularity, true);
	view.setUint32(476+(i*536), obj.limits.strictLines, true);
	view.setUint32(480+(i*536), obj.limits.standardSampleLocations, true);
	view.setUint64(488+(i*536), obj.limits.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(496+(i*536), obj.limits.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(504+(i*536), obj.limits.nonCoherentAtomSize, true);
	}
	if (obj.sparseProperties){
	view.setUint32(512+(i*536), obj.sparseProperties.residencyStandard2DBlockShape, true);
	view.setUint32(516+(i*536), obj.sparseProperties.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(520+(i*536), obj.sparseProperties.residencyStandard3DBlockShape, true);
	view.setUint32(524+(i*536), obj.sparseProperties.residencyAlignedMipSize, true);
	view.setUint32(528+(i*536), obj.sparseProperties.residencyNonResidentStrict, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(536);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.apiVersion, true);
	view.setUint32(4, obj.driverVersion, true);
	view.setUint32(8, obj.vendorID, true);
	view.setUint32(12, obj.deviceID, true);
	view.setUint32(16, obj.deviceType, true)


	if (obj.limits){
	view.setUint32(40, obj.limits.maxImageDimension1D, true);
	view.setUint32(44, obj.limits.maxImageDimension2D, true);
	view.setUint32(48, obj.limits.maxImageDimension3D, true);
	view.setUint32(52, obj.limits.maxImageDimensionCube, true);
	view.setUint32(56, obj.limits.maxImageArrayLayers, true);
	view.setUint32(60, obj.limits.maxTexelBufferElements, true);
	view.setUint32(64, obj.limits.maxUniformBufferRange, true);
	view.setUint32(68, obj.limits.maxStorageBufferRange, true);
	view.setUint32(72, obj.limits.maxPushConstantsSize, true);
	view.setUint32(76, obj.limits.maxMemoryAllocationCount, true);
	view.setUint32(80, obj.limits.maxSamplerAllocationCount, true);
	view.setUint64(88, obj.limits.bufferImageGranularity, true);
	view.setUint64(96, obj.limits.sparseAddressSpaceSize, true);
	view.setUint32(104, obj.limits.maxBoundDescriptorSets, true);
	view.setUint32(108, obj.limits.maxPerStageDescriptorSamplers, true);
	view.setUint32(112, obj.limits.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(116, obj.limits.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(120, obj.limits.maxPerStageDescriptorSampledImages, true);
	view.setUint32(124, obj.limits.maxPerStageDescriptorStorageImages, true);
	view.setUint32(128, obj.limits.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(132, obj.limits.maxPerStageResources, true);
	view.setUint32(136, obj.limits.maxDescriptorSetSamplers, true);
	view.setUint32(140, obj.limits.maxDescriptorSetUniformBuffers, true);
	view.setUint32(144, obj.limits.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(148, obj.limits.maxDescriptorSetStorageBuffers, true);
	view.setUint32(152, obj.limits.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(156, obj.limits.maxDescriptorSetSampledImages, true);
	view.setUint32(160, obj.limits.maxDescriptorSetStorageImages, true);
	view.setUint32(164, obj.limits.maxDescriptorSetInputAttachments, true);
	view.setUint32(168, obj.limits.maxVertexInputAttributes, true);
	view.setUint32(172, obj.limits.maxVertexInputBindings, true);
	view.setUint32(176, obj.limits.maxVertexInputAttributeOffset, true);
	view.setUint32(180, obj.limits.maxVertexInputBindingStride, true);
	view.setUint32(184, obj.limits.maxVertexOutputComponents, true);
	view.setUint32(188, obj.limits.maxTessellationGenerationLevel, true);
	view.setUint32(192, obj.limits.maxTessellationPatchSize, true);
	view.setUint32(196, obj.limits.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(200, obj.limits.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(204, obj.limits.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(208, obj.limits.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(212, obj.limits.maxTessellationEvaluationInputComponents, true);
	view.setUint32(216, obj.limits.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(220, obj.limits.maxGeometryShaderInvocations, true);
	view.setUint32(224, obj.limits.maxGeometryInputComponents, true);
	view.setUint32(228, obj.limits.maxGeometryOutputComponents, true);
	view.setUint32(232, obj.limits.maxGeometryOutputVertices, true);
	view.setUint32(236, obj.limits.maxGeometryTotalOutputComponents, true);
	view.setUint32(240, obj.limits.maxFragmentInputComponents, true);
	view.setUint32(244, obj.limits.maxFragmentOutputAttachments, true);
	view.setUint32(248, obj.limits.maxFragmentDualSrcAttachments, true);
	view.setUint32(252, obj.limits.maxFragmentCombinedOutputResources, true);
	view.setUint32(256, obj.limits.maxComputeSharedMemorySize, true);

	view.setUint32(264, obj.limits.maxComputeWorkGroupInvocations, true);

	view.setUint32(272, obj.limits.subPixelPrecisionBits, true);
	view.setUint32(276, obj.limits.subTexelPrecisionBits, true);
	view.setUint32(280, obj.limits.mipmapPrecisionBits, true);
	view.setUint32(284, obj.limits.maxDrawIndexedIndexValue, true);
	view.setUint32(288, obj.limits.maxDrawIndirectCount, true);
	view.setFloat32(292, obj.limits.maxSamplerLodBias, true);
	view.setFloat32(296, obj.limits.maxSamplerAnisotropy, true);
	view.setUint32(300, obj.limits.maxViewports, true);


	view.setUint32(312, obj.limits.viewportSubPixelBits, true);

	view.setBigUint64(320, BigInt(obj.limits.minMemoryMapAlignment||0), true);
	view.setBigUint64(320, BigInt(obj.limits.minMemoryMapAlignment||0), true);

	view.setUint64(328, obj.limits.minTexelBufferOffsetAlignment, true);
	view.setUint64(336, obj.limits.minUniformBufferOffsetAlignment, true);
	view.setUint64(344, obj.limits.minStorageBufferOffsetAlignment, true);
	view.setInt32(352, obj.limits.minTexelOffset, true);
	view.setUint32(356, obj.limits.maxTexelOffset, true);
	view.setInt32(360, obj.limits.minTexelGatherOffset, true);
	view.setUint32(364, obj.limits.maxTexelGatherOffset, true);
	view.setFloat32(368, obj.limits.minInterpolationOffset, true);
	view.setFloat32(372, obj.limits.maxInterpolationOffset, true);
	view.setUint32(376, obj.limits.subPixelInterpolationOffsetBits, true);
	view.setUint32(380, obj.limits.maxFramebufferWidth, true);
	view.setUint32(384, obj.limits.maxFramebufferHeight, true);
	view.setUint32(388, obj.limits.maxFramebufferLayers, true);
	view.setUint32(392, obj.limits.framebufferColorSampleCounts, true);
	view.setUint32(396, obj.limits.framebufferDepthSampleCounts, true);
	view.setUint32(400, obj.limits.framebufferStencilSampleCounts, true);
	view.setUint32(404, obj.limits.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(408, obj.limits.maxColorAttachments, true);
	view.setUint32(412, obj.limits.sampledImageColorSampleCounts, true);
	view.setUint32(416, obj.limits.sampledImageIntegerSampleCounts, true);
	view.setUint32(420, obj.limits.sampledImageDepthSampleCounts, true);
	view.setUint32(424, obj.limits.sampledImageStencilSampleCounts, true);
	view.setUint32(428, obj.limits.storageImageSampleCounts, true);
	view.setUint32(432, obj.limits.maxSampleMaskWords, true);
	view.setUint32(436, obj.limits.timestampComputeAndGraphics, true);
	view.setFloat32(440, obj.limits.timestampPeriod, true);
	view.setUint32(444, obj.limits.maxClipDistances, true);
	view.setUint32(448, obj.limits.maxCullDistances, true);
	view.setUint32(452, obj.limits.maxCombinedClipAndCullDistances, true);
	view.setUint32(456, obj.limits.discreteQueuePriorities, true);


	view.setFloat32(468, obj.limits.pointSizeGranularity, true);
	view.setFloat32(472, obj.limits.lineWidthGranularity, true);
	view.setUint32(476, obj.limits.strictLines, true);
	view.setUint32(480, obj.limits.standardSampleLocations, true);
	view.setUint64(488, obj.limits.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(496, obj.limits.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(504, obj.limits.nonCoherentAtomSize, true);
	}
	if (obj.sparseProperties){
	view.setUint32(512, obj.sparseProperties.residencyStandard2DBlockShape, true);
	view.setUint32(516, obj.sparseProperties.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(520, obj.sparseProperties.residencyStandard3DBlockShape, true);
	view.setUint32(524, obj.sparseProperties.residencyAlignedMipSize, true);
	view.setUint32(528, obj.sparseProperties.residencyNonResidentStrict, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProperties_from_C(ptr){
	const obj = {
		apiVersion: read.u32(ptr, 0),
		driverVersion: read.u32(ptr, 4),
		vendorID: read.u32(ptr, 8),
		deviceID: read.u32(ptr, 12),
		deviceType: read.u32(ptr, 16),
		deviceName: null,
		pipelineCacheUUID: null,
		limits: null,
		sparseProperties: null
	};
	return obj;
}


export function VkQueueFamilyProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkQueueFamilyProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.queueFlags, true);
	view.setUint32(4+(i*24), obj.queueCount, true);
	view.setUint32(8+(i*24), obj.timestampValidBits, true);
	if (obj.minImageTransferGranularity){
	view.setUint32(12+(i*24), obj.minImageTransferGranularity.width, true);
	view.setUint32(16+(i*24), obj.minImageTransferGranularity.height, true);
	view.setUint32(20+(i*24), obj.minImageTransferGranularity.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.queueFlags, true);
	view.setUint32(4, obj.queueCount, true);
	view.setUint32(8, obj.timestampValidBits, true);
	if (obj.minImageTransferGranularity){
	view.setUint32(12, obj.minImageTransferGranularity.width, true);
	view.setUint32(16, obj.minImageTransferGranularity.height, true);
	view.setUint32(20, obj.minImageTransferGranularity.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueueFamilyProperties_from_C(ptr){
	const obj = {
		queueFlags: read.u32(ptr, 0),
		queueCount: read.u32(ptr, 4),
		timestampValidBits: read.u32(ptr, 8),
		minImageTransferGranularity: null
	};
	return obj;
}


export function VkDeviceQueueCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDeviceQueueCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	view.setUint32(20+(i*40), obj.queueFamilyIndex, true);
	view.setUint32(24+(i*40), obj.queueCount, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pQueuePriorities||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pQueuePriorities||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.queueFamilyIndex, true);
	view.setUint32(24, obj.queueCount, true);

	view.setBigUint64(32, BigInt(obj.pQueuePriorities||0), true);
	view.setBigUint64(32, BigInt(obj.pQueuePriorities||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceQueueCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		queueFamilyIndex: read.u32(ptr, 20),
		queueCount: read.u32(ptr, 24),
		pQueuePriorities: undefined
	};
	return obj;
}


export function VkDeviceCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkDeviceCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.flags, true);
	view.setUint32(20+(i*72), obj.queueCreateInfoCount, true);
	if (obj.pQueueCreateInfos){
		const wrapped = VkDeviceQueueCreateInfo_to_C(obj.pQueueCreateInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*72), BigInt(obj.pQueueCreateInfos||0), true);
	}
	view.setUint32(32+(i*72), obj.enabledLayerCount, true);

	view.setBigUint64(40+(i*72), BigInt(obj.ppEnabledLayerNames||0), true);
	view.setBigUint64(40+(i*72), BigInt(obj.ppEnabledLayerNames||0), true);

	view.setUint32(48+(i*72), obj.enabledExtensionCount, true);

	view.setBigUint64(56+(i*72), BigInt(obj.ppEnabledExtensionNames||0), true);
	view.setBigUint64(56+(i*72), BigInt(obj.ppEnabledExtensionNames||0), true);

	if (obj.pEnabledFeatures){
		const wrapped = VkPhysicalDeviceFeatures_to_C(obj.pEnabledFeatures, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*72), BigInt(obj.pEnabledFeatures||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.queueCreateInfoCount, true);
	if (obj.pQueueCreateInfos){
		const wrapped = VkDeviceQueueCreateInfo_to_C(obj.pQueueCreateInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pQueueCreateInfos||0), true);
	}
	view.setUint32(32, obj.enabledLayerCount, true);

	view.setBigUint64(40, BigInt(obj.ppEnabledLayerNames||0), true);
	view.setBigUint64(40, BigInt(obj.ppEnabledLayerNames||0), true);

	view.setUint32(48, obj.enabledExtensionCount, true);

	view.setBigUint64(56, BigInt(obj.ppEnabledExtensionNames||0), true);
	view.setBigUint64(56, BigInt(obj.ppEnabledExtensionNames||0), true);

	if (obj.pEnabledFeatures){
		const wrapped = VkPhysicalDeviceFeatures_to_C(obj.pEnabledFeatures, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.pEnabledFeatures||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		queueCreateInfoCount: read.u32(ptr, 20),
		pQueueCreateInfos: VkDeviceQueueCreateInfo_from_C(read.ptr(ptr)),
		enabledLayerCount: read.u32(ptr, 32),
		ppEnabledLayerNames: read.ptr(ptr),
		enabledExtensionCount: read.u32(ptr, 48),
		ppEnabledExtensionNames: read.ptr(ptr),
		pEnabledFeatures: VkPhysicalDeviceFeatures_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkExtensionProperties_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkExtensionProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setUint32(8+(i*16), obj.specVersion, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setUint32(8, obj.specVersion, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExtensionProperties_from_C(ptr){
	const obj = {
		extensionName: null,
		specVersion: read.u32(ptr, 8)
	};
	return obj;
}


export function VkLayerProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkLayerProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setUint32(8+(i*24), obj.specVersion, true);
	view.setUint32(12+(i*24), obj.implementationVersion, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setUint32(8, obj.specVersion, true);
	view.setUint32(12, obj.implementationVersion, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkLayerProperties_from_C(ptr){
	const obj = {
		layerName: null,
		specVersion: read.u32(ptr, 8),
		implementationVersion: read.u32(ptr, 12),
		description: null
	};
	return obj;
}


export function VkSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.waitSemaphoreCount, true);

	view.setBigUint64(24+(i*72), BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24+(i*72), BigInt(obj.pWaitSemaphores||0), true);


	view.setBigUint64(32+(i*72), BigInt(obj.pWaitDstStageMask||0), true);
	view.setBigUint64(32+(i*72), BigInt(obj.pWaitDstStageMask||0), true);

	view.setUint32(40+(i*72), obj.commandBufferCount, true);

	view.setBigUint64(48+(i*72), BigInt(obj.pCommandBuffers||0), true);
	view.setBigUint64(48+(i*72), BigInt(obj.pCommandBuffers||0), true);

	view.setUint32(56+(i*72), obj.signalSemaphoreCount, true);

	view.setBigUint64(64+(i*72), BigInt(obj.pSignalSemaphores||0), true);
	view.setBigUint64(64+(i*72), BigInt(obj.pSignalSemaphores||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.waitSemaphoreCount, true);

	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);


	view.setBigUint64(32, BigInt(obj.pWaitDstStageMask||0), true);
	view.setBigUint64(32, BigInt(obj.pWaitDstStageMask||0), true);

	view.setUint32(40, obj.commandBufferCount, true);

	view.setBigUint64(48, BigInt(obj.pCommandBuffers||0), true);
	view.setBigUint64(48, BigInt(obj.pCommandBuffers||0), true);

	view.setUint32(56, obj.signalSemaphoreCount, true);

	view.setBigUint64(64, BigInt(obj.pSignalSemaphores||0), true);
	view.setBigUint64(64, BigInt(obj.pSignalSemaphores||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		waitSemaphoreCount: read.u32(ptr, 16),
		pWaitSemaphores: read.ptr(ptr),
		pWaitDstStageMask: undefined,
		commandBufferCount: read.u32(ptr, 40),
		pCommandBuffers: read.ptr(ptr),
		signalSemaphoreCount: read.u32(ptr, 56),
		pSignalSemaphores: read.ptr(ptr)
	};
	return obj;
}


export function VkMappedMemoryRange_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkMappedMemoryRange_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.memory||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.memory||0), true);

	view.setUint64(24+(i*40), obj.offset, true);
	view.setUint64(32+(i*40), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.memory||0), true);
	view.setBigUint64(16, BigInt(obj.memory||0), true);

	view.setUint64(24, obj.offset, true);
	view.setUint64(32, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMappedMemoryRange_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memory: undefined,
		offset: null,
		size: null
	};
	return obj;
}


export function VkMemoryAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkMemoryAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*32), obj.allocationSize, true);
	view.setUint32(24+(i*32), obj.memoryTypeIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.allocationSize, true);
	view.setUint32(24, obj.memoryTypeIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		allocationSize: null,
		memoryTypeIndex: read.u32(ptr, 24)
	};
	return obj;
}


export function VkMemoryRequirements_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryRequirements_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*24), obj.size, true);
	view.setUint64(8+(i*24), obj.alignment, true);
	view.setUint32(16+(i*24), obj.memoryTypeBits, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.size, true);
	view.setUint64(8, obj.alignment, true);
	view.setUint32(16, obj.memoryTypeBits, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryRequirements_from_C(ptr){
	const obj = {
		size: null,
		alignment: null,
		memoryTypeBits: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSparseMemoryBind_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkSparseMemoryBind_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*40), obj.resourceOffset, true);
	view.setUint64(8+(i*40), obj.size, true);

	view.setBigUint64(16+(i*40), BigInt(obj.memory||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.memory||0), true);

	view.setUint64(24+(i*40), obj.memoryOffset, true);
	view.setUint32(32+(i*40), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.resourceOffset, true);
	view.setUint64(8, obj.size, true);

	view.setBigUint64(16, BigInt(obj.memory||0), true);
	view.setBigUint64(16, BigInt(obj.memory||0), true);

	view.setUint64(24, obj.memoryOffset, true);
	view.setUint32(32, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseMemoryBind_from_C(ptr){
	const obj = {
		resourceOffset: null,
		size: null,
		memory: undefined,
		memoryOffset: null,
		flags: read.u32(ptr, 32)
	};
	return obj;
}


export function VkSparseBufferMemoryBindInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSparseBufferMemoryBindInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.buffer||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.buffer||0), true);

	view.setUint32(8+(i*24), obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pBinds||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.buffer||0), true);
	view.setBigUint64(0, BigInt(obj.buffer||0), true);

	view.setUint32(8, obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pBinds||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseBufferMemoryBindInfo_from_C(ptr){
	const obj = {
		buffer: undefined,
		bindCount: read.u32(ptr, 8),
		pBinds: VkSparseMemoryBind_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkSparseImageOpaqueMemoryBindInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSparseImageOpaqueMemoryBindInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.image||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.image||0), true);

	view.setUint32(8+(i*24), obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pBinds||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.image||0), true);
	view.setBigUint64(0, BigInt(obj.image||0), true);

	view.setUint32(8, obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pBinds||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageOpaqueMemoryBindInfo_from_C(ptr){
	const obj = {
		image: undefined,
		bindCount: read.u32(ptr, 8),
		pBinds: VkSparseMemoryBind_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkImageSubresource_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkImageSubresource_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.aspectMask, true);
	view.setUint32(4+(i*12), obj.mipLevel, true);
	view.setUint32(8+(i*12), obj.arrayLayer, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.aspectMask, true);
	view.setUint32(4, obj.mipLevel, true);
	view.setUint32(8, obj.arrayLayer, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSubresource_from_C(ptr){
	const obj = {
		aspectMask: read.u32(ptr, 0),
		mipLevel: read.u32(ptr, 4),
		arrayLayer: read.u32(ptr, 8)
	};
	return obj;
}


export function VkSparseImageMemoryBind_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkSparseImageMemoryBind_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.subresource){
	view.setUint32(0+(i*64), obj.subresource.aspectMask, true);
	view.setUint32(4+(i*64), obj.subresource.mipLevel, true);
	view.setUint32(8+(i*64), obj.subresource.arrayLayer, true);
	}
	if (obj.offset){
	view.setInt32(12+(i*64), obj.offset.x, true);
	view.setInt32(16+(i*64), obj.offset.y, true);
	view.setInt32(20+(i*64), obj.offset.z, true);
	}
	if (obj.extent){
	view.setUint32(24+(i*64), obj.extent.width, true);
	view.setUint32(28+(i*64), obj.extent.height, true);
	view.setUint32(32+(i*64), obj.extent.depth, true);
	}

	view.setBigUint64(40+(i*64), BigInt(obj.memory||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.memory||0), true);

	view.setUint64(48+(i*64), obj.memoryOffset, true);
	view.setUint32(56+(i*64), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.subresource){
	view.setUint32(0, obj.subresource.aspectMask, true);
	view.setUint32(4, obj.subresource.mipLevel, true);
	view.setUint32(8, obj.subresource.arrayLayer, true);
	}
	if (obj.offset){
	view.setInt32(12, obj.offset.x, true);
	view.setInt32(16, obj.offset.y, true);
	view.setInt32(20, obj.offset.z, true);
	}
	if (obj.extent){
	view.setUint32(24, obj.extent.width, true);
	view.setUint32(28, obj.extent.height, true);
	view.setUint32(32, obj.extent.depth, true);
	}

	view.setBigUint64(40, BigInt(obj.memory||0), true);
	view.setBigUint64(40, BigInt(obj.memory||0), true);

	view.setUint64(48, obj.memoryOffset, true);
	view.setUint32(56, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageMemoryBind_from_C(ptr){
	const obj = {
		subresource: null,
		offset: null,
		extent: null,
		memory: undefined,
		memoryOffset: null,
		flags: read.u32(ptr, 56)
	};
	return obj;
}


export function VkSparseImageMemoryBindInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSparseImageMemoryBindInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.image||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.image||0), true);

	view.setUint32(8+(i*24), obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseImageMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pBinds||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.image||0), true);
	view.setBigUint64(0, BigInt(obj.image||0), true);

	view.setUint32(8, obj.bindCount, true);
	if (obj.pBinds){
		const wrapped = VkSparseImageMemoryBind_to_C(obj.pBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pBinds||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageMemoryBindInfo_from_C(ptr){
	const obj = {
		image: undefined,
		bindCount: read.u32(ptr, 8),
		pBinds: VkSparseImageMemoryBind_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkBindSparseInfo_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkBindSparseInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*96), obj.waitSemaphoreCount, true);

	view.setBigUint64(24+(i*96), BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24+(i*96), BigInt(obj.pWaitSemaphores||0), true);

	view.setUint32(32+(i*96), obj.bufferBindCount, true);
	if (obj.pBufferBinds){
		const wrapped = VkSparseBufferMemoryBindInfo_to_C(obj.pBufferBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*96), BigInt(obj.pBufferBinds||0), true);
	}
	view.setUint32(48+(i*96), obj.imageOpaqueBindCount, true);
	if (obj.pImageOpaqueBinds){
		const wrapped = VkSparseImageOpaqueMemoryBindInfo_to_C(obj.pImageOpaqueBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*96), BigInt(obj.pImageOpaqueBinds||0), true);
	}
	view.setUint32(64+(i*96), obj.imageBindCount, true);
	if (obj.pImageBinds){
		const wrapped = VkSparseImageMemoryBindInfo_to_C(obj.pImageBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72+(i*96), BigInt(obj.pImageBinds||0), true);
	}
	view.setUint32(80+(i*96), obj.signalSemaphoreCount, true);

	view.setBigUint64(88+(i*96), BigInt(obj.pSignalSemaphores||0), true);
	view.setBigUint64(88+(i*96), BigInt(obj.pSignalSemaphores||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.waitSemaphoreCount, true);

	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);

	view.setUint32(32, obj.bufferBindCount, true);
	if (obj.pBufferBinds){
		const wrapped = VkSparseBufferMemoryBindInfo_to_C(obj.pBufferBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pBufferBinds||0), true);
	}
	view.setUint32(48, obj.imageOpaqueBindCount, true);
	if (obj.pImageOpaqueBinds){
		const wrapped = VkSparseImageOpaqueMemoryBindInfo_to_C(obj.pImageOpaqueBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pImageOpaqueBinds||0), true);
	}
	view.setUint32(64, obj.imageBindCount, true);
	if (obj.pImageBinds){
		const wrapped = VkSparseImageMemoryBindInfo_to_C(obj.pImageBinds, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72, BigInt(obj.pImageBinds||0), true);
	}
	view.setUint32(80, obj.signalSemaphoreCount, true);

	view.setBigUint64(88, BigInt(obj.pSignalSemaphores||0), true);
	view.setBigUint64(88, BigInt(obj.pSignalSemaphores||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindSparseInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		waitSemaphoreCount: read.u32(ptr, 16),
		pWaitSemaphores: read.ptr(ptr),
		bufferBindCount: read.u32(ptr, 32),
		pBufferBinds: VkSparseBufferMemoryBindInfo_from_C(read.ptr(ptr)),
		imageOpaqueBindCount: read.u32(ptr, 48),
		pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo_from_C(read.ptr(ptr)),
		imageBindCount: read.u32(ptr, 64),
		pImageBinds: VkSparseImageMemoryBindInfo_from_C(read.ptr(ptr)),
		signalSemaphoreCount: read.u32(ptr, 80),
		pSignalSemaphores: read.ptr(ptr)
	};
	return obj;
}


export function VkSparseImageFormatProperties_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkSparseImageFormatProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*20), obj.aspectMask, true);
	if (obj.imageGranularity){
	view.setUint32(4+(i*20), obj.imageGranularity.width, true);
	view.setUint32(8+(i*20), obj.imageGranularity.height, true);
	view.setUint32(12+(i*20), obj.imageGranularity.depth, true);
	}
	view.setUint32(16+(i*20), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.aspectMask, true);
	if (obj.imageGranularity){
	view.setUint32(4, obj.imageGranularity.width, true);
	view.setUint32(8, obj.imageGranularity.height, true);
	view.setUint32(12, obj.imageGranularity.depth, true);
	}
	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageFormatProperties_from_C(ptr){
	const obj = {
		aspectMask: read.u32(ptr, 0),
		imageGranularity: null,
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSparseImageMemoryRequirements_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkSparseImageMemoryRequirements_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.formatProperties){
	view.setUint32(0+(i*48), obj.formatProperties.aspectMask, true);
	if (obj.formatProperties.imageGranularity){
	view.setUint32(4+(i*48), obj.formatProperties.imageGranularity.width, true);
	view.setUint32(8+(i*48), obj.formatProperties.imageGranularity.height, true);
	view.setUint32(12+(i*48), obj.formatProperties.imageGranularity.depth, true);
	}
	view.setUint32(16+(i*48), obj.formatProperties.flags, true);
	}
	view.setUint32(20+(i*48), obj.imageMipTailFirstLod, true);
	view.setUint64(24+(i*48), obj.imageMipTailSize, true);
	view.setUint64(32+(i*48), obj.imageMipTailOffset, true);
	view.setUint64(40+(i*48), obj.imageMipTailStride, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.formatProperties){
	view.setUint32(0, obj.formatProperties.aspectMask, true);
	if (obj.formatProperties.imageGranularity){
	view.setUint32(4, obj.formatProperties.imageGranularity.width, true);
	view.setUint32(8, obj.formatProperties.imageGranularity.height, true);
	view.setUint32(12, obj.formatProperties.imageGranularity.depth, true);
	}
	view.setUint32(16, obj.formatProperties.flags, true);
	}
	view.setUint32(20, obj.imageMipTailFirstLod, true);
	view.setUint64(24, obj.imageMipTailSize, true);
	view.setUint64(32, obj.imageMipTailOffset, true);
	view.setUint64(40, obj.imageMipTailStride, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageMemoryRequirements_from_C(ptr){
	const obj = {
		formatProperties: null,
		imageMipTailFirstLod: read.u32(ptr, 20),
		imageMipTailSize: null,
		imageMipTailOffset: null,
		imageMipTailStride: null
	};
	return obj;
}


export function VkFenceCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkFenceCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFenceCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSemaphoreCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSemaphoreCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkEventCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkEventCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkEventCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkQueryPoolCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkQueryPoolCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.queryType, true)
	view.setUint32(24+(i*32), obj.queryCount, true);
	view.setUint32(28+(i*32), obj.pipelineStatistics, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.queryType, true)
	view.setUint32(24, obj.queryCount, true);
	view.setUint32(28, obj.pipelineStatistics, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueryPoolCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		queryType: read.u32(ptr, 20),
		queryCount: read.u32(ptr, 24),
		pipelineStatistics: read.u32(ptr, 28)
	};
	return obj;
}


export function VkBufferCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkBufferCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.flags, true);
	view.setUint64(24+(i*56), obj.size, true);
	view.setUint32(32+(i*56), obj.usage, true);
	view.setUint32(36+(i*56), obj.sharingMode, true)
	view.setUint32(40+(i*56), obj.queueFamilyIndexCount, true);

	view.setBigUint64(48+(i*56), BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pQueueFamilyIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint64(24, obj.size, true);
	view.setUint32(32, obj.usage, true);
	view.setUint32(36, obj.sharingMode, true)
	view.setUint32(40, obj.queueFamilyIndexCount, true);

	view.setBigUint64(48, BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(48, BigInt(obj.pQueueFamilyIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		size: null,
		usage: read.u32(ptr, 32),
		sharingMode: read.u32(ptr, 36),
		queueFamilyIndexCount: read.u32(ptr, 40),
		pQueueFamilyIndices: undefined
	};
	return obj;
}


export function VkBufferViewCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkBufferViewCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.flags, true);

	view.setBigUint64(24+(i*56), BigInt(obj.buffer||0), true);
	view.setBigUint64(24+(i*56), BigInt(obj.buffer||0), true);

	view.setUint32(32+(i*56), obj.format, true)
	view.setUint64(40+(i*56), obj.offset, true);
	view.setUint64(48+(i*56), obj.range, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.buffer||0), true);
	view.setBigUint64(24, BigInt(obj.buffer||0), true);

	view.setUint32(32, obj.format, true)
	view.setUint64(40, obj.offset, true);
	view.setUint64(48, obj.range, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferViewCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		buffer: undefined,
		format: read.u32(ptr, 32),
		offset: null,
		range: null
	};
	return obj;
}


export function VkImageCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkImageCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*88), obj.flags, true);
	view.setUint32(20+(i*88), obj.imageType, true)
	view.setUint32(24+(i*88), obj.format, true)
	if (obj.extent){
	view.setUint32(28+(i*88), obj.extent.width, true);
	view.setUint32(32+(i*88), obj.extent.height, true);
	view.setUint32(36+(i*88), obj.extent.depth, true);
	}
	view.setUint32(40+(i*88), obj.mipLevels, true);
	view.setUint32(44+(i*88), obj.arrayLayers, true);
	view.setUint32(48+(i*88), obj.samples, true)
	view.setUint32(52+(i*88), obj.tiling, true)
	view.setUint32(56+(i*88), obj.usage, true);
	view.setUint32(60+(i*88), obj.sharingMode, true)
	view.setUint32(64+(i*88), obj.queueFamilyIndexCount, true);

	view.setBigUint64(72+(i*88), BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(72+(i*88), BigInt(obj.pQueueFamilyIndices||0), true);

	view.setUint32(80+(i*88), obj.initialLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.imageType, true)
	view.setUint32(24, obj.format, true)
	if (obj.extent){
	view.setUint32(28, obj.extent.width, true);
	view.setUint32(32, obj.extent.height, true);
	view.setUint32(36, obj.extent.depth, true);
	}
	view.setUint32(40, obj.mipLevels, true);
	view.setUint32(44, obj.arrayLayers, true);
	view.setUint32(48, obj.samples, true)
	view.setUint32(52, obj.tiling, true)
	view.setUint32(56, obj.usage, true);
	view.setUint32(60, obj.sharingMode, true)
	view.setUint32(64, obj.queueFamilyIndexCount, true);

	view.setBigUint64(72, BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(72, BigInt(obj.pQueueFamilyIndices||0), true);

	view.setUint32(80, obj.initialLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		imageType: read.u32(ptr, 20),
		format: read.u32(ptr, 24),
		extent: null,
		mipLevels: read.u32(ptr, 40),
		arrayLayers: read.u32(ptr, 44),
		samples: read.u32(ptr, 48),
		tiling: read.u32(ptr, 52),
		usage: read.u32(ptr, 56),
		sharingMode: read.u32(ptr, 60),
		queueFamilyIndexCount: read.u32(ptr, 64),
		pQueueFamilyIndices: undefined,
		initialLayout: read.u32(ptr, 80)
	};
	return obj;
}


export function VkSubresourceLayout_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkSubresourceLayout_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*40), obj.offset, true);
	view.setUint64(8+(i*40), obj.size, true);
	view.setUint64(16+(i*40), obj.rowPitch, true);
	view.setUint64(24+(i*40), obj.arrayPitch, true);
	view.setUint64(32+(i*40), obj.depthPitch, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.offset, true);
	view.setUint64(8, obj.size, true);
	view.setUint64(16, obj.rowPitch, true);
	view.setUint64(24, obj.arrayPitch, true);
	view.setUint64(32, obj.depthPitch, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubresourceLayout_from_C(ptr){
	const obj = {
		offset: null,
		size: null,
		rowPitch: null,
		arrayPitch: null,
		depthPitch: null
	};
	return obj;
}


export function VkComponentMapping_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkComponentMapping_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.r, true)
	view.setUint32(4+(i*16), obj.g, true)
	view.setUint32(8+(i*16), obj.b, true)
	view.setUint32(12+(i*16), obj.a, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.r, true)
	view.setUint32(4, obj.g, true)
	view.setUint32(8, obj.b, true)
	view.setUint32(12, obj.a, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkComponentMapping_from_C(ptr){
	const obj = {
		r: read.u32(ptr, 0),
		g: read.u32(ptr, 4),
		b: read.u32(ptr, 8),
		a: read.u32(ptr, 12)
	};
	return obj;
}


export function VkImageViewCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkImageViewCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.flags, true);

	view.setBigUint64(24+(i*80), BigInt(obj.image||0), true);
	view.setBigUint64(24+(i*80), BigInt(obj.image||0), true);

	view.setUint32(32+(i*80), obj.viewType, true)
	view.setUint32(36+(i*80), obj.format, true)
	if (obj.components){
	view.setUint32(40+(i*80), obj.components.r, true)
	view.setUint32(44+(i*80), obj.components.g, true)
	view.setUint32(48+(i*80), obj.components.b, true)
	view.setUint32(52+(i*80), obj.components.a, true)
	}
	if (obj.subresourceRange){
	view.setUint32(56+(i*80), obj.subresourceRange.aspectMask, true);
	view.setUint32(60+(i*80), obj.subresourceRange.baseMipLevel, true);
	view.setUint32(64+(i*80), obj.subresourceRange.levelCount, true);
	view.setUint32(68+(i*80), obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(72+(i*80), obj.subresourceRange.layerCount, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.image||0), true);
	view.setBigUint64(24, BigInt(obj.image||0), true);

	view.setUint32(32, obj.viewType, true)
	view.setUint32(36, obj.format, true)
	if (obj.components){
	view.setUint32(40, obj.components.r, true)
	view.setUint32(44, obj.components.g, true)
	view.setUint32(48, obj.components.b, true)
	view.setUint32(52, obj.components.a, true)
	}
	if (obj.subresourceRange){
	view.setUint32(56, obj.subresourceRange.aspectMask, true);
	view.setUint32(60, obj.subresourceRange.baseMipLevel, true);
	view.setUint32(64, obj.subresourceRange.levelCount, true);
	view.setUint32(68, obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(72, obj.subresourceRange.layerCount, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		image: undefined,
		viewType: read.u32(ptr, 32),
		format: read.u32(ptr, 36),
		components: null,
		subresourceRange: null
	};
	return obj;
}


export function VkShaderModuleCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkShaderModuleCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);

	view.setBigUint64(24+(i*40), BigInt(obj.codeSize||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.codeSize||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pCode||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pCode||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.codeSize||0), true);
	view.setBigUint64(24, BigInt(obj.codeSize||0), true);


	view.setBigUint64(32, BigInt(obj.pCode||0), true);
	view.setBigUint64(32, BigInt(obj.pCode||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShaderModuleCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		codeSize: undefined,
		pCode: undefined
	};
	return obj;
}


export function VkPipelineCacheCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPipelineCacheCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);

	view.setBigUint64(24+(i*40), BigInt(obj.initialDataSize||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.initialDataSize||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pInitialData||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pInitialData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.initialDataSize||0), true);
	view.setBigUint64(24, BigInt(obj.initialDataSize||0), true);


	view.setBigUint64(32, BigInt(obj.pInitialData||0), true);
	view.setBigUint64(32, BigInt(obj.pInitialData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCacheCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		initialDataSize: undefined,
		pInitialData: read.ptr(ptr)
	};
	return obj;
}


export function VkSpecializationMapEntry_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkSpecializationMapEntry_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.constantID, true);
	view.setUint32(4+(i*16), obj.offset, true);

	view.setBigUint64(8+(i*16), BigInt(obj.size||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.size||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.constantID, true);
	view.setUint32(4, obj.offset, true);

	view.setBigUint64(8, BigInt(obj.size||0), true);
	view.setBigUint64(8, BigInt(obj.size||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSpecializationMapEntry_from_C(ptr){
	const obj = {
		constantID: read.u32(ptr, 0),
		offset: read.u32(ptr, 4),
		size: undefined
	};
	return obj;
}


export function VkSpecializationInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSpecializationInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.mapEntryCount, true);
	if (obj.pMapEntries){
		const wrapped = VkSpecializationMapEntry_to_C(obj.pMapEntries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(8+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(8+(i*32), BigInt(obj.pMapEntries||0), true);
	}

	view.setBigUint64(16+(i*32), BigInt(obj.dataSize||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.dataSize||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.mapEntryCount, true);
	if (obj.pMapEntries){
		const wrapped = VkSpecializationMapEntry_to_C(obj.pMapEntries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(8, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(8, BigInt(obj.pMapEntries||0), true);
	}

	view.setBigUint64(16, BigInt(obj.dataSize||0), true);
	view.setBigUint64(16, BigInt(obj.dataSize||0), true);


	view.setBigUint64(24, BigInt(obj.pData||0), true);
	view.setBigUint64(24, BigInt(obj.pData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSpecializationInfo_from_C(ptr){
	const obj = {
		mapEntryCount: read.u32(ptr, 0),
		pMapEntries: VkSpecializationMapEntry_from_C(read.ptr(ptr)),
		dataSize: undefined,
		pData: read.ptr(ptr)
	};
	return obj;
}


export function VkPipelineShaderStageCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineShaderStageCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.stage, true)

	view.setBigUint64(24+(i*48), BigInt(obj.module||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.module||0), true);


	view.setBigUint64(32+(i*48), BigInt(obj.pName||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.pName||0), true);

	if (obj.pSpecializationInfo){
		const wrapped = VkSpecializationInfo_to_C(obj.pSpecializationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pSpecializationInfo||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.stage, true)

	view.setBigUint64(24, BigInt(obj.module||0), true);
	view.setBigUint64(24, BigInt(obj.module||0), true);


	view.setBigUint64(32, BigInt(obj.pName||0), true);
	view.setBigUint64(32, BigInt(obj.pName||0), true);

	if (obj.pSpecializationInfo){
		const wrapped = VkSpecializationInfo_to_C(obj.pSpecializationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pSpecializationInfo||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineShaderStageCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		stage: read.u32(ptr, 20),
		module: undefined,
		pName: read.ptr(ptr),
		pSpecializationInfo: VkSpecializationInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkComputePipelineCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkComputePipelineCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*96), obj.flags, true);
	if (obj.stage){
	view.setUint32(24+(i*96), obj.stage.sType, true)

	view.setBigUint64(32+(i*96), BigInt(obj.stage.pNext||0), true);
	view.setBigUint64(32+(i*96), BigInt(obj.stage.pNext||0), true);

	view.setUint32(40+(i*96), obj.stage.flags, true);
	view.setUint32(44+(i*96), obj.stage.stage, true)

	view.setBigUint64(48+(i*96), BigInt(obj.stage.module||0), true);
	view.setBigUint64(48+(i*96), BigInt(obj.stage.module||0), true);


	view.setBigUint64(56+(i*96), BigInt(obj.stage.pName||0), true);
	view.setBigUint64(56+(i*96), BigInt(obj.stage.pName||0), true);

	if (obj.stage.pSpecializationInfo){
		const wrapped = VkSpecializationInfo_to_C(obj.stage.pSpecializationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*96), BigInt(obj.stage.pSpecializationInfo||0), true);
	}
	}

	view.setBigUint64(72+(i*96), BigInt(obj.layout||0), true);
	view.setBigUint64(72+(i*96), BigInt(obj.layout||0), true);


	view.setBigUint64(80+(i*96), BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(80+(i*96), BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(88+(i*96), obj.basePipelineIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	if (obj.stage){
	view.setUint32(24, obj.stage.sType, true)

	view.setBigUint64(32, BigInt(obj.stage.pNext||0), true);
	view.setBigUint64(32, BigInt(obj.stage.pNext||0), true);

	view.setUint32(40, obj.stage.flags, true);
	view.setUint32(44, obj.stage.stage, true)

	view.setBigUint64(48, BigInt(obj.stage.module||0), true);
	view.setBigUint64(48, BigInt(obj.stage.module||0), true);


	view.setBigUint64(56, BigInt(obj.stage.pName||0), true);
	view.setBigUint64(56, BigInt(obj.stage.pName||0), true);

	if (obj.stage.pSpecializationInfo){
		const wrapped = VkSpecializationInfo_to_C(obj.stage.pSpecializationInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.stage.pSpecializationInfo||0), true);
	}
	}

	view.setBigUint64(72, BigInt(obj.layout||0), true);
	view.setBigUint64(72, BigInt(obj.layout||0), true);


	view.setBigUint64(80, BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(80, BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(88, obj.basePipelineIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkComputePipelineCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		stage: null,
		layout: undefined,
		basePipelineHandle: undefined,
		basePipelineIndex: null
	};
	return obj;
}


export function VkVertexInputBindingDescription_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkVertexInputBindingDescription_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.binding, true);
	view.setUint32(4+(i*12), obj.stride, true);
	view.setUint32(8+(i*12), obj.inputRate, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.binding, true);
	view.setUint32(4, obj.stride, true);
	view.setUint32(8, obj.inputRate, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkVertexInputBindingDescription_from_C(ptr){
	const obj = {
		binding: read.u32(ptr, 0),
		stride: read.u32(ptr, 4),
		inputRate: read.u32(ptr, 8)
	};
	return obj;
}


export function VkVertexInputAttributeDescription_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkVertexInputAttributeDescription_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.location, true);
	view.setUint32(4+(i*16), obj.binding, true);
	view.setUint32(8+(i*16), obj.format, true)
	view.setUint32(12+(i*16), obj.offset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.location, true);
	view.setUint32(4, obj.binding, true);
	view.setUint32(8, obj.format, true)
	view.setUint32(12, obj.offset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkVertexInputAttributeDescription_from_C(ptr){
	const obj = {
		location: read.u32(ptr, 0),
		binding: read.u32(ptr, 4),
		format: read.u32(ptr, 8),
		offset: read.u32(ptr, 12)
	};
	return obj;
}


export function VkPipelineVertexInputStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineVertexInputStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.vertexBindingDescriptionCount, true);
	if (obj.pVertexBindingDescriptions){
		const wrapped = VkVertexInputBindingDescription_to_C(obj.pVertexBindingDescriptions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*48), BigInt(obj.pVertexBindingDescriptions||0), true);
	}
	view.setUint32(32+(i*48), obj.vertexAttributeDescriptionCount, true);
	if (obj.pVertexAttributeDescriptions){
		const wrapped = VkVertexInputAttributeDescription_to_C(obj.pVertexAttributeDescriptions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pVertexAttributeDescriptions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.vertexBindingDescriptionCount, true);
	if (obj.pVertexBindingDescriptions){
		const wrapped = VkVertexInputBindingDescription_to_C(obj.pVertexBindingDescriptions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pVertexBindingDescriptions||0), true);
	}
	view.setUint32(32, obj.vertexAttributeDescriptionCount, true);
	if (obj.pVertexAttributeDescriptions){
		const wrapped = VkVertexInputAttributeDescription_to_C(obj.pVertexAttributeDescriptions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pVertexAttributeDescriptions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineVertexInputStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		vertexBindingDescriptionCount: read.u32(ptr, 20),
		pVertexBindingDescriptions: VkVertexInputBindingDescription_from_C(read.ptr(ptr)),
		vertexAttributeDescriptionCount: read.u32(ptr, 32),
		pVertexAttributeDescriptions: VkVertexInputAttributeDescription_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPipelineInputAssemblyStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineInputAssemblyStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.topology, true)
	view.setUint32(24+(i*32), obj.primitiveRestartEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.topology, true)
	view.setUint32(24, obj.primitiveRestartEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineInputAssemblyStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		topology: read.u32(ptr, 20),
		primitiveRestartEnable: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPipelineTessellationStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineTessellationStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.patchControlPoints, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.patchControlPoints, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineTessellationStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		patchControlPoints: read.u32(ptr, 20)
	};
	return obj;
}


export function VkViewport_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkViewport_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*24), obj.x, true);
	view.setFloat32(4+(i*24), obj.y, true);
	view.setFloat32(8+(i*24), obj.width, true);
	view.setFloat32(12+(i*24), obj.height, true);
	view.setFloat32(16+(i*24), obj.minDepth, true);
	view.setFloat32(20+(i*24), obj.maxDepth, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.x, true);
	view.setFloat32(4, obj.y, true);
	view.setFloat32(8, obj.width, true);
	view.setFloat32(12, obj.height, true);
	view.setFloat32(16, obj.minDepth, true);
	view.setFloat32(20, obj.maxDepth, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkViewport_from_C(ptr){
	const obj = {
		x: null,
		y: null,
		width: null,
		height: null,
		minDepth: null,
		maxDepth: null
	};
	return obj;
}


export function VkPipelineViewportStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineViewportStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.viewportCount, true);
	if (obj.pViewports){
		const wrapped = VkViewport_to_C(obj.pViewports, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*48), BigInt(obj.pViewports||0), true);
	}
	view.setUint32(32+(i*48), obj.scissorCount, true);
	if (obj.pScissors){
		const wrapped = VkRect2D_to_C(obj.pScissors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pScissors||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.viewportCount, true);
	if (obj.pViewports){
		const wrapped = VkViewport_to_C(obj.pViewports, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pViewports||0), true);
	}
	view.setUint32(32, obj.scissorCount, true);
	if (obj.pScissors){
		const wrapped = VkRect2D_to_C(obj.pScissors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pScissors||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		viewportCount: read.u32(ptr, 20),
		pViewports: VkViewport_from_C(read.ptr(ptr)),
		scissorCount: read.u32(ptr, 32),
		pScissors: VkRect2D_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPipelineRasterizationStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);
	view.setUint32(20+(i*64), obj.depthClampEnable, true);
	view.setUint32(24+(i*64), obj.rasterizerDiscardEnable, true);
	view.setUint32(28+(i*64), obj.polygonMode, true)
	view.setUint32(32+(i*64), obj.cullMode, true);
	view.setUint32(36+(i*64), obj.frontFace, true)
	view.setUint32(40+(i*64), obj.depthBiasEnable, true);
	view.setFloat32(44+(i*64), obj.depthBiasConstantFactor, true);
	view.setFloat32(48+(i*64), obj.depthBiasClamp, true);
	view.setFloat32(52+(i*64), obj.depthBiasSlopeFactor, true);
	view.setFloat32(56+(i*64), obj.lineWidth, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.depthClampEnable, true);
	view.setUint32(24, obj.rasterizerDiscardEnable, true);
	view.setUint32(28, obj.polygonMode, true)
	view.setUint32(32, obj.cullMode, true);
	view.setUint32(36, obj.frontFace, true)
	view.setUint32(40, obj.depthBiasEnable, true);
	view.setFloat32(44, obj.depthBiasConstantFactor, true);
	view.setFloat32(48, obj.depthBiasClamp, true);
	view.setFloat32(52, obj.depthBiasSlopeFactor, true);
	view.setFloat32(56, obj.lineWidth, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		depthClampEnable: read.u32(ptr, 20),
		rasterizerDiscardEnable: read.u32(ptr, 24),
		polygonMode: read.u32(ptr, 28),
		cullMode: read.u32(ptr, 32),
		frontFace: read.u32(ptr, 36),
		depthBiasEnable: read.u32(ptr, 40),
		depthBiasConstantFactor: null,
		depthBiasClamp: null,
		depthBiasSlopeFactor: null,
		lineWidth: null
	};
	return obj;
}


export function VkPipelineMultisampleStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineMultisampleStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.rasterizationSamples, true)
	view.setUint32(24+(i*48), obj.sampleShadingEnable, true);
	view.setFloat32(28+(i*48), obj.minSampleShading, true);

	view.setBigUint64(32+(i*48), BigInt(obj.pSampleMask||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.pSampleMask||0), true);

	view.setUint32(40+(i*48), obj.alphaToCoverageEnable, true);
	view.setUint32(44+(i*48), obj.alphaToOneEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.rasterizationSamples, true)
	view.setUint32(24, obj.sampleShadingEnable, true);
	view.setFloat32(28, obj.minSampleShading, true);

	view.setBigUint64(32, BigInt(obj.pSampleMask||0), true);
	view.setBigUint64(32, BigInt(obj.pSampleMask||0), true);

	view.setUint32(40, obj.alphaToCoverageEnable, true);
	view.setUint32(44, obj.alphaToOneEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineMultisampleStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		rasterizationSamples: read.u32(ptr, 20),
		sampleShadingEnable: read.u32(ptr, 24),
		minSampleShading: null,
		pSampleMask: undefined,
		alphaToCoverageEnable: read.u32(ptr, 40),
		alphaToOneEnable: read.u32(ptr, 44)
	};
	return obj;
}


export function VkStencilOpState_alloc_array(size){
	const buffer = new ArrayBuffer(28*size);
	return ptr(buffer);
}
export function VkStencilOpState_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(28*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*28), obj.failOp, true)
	view.setUint32(4+(i*28), obj.passOp, true)
	view.setUint32(8+(i*28), obj.depthFailOp, true)
	view.setUint32(12+(i*28), obj.compareOp, true)
	view.setUint32(16+(i*28), obj.compareMask, true);
	view.setUint32(20+(i*28), obj.writeMask, true);
	view.setUint32(24+(i*28), obj.reference, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(28);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.failOp, true)
	view.setUint32(4, obj.passOp, true)
	view.setUint32(8, obj.depthFailOp, true)
	view.setUint32(12, obj.compareOp, true)
	view.setUint32(16, obj.compareMask, true);
	view.setUint32(20, obj.writeMask, true);
	view.setUint32(24, obj.reference, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkStencilOpState_from_C(ptr){
	const obj = {
		failOp: read.u32(ptr, 0),
		passOp: read.u32(ptr, 4),
		depthFailOp: read.u32(ptr, 8),
		compareOp: read.u32(ptr, 12),
		compareMask: read.u32(ptr, 16),
		writeMask: read.u32(ptr, 20),
		reference: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPipelineDepthStencilStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(104*size);
	return ptr(buffer);
}
export function VkPipelineDepthStencilStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(104*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*104), obj.sType, true)

	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*104), obj.flags, true);
	view.setUint32(20+(i*104), obj.depthTestEnable, true);
	view.setUint32(24+(i*104), obj.depthWriteEnable, true);
	view.setUint32(28+(i*104), obj.depthCompareOp, true)
	view.setUint32(32+(i*104), obj.depthBoundsTestEnable, true);
	view.setUint32(36+(i*104), obj.stencilTestEnable, true);
	if (obj.front){
	view.setUint32(40+(i*104), obj.front.failOp, true)
	view.setUint32(44+(i*104), obj.front.passOp, true)
	view.setUint32(48+(i*104), obj.front.depthFailOp, true)
	view.setUint32(52+(i*104), obj.front.compareOp, true)
	view.setUint32(56+(i*104), obj.front.compareMask, true);
	view.setUint32(60+(i*104), obj.front.writeMask, true);
	view.setUint32(64+(i*104), obj.front.reference, true);
	}
	if (obj.back){
	view.setUint32(68+(i*104), obj.back.failOp, true)
	view.setUint32(72+(i*104), obj.back.passOp, true)
	view.setUint32(76+(i*104), obj.back.depthFailOp, true)
	view.setUint32(80+(i*104), obj.back.compareOp, true)
	view.setUint32(84+(i*104), obj.back.compareMask, true);
	view.setUint32(88+(i*104), obj.back.writeMask, true);
	view.setUint32(92+(i*104), obj.back.reference, true);
	}
	view.setFloat32(96+(i*104), obj.minDepthBounds, true);
	view.setFloat32(100+(i*104), obj.maxDepthBounds, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(104);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.depthTestEnable, true);
	view.setUint32(24, obj.depthWriteEnable, true);
	view.setUint32(28, obj.depthCompareOp, true)
	view.setUint32(32, obj.depthBoundsTestEnable, true);
	view.setUint32(36, obj.stencilTestEnable, true);
	if (obj.front){
	view.setUint32(40, obj.front.failOp, true)
	view.setUint32(44, obj.front.passOp, true)
	view.setUint32(48, obj.front.depthFailOp, true)
	view.setUint32(52, obj.front.compareOp, true)
	view.setUint32(56, obj.front.compareMask, true);
	view.setUint32(60, obj.front.writeMask, true);
	view.setUint32(64, obj.front.reference, true);
	}
	if (obj.back){
	view.setUint32(68, obj.back.failOp, true)
	view.setUint32(72, obj.back.passOp, true)
	view.setUint32(76, obj.back.depthFailOp, true)
	view.setUint32(80, obj.back.compareOp, true)
	view.setUint32(84, obj.back.compareMask, true);
	view.setUint32(88, obj.back.writeMask, true);
	view.setUint32(92, obj.back.reference, true);
	}
	view.setFloat32(96, obj.minDepthBounds, true);
	view.setFloat32(100, obj.maxDepthBounds, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineDepthStencilStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		depthTestEnable: read.u32(ptr, 20),
		depthWriteEnable: read.u32(ptr, 24),
		depthCompareOp: read.u32(ptr, 28),
		depthBoundsTestEnable: read.u32(ptr, 32),
		stencilTestEnable: read.u32(ptr, 36),
		front: null,
		back: null,
		minDepthBounds: null,
		maxDepthBounds: null
	};
	return obj;
}


export function VkPipelineColorBlendAttachmentState_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineColorBlendAttachmentState_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.blendEnable, true);
	view.setUint32(4+(i*32), obj.srcColorBlendFactor, true)
	view.setUint32(8+(i*32), obj.dstColorBlendFactor, true)
	view.setUint32(12+(i*32), obj.colorBlendOp, true)
	view.setUint32(16+(i*32), obj.srcAlphaBlendFactor, true)
	view.setUint32(20+(i*32), obj.dstAlphaBlendFactor, true)
	view.setUint32(24+(i*32), obj.alphaBlendOp, true)
	view.setUint32(28+(i*32), obj.colorWriteMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.blendEnable, true);
	view.setUint32(4, obj.srcColorBlendFactor, true)
	view.setUint32(8, obj.dstColorBlendFactor, true)
	view.setUint32(12, obj.colorBlendOp, true)
	view.setUint32(16, obj.srcAlphaBlendFactor, true)
	view.setUint32(20, obj.dstAlphaBlendFactor, true)
	view.setUint32(24, obj.alphaBlendOp, true)
	view.setUint32(28, obj.colorWriteMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineColorBlendAttachmentState_from_C(ptr){
	const obj = {
		blendEnable: read.u32(ptr, 0),
		srcColorBlendFactor: read.u32(ptr, 4),
		dstColorBlendFactor: read.u32(ptr, 8),
		colorBlendOp: read.u32(ptr, 12),
		srcAlphaBlendFactor: read.u32(ptr, 16),
		dstAlphaBlendFactor: read.u32(ptr, 20),
		alphaBlendOp: read.u32(ptr, 24),
		colorWriteMask: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPipelineColorBlendStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineColorBlendStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.logicOpEnable, true);
	view.setUint32(24+(i*48), obj.logicOp, true)
	view.setUint32(28+(i*48), obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkPipelineColorBlendAttachmentState_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*48), BigInt(obj.pAttachments||0), true);
	}

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.logicOpEnable, true);
	view.setUint32(24, obj.logicOp, true)
	view.setUint32(28, obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkPipelineColorBlendAttachmentState_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pAttachments||0), true);
	}

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineColorBlendStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		logicOpEnable: read.u32(ptr, 20),
		logicOp: read.u32(ptr, 24),
		attachmentCount: read.u32(ptr, 28),
		pAttachments: VkPipelineColorBlendAttachmentState_from_C(read.ptr(ptr)),
		blendConstants: null
	};
	return obj;
}


export function VkPipelineDynamicStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineDynamicStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.dynamicStateCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pDynamicStates||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pDynamicStates||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.dynamicStateCount, true);

	view.setBigUint64(24, BigInt(obj.pDynamicStates||0), true);
	view.setBigUint64(24, BigInt(obj.pDynamicStates||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineDynamicStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		dynamicStateCount: read.u32(ptr, 20),
		pDynamicStates: undefined
	};
	return obj;
}


export function VkGraphicsPipelineCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(144*size);
	return ptr(buffer);
}
export function VkGraphicsPipelineCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(144*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*144), obj.sType, true)

	view.setBigUint64(8+(i*144), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*144), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*144), obj.flags, true);
	view.setUint32(20+(i*144), obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*144), BigInt(obj.pStages||0), true);
	}
	if (obj.pVertexInputState){
		const wrapped = VkPipelineVertexInputStateCreateInfo_to_C(obj.pVertexInputState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*144), BigInt(obj.pVertexInputState||0), true);
	}
	if (obj.pInputAssemblyState){
		const wrapped = VkPipelineInputAssemblyStateCreateInfo_to_C(obj.pInputAssemblyState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*144), BigInt(obj.pInputAssemblyState||0), true);
	}
	if (obj.pTessellationState){
		const wrapped = VkPipelineTessellationStateCreateInfo_to_C(obj.pTessellationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*144), BigInt(obj.pTessellationState||0), true);
	}
	if (obj.pViewportState){
		const wrapped = VkPipelineViewportStateCreateInfo_to_C(obj.pViewportState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*144), BigInt(obj.pViewportState||0), true);
	}
	if (obj.pRasterizationState){
		const wrapped = VkPipelineRasterizationStateCreateInfo_to_C(obj.pRasterizationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*144), BigInt(obj.pRasterizationState||0), true);
	}
	if (obj.pMultisampleState){
		const wrapped = VkPipelineMultisampleStateCreateInfo_to_C(obj.pMultisampleState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72+(i*144), BigInt(obj.pMultisampleState||0), true);
	}
	if (obj.pDepthStencilState){
		const wrapped = VkPipelineDepthStencilStateCreateInfo_to_C(obj.pDepthStencilState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(80+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(80+(i*144), BigInt(obj.pDepthStencilState||0), true);
	}
	if (obj.pColorBlendState){
		const wrapped = VkPipelineColorBlendStateCreateInfo_to_C(obj.pColorBlendState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(88+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(88+(i*144), BigInt(obj.pColorBlendState||0), true);
	}
	if (obj.pDynamicState){
		const wrapped = VkPipelineDynamicStateCreateInfo_to_C(obj.pDynamicState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(96+(i*144), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(96+(i*144), BigInt(obj.pDynamicState||0), true);
	}

	view.setBigUint64(104+(i*144), BigInt(obj.layout||0), true);
	view.setBigUint64(104+(i*144), BigInt(obj.layout||0), true);


	view.setBigUint64(112+(i*144), BigInt(obj.renderPass||0), true);
	view.setBigUint64(112+(i*144), BigInt(obj.renderPass||0), true);

	view.setUint32(120+(i*144), obj.subpass, true);

	view.setBigUint64(128+(i*144), BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(128+(i*144), BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(136+(i*144), obj.basePipelineIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(144);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pStages||0), true);
	}
	if (obj.pVertexInputState){
		const wrapped = VkPipelineVertexInputStateCreateInfo_to_C(obj.pVertexInputState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pVertexInputState||0), true);
	}
	if (obj.pInputAssemblyState){
		const wrapped = VkPipelineInputAssemblyStateCreateInfo_to_C(obj.pInputAssemblyState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pInputAssemblyState||0), true);
	}
	if (obj.pTessellationState){
		const wrapped = VkPipelineTessellationStateCreateInfo_to_C(obj.pTessellationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pTessellationState||0), true);
	}
	if (obj.pViewportState){
		const wrapped = VkPipelineViewportStateCreateInfo_to_C(obj.pViewportState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pViewportState||0), true);
	}
	if (obj.pRasterizationState){
		const wrapped = VkPipelineRasterizationStateCreateInfo_to_C(obj.pRasterizationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.pRasterizationState||0), true);
	}
	if (obj.pMultisampleState){
		const wrapped = VkPipelineMultisampleStateCreateInfo_to_C(obj.pMultisampleState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72, BigInt(obj.pMultisampleState||0), true);
	}
	if (obj.pDepthStencilState){
		const wrapped = VkPipelineDepthStencilStateCreateInfo_to_C(obj.pDepthStencilState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(80, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(80, BigInt(obj.pDepthStencilState||0), true);
	}
	if (obj.pColorBlendState){
		const wrapped = VkPipelineColorBlendStateCreateInfo_to_C(obj.pColorBlendState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(88, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(88, BigInt(obj.pColorBlendState||0), true);
	}
	if (obj.pDynamicState){
		const wrapped = VkPipelineDynamicStateCreateInfo_to_C(obj.pDynamicState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(96, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(96, BigInt(obj.pDynamicState||0), true);
	}

	view.setBigUint64(104, BigInt(obj.layout||0), true);
	view.setBigUint64(104, BigInt(obj.layout||0), true);


	view.setBigUint64(112, BigInt(obj.renderPass||0), true);
	view.setBigUint64(112, BigInt(obj.renderPass||0), true);

	view.setUint32(120, obj.subpass, true);

	view.setBigUint64(128, BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(128, BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(136, obj.basePipelineIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGraphicsPipelineCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		stageCount: read.u32(ptr, 20),
		pStages: VkPipelineShaderStageCreateInfo_from_C(read.ptr(ptr)),
		pVertexInputState: VkPipelineVertexInputStateCreateInfo_from_C(read.ptr(ptr)),
		pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo_from_C(read.ptr(ptr)),
		pTessellationState: VkPipelineTessellationStateCreateInfo_from_C(read.ptr(ptr)),
		pViewportState: VkPipelineViewportStateCreateInfo_from_C(read.ptr(ptr)),
		pRasterizationState: VkPipelineRasterizationStateCreateInfo_from_C(read.ptr(ptr)),
		pMultisampleState: VkPipelineMultisampleStateCreateInfo_from_C(read.ptr(ptr)),
		pDepthStencilState: VkPipelineDepthStencilStateCreateInfo_from_C(read.ptr(ptr)),
		pColorBlendState: VkPipelineColorBlendStateCreateInfo_from_C(read.ptr(ptr)),
		pDynamicState: VkPipelineDynamicStateCreateInfo_from_C(read.ptr(ptr)),
		layout: undefined,
		renderPass: undefined,
		subpass: read.u32(ptr, 120),
		basePipelineHandle: undefined,
		basePipelineIndex: null
	};
	return obj;
}


export function VkPushConstantRange_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkPushConstantRange_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.stageFlags, true);
	view.setUint32(4+(i*12), obj.offset, true);
	view.setUint32(8+(i*12), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.stageFlags, true);
	view.setUint32(4, obj.offset, true);
	view.setUint32(8, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPushConstantRange_from_C(ptr){
	const obj = {
		stageFlags: read.u32(ptr, 0),
		offset: read.u32(ptr, 4),
		size: read.u32(ptr, 8)
	};
	return obj;
}


export function VkPipelineLayoutCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineLayoutCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.setLayoutCount, true);

	view.setBigUint64(24+(i*48), BigInt(obj.pSetLayouts||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pSetLayouts||0), true);

	view.setUint32(32+(i*48), obj.pushConstantRangeCount, true);
	if (obj.pPushConstantRanges){
		const wrapped = VkPushConstantRange_to_C(obj.pPushConstantRanges, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pPushConstantRanges||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.setLayoutCount, true);

	view.setBigUint64(24, BigInt(obj.pSetLayouts||0), true);
	view.setBigUint64(24, BigInt(obj.pSetLayouts||0), true);

	view.setUint32(32, obj.pushConstantRangeCount, true);
	if (obj.pPushConstantRanges){
		const wrapped = VkPushConstantRange_to_C(obj.pPushConstantRanges, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pPushConstantRanges||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineLayoutCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		setLayoutCount: read.u32(ptr, 20),
		pSetLayouts: read.ptr(ptr),
		pushConstantRangeCount: read.u32(ptr, 32),
		pPushConstantRanges: VkPushConstantRange_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkSamplerCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkSamplerCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.flags, true);
	view.setUint32(20+(i*80), obj.magFilter, true)
	view.setUint32(24+(i*80), obj.minFilter, true)
	view.setUint32(28+(i*80), obj.mipmapMode, true)
	view.setUint32(32+(i*80), obj.addressModeU, true)
	view.setUint32(36+(i*80), obj.addressModeV, true)
	view.setUint32(40+(i*80), obj.addressModeW, true)
	view.setFloat32(44+(i*80), obj.mipLodBias, true);
	view.setUint32(48+(i*80), obj.anisotropyEnable, true);
	view.setFloat32(52+(i*80), obj.maxAnisotropy, true);
	view.setUint32(56+(i*80), obj.compareEnable, true);
	view.setUint32(60+(i*80), obj.compareOp, true)
	view.setFloat32(64+(i*80), obj.minLod, true);
	view.setFloat32(68+(i*80), obj.maxLod, true);
	view.setUint32(72+(i*80), obj.borderColor, true)
	view.setUint32(76+(i*80), obj.unnormalizedCoordinates, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.magFilter, true)
	view.setUint32(24, obj.minFilter, true)
	view.setUint32(28, obj.mipmapMode, true)
	view.setUint32(32, obj.addressModeU, true)
	view.setUint32(36, obj.addressModeV, true)
	view.setUint32(40, obj.addressModeW, true)
	view.setFloat32(44, obj.mipLodBias, true);
	view.setUint32(48, obj.anisotropyEnable, true);
	view.setFloat32(52, obj.maxAnisotropy, true);
	view.setUint32(56, obj.compareEnable, true);
	view.setUint32(60, obj.compareOp, true)
	view.setFloat32(64, obj.minLod, true);
	view.setFloat32(68, obj.maxLod, true);
	view.setUint32(72, obj.borderColor, true)
	view.setUint32(76, obj.unnormalizedCoordinates, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		magFilter: read.u32(ptr, 20),
		minFilter: read.u32(ptr, 24),
		mipmapMode: read.u32(ptr, 28),
		addressModeU: read.u32(ptr, 32),
		addressModeV: read.u32(ptr, 36),
		addressModeW: read.u32(ptr, 40),
		mipLodBias: null,
		anisotropyEnable: read.u32(ptr, 48),
		maxAnisotropy: null,
		compareEnable: read.u32(ptr, 56),
		compareOp: read.u32(ptr, 60),
		minLod: null,
		maxLod: null,
		borderColor: read.u32(ptr, 72),
		unnormalizedCoordinates: read.u32(ptr, 76)
	};
	return obj;
}


export function VkCopyDescriptorSet_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkCopyDescriptorSet_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.srcSet||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.srcSet||0), true);

	view.setUint32(24+(i*56), obj.srcBinding, true);
	view.setUint32(28+(i*56), obj.srcArrayElement, true);

	view.setBigUint64(32+(i*56), BigInt(obj.dstSet||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.dstSet||0), true);

	view.setUint32(40+(i*56), obj.dstBinding, true);
	view.setUint32(44+(i*56), obj.dstArrayElement, true);
	view.setUint32(48+(i*56), obj.descriptorCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcSet||0), true);
	view.setBigUint64(16, BigInt(obj.srcSet||0), true);

	view.setUint32(24, obj.srcBinding, true);
	view.setUint32(28, obj.srcArrayElement, true);

	view.setBigUint64(32, BigInt(obj.dstSet||0), true);
	view.setBigUint64(32, BigInt(obj.dstSet||0), true);

	view.setUint32(40, obj.dstBinding, true);
	view.setUint32(44, obj.dstArrayElement, true);
	view.setUint32(48, obj.descriptorCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyDescriptorSet_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcSet: undefined,
		srcBinding: read.u32(ptr, 24),
		srcArrayElement: read.u32(ptr, 28),
		dstSet: undefined,
		dstBinding: read.u32(ptr, 40),
		dstArrayElement: read.u32(ptr, 44),
		descriptorCount: read.u32(ptr, 48)
	};
	return obj;
}


export function VkDescriptorBufferInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorBufferInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.buffer||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.buffer||0), true);

	view.setUint64(8+(i*24), obj.offset, true);
	view.setUint64(16+(i*24), obj.range, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.buffer||0), true);
	view.setBigUint64(0, BigInt(obj.buffer||0), true);

	view.setUint64(8, obj.offset, true);
	view.setUint64(16, obj.range, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorBufferInfo_from_C(ptr){
	const obj = {
		buffer: undefined,
		offset: null,
		range: null
	};
	return obj;
}


export function VkDescriptorImageInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorImageInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.sampler||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.sampler||0), true);


	view.setBigUint64(8+(i*24), BigInt(obj.imageView||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.imageView||0), true);

	view.setUint32(16+(i*24), obj.imageLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.sampler||0), true);
	view.setBigUint64(0, BigInt(obj.sampler||0), true);


	view.setBigUint64(8, BigInt(obj.imageView||0), true);
	view.setBigUint64(8, BigInt(obj.imageView||0), true);

	view.setUint32(16, obj.imageLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorImageInfo_from_C(ptr){
	const obj = {
		sampler: undefined,
		imageView: undefined,
		imageLayout: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDescriptorPoolSize_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkDescriptorPoolSize_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.type, true)
	view.setUint32(4+(i*8), obj.descriptorCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.type, true)
	view.setUint32(4, obj.descriptorCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorPoolSize_from_C(ptr){
	const obj = {
		type: read.u32(ptr, 0),
		descriptorCount: read.u32(ptr, 4)
	};
	return obj;
}


export function VkDescriptorPoolCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDescriptorPoolCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	view.setUint32(20+(i*40), obj.maxSets, true);
	view.setUint32(24+(i*40), obj.poolSizeCount, true);
	if (obj.pPoolSizes){
		const wrapped = VkDescriptorPoolSize_to_C(obj.pPoolSizes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pPoolSizes||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.maxSets, true);
	view.setUint32(24, obj.poolSizeCount, true);
	if (obj.pPoolSizes){
		const wrapped = VkDescriptorPoolSize_to_C(obj.pPoolSizes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pPoolSizes||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorPoolCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		maxSets: read.u32(ptr, 20),
		poolSizeCount: read.u32(ptr, 24),
		pPoolSizes: VkDescriptorPoolSize_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkDescriptorSetAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDescriptorSetAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.descriptorPool||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.descriptorPool||0), true);

	view.setUint32(24+(i*40), obj.descriptorSetCount, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pSetLayouts||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pSetLayouts||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.descriptorPool||0), true);
	view.setBigUint64(16, BigInt(obj.descriptorPool||0), true);

	view.setUint32(24, obj.descriptorSetCount, true);

	view.setBigUint64(32, BigInt(obj.pSetLayouts||0), true);
	view.setBigUint64(32, BigInt(obj.pSetLayouts||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		descriptorPool: undefined,
		descriptorSetCount: read.u32(ptr, 24),
		pSetLayouts: read.ptr(ptr)
	};
	return obj;
}


export function VkDescriptorSetLayoutBinding_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorSetLayoutBinding_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.binding, true);
	view.setUint32(4+(i*24), obj.descriptorType, true)
	view.setUint32(8+(i*24), obj.descriptorCount, true);
	view.setUint32(12+(i*24), obj.stageFlags, true);

	view.setBigUint64(16+(i*24), BigInt(obj.pImmutableSamplers||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.pImmutableSamplers||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.binding, true);
	view.setUint32(4, obj.descriptorType, true)
	view.setUint32(8, obj.descriptorCount, true);
	view.setUint32(12, obj.stageFlags, true);

	view.setBigUint64(16, BigInt(obj.pImmutableSamplers||0), true);
	view.setBigUint64(16, BigInt(obj.pImmutableSamplers||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetLayoutBinding_from_C(ptr){
	const obj = {
		binding: read.u32(ptr, 0),
		descriptorType: read.u32(ptr, 4),
		descriptorCount: read.u32(ptr, 8),
		stageFlags: read.u32(ptr, 12),
		pImmutableSamplers: read.ptr(ptr)
	};
	return obj;
}


export function VkDescriptorSetLayoutCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorSetLayoutCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.bindingCount, true);
	if (obj.pBindings){
		const wrapped = VkDescriptorSetLayoutBinding_to_C(obj.pBindings, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pBindings||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.bindingCount, true);
	if (obj.pBindings){
		const wrapped = VkDescriptorSetLayoutBinding_to_C(obj.pBindings, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pBindings||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetLayoutCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		bindingCount: read.u32(ptr, 20),
		pBindings: VkDescriptorSetLayoutBinding_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkWriteDescriptorSet_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkWriteDescriptorSet_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*64), BigInt(obj.dstSet||0), true);
	view.setBigUint64(16+(i*64), BigInt(obj.dstSet||0), true);

	view.setUint32(24+(i*64), obj.dstBinding, true);
	view.setUint32(28+(i*64), obj.dstArrayElement, true);
	view.setUint32(32+(i*64), obj.descriptorCount, true);
	view.setUint32(36+(i*64), obj.descriptorType, true)
	if (obj.pImageInfo){
		const wrapped = VkDescriptorImageInfo_to_C(obj.pImageInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*64), BigInt(obj.pImageInfo||0), true);
	}
	if (obj.pBufferInfo){
		const wrapped = VkDescriptorBufferInfo_to_C(obj.pBufferInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*64), BigInt(obj.pBufferInfo||0), true);
	}

	view.setBigUint64(56+(i*64), BigInt(obj.pTexelBufferView||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.pTexelBufferView||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.dstSet||0), true);
	view.setBigUint64(16, BigInt(obj.dstSet||0), true);

	view.setUint32(24, obj.dstBinding, true);
	view.setUint32(28, obj.dstArrayElement, true);
	view.setUint32(32, obj.descriptorCount, true);
	view.setUint32(36, obj.descriptorType, true)
	if (obj.pImageInfo){
		const wrapped = VkDescriptorImageInfo_to_C(obj.pImageInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pImageInfo||0), true);
	}
	if (obj.pBufferInfo){
		const wrapped = VkDescriptorBufferInfo_to_C(obj.pBufferInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pBufferInfo||0), true);
	}

	view.setBigUint64(56, BigInt(obj.pTexelBufferView||0), true);
	view.setBigUint64(56, BigInt(obj.pTexelBufferView||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkWriteDescriptorSet_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dstSet: undefined,
		dstBinding: read.u32(ptr, 24),
		dstArrayElement: read.u32(ptr, 28),
		descriptorCount: read.u32(ptr, 32),
		descriptorType: read.u32(ptr, 36),
		pImageInfo: VkDescriptorImageInfo_from_C(read.ptr(ptr)),
		pBufferInfo: VkDescriptorBufferInfo_from_C(read.ptr(ptr)),
		pTexelBufferView: read.ptr(ptr)
	};
	return obj;
}


export function VkAttachmentDescription_alloc_array(size){
	const buffer = new ArrayBuffer(36*size);
	return ptr(buffer);
}
export function VkAttachmentDescription_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(36*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*36), obj.flags, true);
	view.setUint32(4+(i*36), obj.format, true)
	view.setUint32(8+(i*36), obj.samples, true)
	view.setUint32(12+(i*36), obj.loadOp, true)
	view.setUint32(16+(i*36), obj.storeOp, true)
	view.setUint32(20+(i*36), obj.stencilLoadOp, true)
	view.setUint32(24+(i*36), obj.stencilStoreOp, true)
	view.setUint32(28+(i*36), obj.initialLayout, true)
	view.setUint32(32+(i*36), obj.finalLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(36);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.flags, true);
	view.setUint32(4, obj.format, true)
	view.setUint32(8, obj.samples, true)
	view.setUint32(12, obj.loadOp, true)
	view.setUint32(16, obj.storeOp, true)
	view.setUint32(20, obj.stencilLoadOp, true)
	view.setUint32(24, obj.stencilStoreOp, true)
	view.setUint32(28, obj.initialLayout, true)
	view.setUint32(32, obj.finalLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentDescription_from_C(ptr){
	const obj = {
		flags: read.u32(ptr, 0),
		format: read.u32(ptr, 4),
		samples: read.u32(ptr, 8),
		loadOp: read.u32(ptr, 12),
		storeOp: read.u32(ptr, 16),
		stencilLoadOp: read.u32(ptr, 20),
		stencilStoreOp: read.u32(ptr, 24),
		initialLayout: read.u32(ptr, 28),
		finalLayout: read.u32(ptr, 32)
	};
	return obj;
}


export function VkAttachmentReference_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkAttachmentReference_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.attachment, true);
	view.setUint32(4+(i*8), obj.layout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.attachment, true);
	view.setUint32(4, obj.layout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentReference_from_C(ptr){
	const obj = {
		attachment: read.u32(ptr, 0),
		layout: read.u32(ptr, 4)
	};
	return obj;
}


export function VkFramebufferCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkFramebufferCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);

	view.setBigUint64(24+(i*64), BigInt(obj.renderPass||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.renderPass||0), true);

	view.setUint32(32+(i*64), obj.attachmentCount, true);

	view.setBigUint64(40+(i*64), BigInt(obj.pAttachments||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.pAttachments||0), true);

	view.setUint32(48+(i*64), obj.width, true);
	view.setUint32(52+(i*64), obj.height, true);
	view.setUint32(56+(i*64), obj.layers, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.renderPass||0), true);
	view.setBigUint64(24, BigInt(obj.renderPass||0), true);

	view.setUint32(32, obj.attachmentCount, true);

	view.setBigUint64(40, BigInt(obj.pAttachments||0), true);
	view.setBigUint64(40, BigInt(obj.pAttachments||0), true);

	view.setUint32(48, obj.width, true);
	view.setUint32(52, obj.height, true);
	view.setUint32(56, obj.layers, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFramebufferCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		renderPass: undefined,
		attachmentCount: read.u32(ptr, 32),
		pAttachments: read.ptr(ptr),
		width: read.u32(ptr, 48),
		height: read.u32(ptr, 52),
		layers: read.u32(ptr, 56)
	};
	return obj;
}


export function VkSubpassDescription_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkSubpassDescription_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.flags, true);
	view.setUint32(4+(i*72), obj.pipelineBindPoint, true)
	view.setUint32(8+(i*72), obj.inputAttachmentCount, true);
	if (obj.pInputAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pInputAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*72), BigInt(obj.pInputAttachments||0), true);
	}
	view.setUint32(24+(i*72), obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*72), BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pResolveAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pResolveAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*72), BigInt(obj.pResolveAttachments||0), true);
	}
	if (obj.pDepthStencilAttachment){
		const wrapped = VkAttachmentReference_to_C(obj.pDepthStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*72), BigInt(obj.pDepthStencilAttachment||0), true);
	}
	view.setUint32(56+(i*72), obj.preserveAttachmentCount, true);

	view.setBigUint64(64+(i*72), BigInt(obj.pPreserveAttachments||0), true);
	view.setBigUint64(64+(i*72), BigInt(obj.pPreserveAttachments||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.flags, true);
	view.setUint32(4, obj.pipelineBindPoint, true)
	view.setUint32(8, obj.inputAttachmentCount, true);
	if (obj.pInputAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pInputAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pInputAttachments||0), true);
	}
	view.setUint32(24, obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pResolveAttachments){
		const wrapped = VkAttachmentReference_to_C(obj.pResolveAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pResolveAttachments||0), true);
	}
	if (obj.pDepthStencilAttachment){
		const wrapped = VkAttachmentReference_to_C(obj.pDepthStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pDepthStencilAttachment||0), true);
	}
	view.setUint32(56, obj.preserveAttachmentCount, true);

	view.setBigUint64(64, BigInt(obj.pPreserveAttachments||0), true);
	view.setBigUint64(64, BigInt(obj.pPreserveAttachments||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassDescription_from_C(ptr){
	const obj = {
		flags: read.u32(ptr, 0),
		pipelineBindPoint: read.u32(ptr, 4),
		inputAttachmentCount: read.u32(ptr, 8),
		pInputAttachments: VkAttachmentReference_from_C(read.ptr(ptr)),
		colorAttachmentCount: read.u32(ptr, 24),
		pColorAttachments: VkAttachmentReference_from_C(read.ptr(ptr)),
		pResolveAttachments: VkAttachmentReference_from_C(read.ptr(ptr)),
		pDepthStencilAttachment: VkAttachmentReference_from_C(read.ptr(ptr)),
		preserveAttachmentCount: read.u32(ptr, 56),
		pPreserveAttachments: undefined
	};
	return obj;
}


export function VkSubpassDependency_alloc_array(size){
	const buffer = new ArrayBuffer(28*size);
	return ptr(buffer);
}
export function VkSubpassDependency_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(28*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*28), obj.srcSubpass, true);
	view.setUint32(4+(i*28), obj.dstSubpass, true);
	view.setUint32(8+(i*28), obj.srcStageMask, true);
	view.setUint32(12+(i*28), obj.dstStageMask, true);
	view.setUint32(16+(i*28), obj.srcAccessMask, true);
	view.setUint32(20+(i*28), obj.dstAccessMask, true);
	view.setUint32(24+(i*28), obj.dependencyFlags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(28);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.srcSubpass, true);
	view.setUint32(4, obj.dstSubpass, true);
	view.setUint32(8, obj.srcStageMask, true);
	view.setUint32(12, obj.dstStageMask, true);
	view.setUint32(16, obj.srcAccessMask, true);
	view.setUint32(20, obj.dstAccessMask, true);
	view.setUint32(24, obj.dependencyFlags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassDependency_from_C(ptr){
	const obj = {
		srcSubpass: read.u32(ptr, 0),
		dstSubpass: read.u32(ptr, 4),
		srcStageMask: read.u32(ptr, 8),
		dstStageMask: read.u32(ptr, 12),
		srcAccessMask: read.u32(ptr, 16),
		dstAccessMask: read.u32(ptr, 20),
		dependencyFlags: read.u32(ptr, 24)
	};
	return obj;
}


export function VkRenderPassCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkRenderPassCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);
	view.setUint32(20+(i*64), obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkAttachmentDescription_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*64), BigInt(obj.pAttachments||0), true);
	}
	view.setUint32(32+(i*64), obj.subpassCount, true);
	if (obj.pSubpasses){
		const wrapped = VkSubpassDescription_to_C(obj.pSubpasses, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*64), BigInt(obj.pSubpasses||0), true);
	}
	view.setUint32(48+(i*64), obj.dependencyCount, true);
	if (obj.pDependencies){
		const wrapped = VkSubpassDependency_to_C(obj.pDependencies, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*64), BigInt(obj.pDependencies||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkAttachmentDescription_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pAttachments||0), true);
	}
	view.setUint32(32, obj.subpassCount, true);
	if (obj.pSubpasses){
		const wrapped = VkSubpassDescription_to_C(obj.pSubpasses, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pSubpasses||0), true);
	}
	view.setUint32(48, obj.dependencyCount, true);
	if (obj.pDependencies){
		const wrapped = VkSubpassDependency_to_C(obj.pDependencies, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pDependencies||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		attachmentCount: read.u32(ptr, 20),
		pAttachments: VkAttachmentDescription_from_C(read.ptr(ptr)),
		subpassCount: read.u32(ptr, 32),
		pSubpasses: VkSubpassDescription_from_C(read.ptr(ptr)),
		dependencyCount: read.u32(ptr, 48),
		pDependencies: VkSubpassDependency_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkCommandPoolCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkCommandPoolCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.queueFamilyIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.queueFamilyIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandPoolCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		queueFamilyIndex: read.u32(ptr, 20)
	};
	return obj;
}


export function VkCommandBufferAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCommandBufferAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.commandPool||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.commandPool||0), true);

	view.setUint32(24+(i*32), obj.level, true)
	view.setUint32(28+(i*32), obj.commandBufferCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.commandPool||0), true);
	view.setBigUint64(16, BigInt(obj.commandPool||0), true);

	view.setUint32(24, obj.level, true)
	view.setUint32(28, obj.commandBufferCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		commandPool: undefined,
		level: read.u32(ptr, 24),
		commandBufferCount: read.u32(ptr, 28)
	};
	return obj;
}


export function VkCommandBufferInheritanceInfo_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkCommandBufferInheritanceInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.renderPass||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.renderPass||0), true);

	view.setUint32(24+(i*56), obj.subpass, true);

	view.setBigUint64(32+(i*56), BigInt(obj.framebuffer||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.framebuffer||0), true);

	view.setUint32(40+(i*56), obj.occlusionQueryEnable, true);
	view.setUint32(44+(i*56), obj.queryFlags, true);
	view.setUint32(48+(i*56), obj.pipelineStatistics, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.renderPass||0), true);
	view.setBigUint64(16, BigInt(obj.renderPass||0), true);

	view.setUint32(24, obj.subpass, true);

	view.setBigUint64(32, BigInt(obj.framebuffer||0), true);
	view.setBigUint64(32, BigInt(obj.framebuffer||0), true);

	view.setUint32(40, obj.occlusionQueryEnable, true);
	view.setUint32(44, obj.queryFlags, true);
	view.setUint32(48, obj.pipelineStatistics, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferInheritanceInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		renderPass: undefined,
		subpass: read.u32(ptr, 24),
		framebuffer: undefined,
		occlusionQueryEnable: read.u32(ptr, 40),
		queryFlags: read.u32(ptr, 44),
		pipelineStatistics: read.u32(ptr, 48)
	};
	return obj;
}


export function VkCommandBufferBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCommandBufferBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	if (obj.pInheritanceInfo){
		const wrapped = VkCommandBufferInheritanceInfo_to_C(obj.pInheritanceInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pInheritanceInfo||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	if (obj.pInheritanceInfo){
		const wrapped = VkCommandBufferInheritanceInfo_to_C(obj.pInheritanceInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pInheritanceInfo||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pInheritanceInfo: VkCommandBufferInheritanceInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkBufferCopy_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBufferCopy_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*24), obj.srcOffset, true);
	view.setUint64(8+(i*24), obj.dstOffset, true);
	view.setUint64(16+(i*24), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.srcOffset, true);
	view.setUint64(8, obj.dstOffset, true);
	view.setUint64(16, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferCopy_from_C(ptr){
	const obj = {
		srcOffset: null,
		dstOffset: null,
		size: null
	};
	return obj;
}


export function VkImageSubresourceLayers_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkImageSubresourceLayers_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.aspectMask, true);
	view.setUint32(4+(i*16), obj.mipLevel, true);
	view.setUint32(8+(i*16), obj.baseArrayLayer, true);
	view.setUint32(12+(i*16), obj.layerCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.aspectMask, true);
	view.setUint32(4, obj.mipLevel, true);
	view.setUint32(8, obj.baseArrayLayer, true);
	view.setUint32(12, obj.layerCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSubresourceLayers_from_C(ptr){
	const obj = {
		aspectMask: read.u32(ptr, 0),
		mipLevel: read.u32(ptr, 4),
		baseArrayLayer: read.u32(ptr, 8),
		layerCount: read.u32(ptr, 12)
	};
	return obj;
}


export function VkBufferImageCopy_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkBufferImageCopy_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*56), obj.bufferOffset, true);
	view.setUint32(8+(i*56), obj.bufferRowLength, true);
	view.setUint32(12+(i*56), obj.bufferImageHeight, true);
	if (obj.imageSubresource){
	view.setUint32(16+(i*56), obj.imageSubresource.aspectMask, true);
	view.setUint32(20+(i*56), obj.imageSubresource.mipLevel, true);
	view.setUint32(24+(i*56), obj.imageSubresource.baseArrayLayer, true);
	view.setUint32(28+(i*56), obj.imageSubresource.layerCount, true);
	}
	if (obj.imageOffset){
	view.setInt32(32+(i*56), obj.imageOffset.x, true);
	view.setInt32(36+(i*56), obj.imageOffset.y, true);
	view.setInt32(40+(i*56), obj.imageOffset.z, true);
	}
	if (obj.imageExtent){
	view.setUint32(44+(i*56), obj.imageExtent.width, true);
	view.setUint32(48+(i*56), obj.imageExtent.height, true);
	view.setUint32(52+(i*56), obj.imageExtent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.bufferOffset, true);
	view.setUint32(8, obj.bufferRowLength, true);
	view.setUint32(12, obj.bufferImageHeight, true);
	if (obj.imageSubresource){
	view.setUint32(16, obj.imageSubresource.aspectMask, true);
	view.setUint32(20, obj.imageSubresource.mipLevel, true);
	view.setUint32(24, obj.imageSubresource.baseArrayLayer, true);
	view.setUint32(28, obj.imageSubresource.layerCount, true);
	}
	if (obj.imageOffset){
	view.setInt32(32, obj.imageOffset.x, true);
	view.setInt32(36, obj.imageOffset.y, true);
	view.setInt32(40, obj.imageOffset.z, true);
	}
	if (obj.imageExtent){
	view.setUint32(44, obj.imageExtent.width, true);
	view.setUint32(48, obj.imageExtent.height, true);
	view.setUint32(52, obj.imageExtent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferImageCopy_from_C(ptr){
	const obj = {
		bufferOffset: null,
		bufferRowLength: read.u32(ptr, 8),
		bufferImageHeight: read.u32(ptr, 12),
		imageSubresource: null,
		imageOffset: null,
		imageExtent: null
	};
	return obj;
}


export function VkClearDepthStencilValue_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkClearDepthStencilValue_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*8), obj.depth, true);
	view.setUint32(4+(i*8), obj.stencil, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.depth, true);
	view.setUint32(4, obj.stencil, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkClearDepthStencilValue_from_C(ptr){
	const obj = {
		depth: null,
		stencil: read.u32(ptr, 4)
	};
	return obj;
}


export function VkClearAttachment_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkClearAttachment_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.aspectMask, true);
	view.setUint32(4+(i*16), obj.colorAttachment, true);

	view.setBigUint64(8+(i*16), BigInt(obj.clearValue||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.clearValue||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.aspectMask, true);
	view.setUint32(4, obj.colorAttachment, true);

	view.setBigUint64(8, BigInt(obj.clearValue||0), true);
	view.setBigUint64(8, BigInt(obj.clearValue||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkClearAttachment_from_C(ptr){
	const obj = {
		aspectMask: read.u32(ptr, 0),
		colorAttachment: read.u32(ptr, 4),
		clearValue: undefined
	};
	return obj;
}


export function VkClearRect_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkClearRect_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.rect){
	if (obj.rect.offset){
	view.setInt32(0+(i*24), obj.rect.offset.x, true);
	view.setInt32(4+(i*24), obj.rect.offset.y, true);
	}
	if (obj.rect.extent){
	view.setUint32(8+(i*24), obj.rect.extent.width, true);
	view.setUint32(12+(i*24), obj.rect.extent.height, true);
	}
	}
	view.setUint32(16+(i*24), obj.baseArrayLayer, true);
	view.setUint32(20+(i*24), obj.layerCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.rect){
	if (obj.rect.offset){
	view.setInt32(0, obj.rect.offset.x, true);
	view.setInt32(4, obj.rect.offset.y, true);
	}
	if (obj.rect.extent){
	view.setUint32(8, obj.rect.extent.width, true);
	view.setUint32(12, obj.rect.extent.height, true);
	}
	}
	view.setUint32(16, obj.baseArrayLayer, true);
	view.setUint32(20, obj.layerCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkClearRect_from_C(ptr){
	const obj = {
		rect: null,
		baseArrayLayer: read.u32(ptr, 16),
		layerCount: read.u32(ptr, 20)
	};
	return obj;
}


export function VkImageBlit_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkImageBlit_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.srcSubresource){
	view.setUint32(0+(i*72), obj.srcSubresource.aspectMask, true);
	view.setUint32(4+(i*72), obj.srcSubresource.mipLevel, true);
	view.setUint32(8+(i*72), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12+(i*72), obj.srcSubresource.layerCount, true);
	}

	if (obj.dstSubresource){
	view.setUint32(36+(i*72), obj.dstSubresource.aspectMask, true);
	view.setUint32(40+(i*72), obj.dstSubresource.mipLevel, true);
	view.setUint32(44+(i*72), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(48+(i*72), obj.dstSubresource.layerCount, true);
	}

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.srcSubresource){
	view.setUint32(0, obj.srcSubresource.aspectMask, true);
	view.setUint32(4, obj.srcSubresource.mipLevel, true);
	view.setUint32(8, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12, obj.srcSubresource.layerCount, true);
	}

	if (obj.dstSubresource){
	view.setUint32(36, obj.dstSubresource.aspectMask, true);
	view.setUint32(40, obj.dstSubresource.mipLevel, true);
	view.setUint32(44, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(48, obj.dstSubresource.layerCount, true);
	}

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageBlit_from_C(ptr){
	const obj = {
		srcSubresource: null,
		srcOffsets: null,
		dstSubresource: null,
		dstOffsets: null
	};
	return obj;
}


export function VkImageCopy_alloc_array(size){
	const buffer = new ArrayBuffer(68*size);
	return ptr(buffer);
}
export function VkImageCopy_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(68*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.srcSubresource){
	view.setUint32(0+(i*68), obj.srcSubresource.aspectMask, true);
	view.setUint32(4+(i*68), obj.srcSubresource.mipLevel, true);
	view.setUint32(8+(i*68), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12+(i*68), obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(16+(i*68), obj.srcOffset.x, true);
	view.setInt32(20+(i*68), obj.srcOffset.y, true);
	view.setInt32(24+(i*68), obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(28+(i*68), obj.dstSubresource.aspectMask, true);
	view.setUint32(32+(i*68), obj.dstSubresource.mipLevel, true);
	view.setUint32(36+(i*68), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(40+(i*68), obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(44+(i*68), obj.dstOffset.x, true);
	view.setInt32(48+(i*68), obj.dstOffset.y, true);
	view.setInt32(52+(i*68), obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(56+(i*68), obj.extent.width, true);
	view.setUint32(60+(i*68), obj.extent.height, true);
	view.setUint32(64+(i*68), obj.extent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(68);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.srcSubresource){
	view.setUint32(0, obj.srcSubresource.aspectMask, true);
	view.setUint32(4, obj.srcSubresource.mipLevel, true);
	view.setUint32(8, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12, obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(16, obj.srcOffset.x, true);
	view.setInt32(20, obj.srcOffset.y, true);
	view.setInt32(24, obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(28, obj.dstSubresource.aspectMask, true);
	view.setUint32(32, obj.dstSubresource.mipLevel, true);
	view.setUint32(36, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(40, obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(44, obj.dstOffset.x, true);
	view.setInt32(48, obj.dstOffset.y, true);
	view.setInt32(52, obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(56, obj.extent.width, true);
	view.setUint32(60, obj.extent.height, true);
	view.setUint32(64, obj.extent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageCopy_from_C(ptr){
	const obj = {
		srcSubresource: null,
		srcOffset: null,
		dstSubresource: null,
		dstOffset: null,
		extent: null
	};
	return obj;
}


export function VkImageResolve_alloc_array(size){
	const buffer = new ArrayBuffer(68*size);
	return ptr(buffer);
}
export function VkImageResolve_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(68*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.srcSubresource){
	view.setUint32(0+(i*68), obj.srcSubresource.aspectMask, true);
	view.setUint32(4+(i*68), obj.srcSubresource.mipLevel, true);
	view.setUint32(8+(i*68), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12+(i*68), obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(16+(i*68), obj.srcOffset.x, true);
	view.setInt32(20+(i*68), obj.srcOffset.y, true);
	view.setInt32(24+(i*68), obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(28+(i*68), obj.dstSubresource.aspectMask, true);
	view.setUint32(32+(i*68), obj.dstSubresource.mipLevel, true);
	view.setUint32(36+(i*68), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(40+(i*68), obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(44+(i*68), obj.dstOffset.x, true);
	view.setInt32(48+(i*68), obj.dstOffset.y, true);
	view.setInt32(52+(i*68), obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(56+(i*68), obj.extent.width, true);
	view.setUint32(60+(i*68), obj.extent.height, true);
	view.setUint32(64+(i*68), obj.extent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(68);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.srcSubresource){
	view.setUint32(0, obj.srcSubresource.aspectMask, true);
	view.setUint32(4, obj.srcSubresource.mipLevel, true);
	view.setUint32(8, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(12, obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(16, obj.srcOffset.x, true);
	view.setInt32(20, obj.srcOffset.y, true);
	view.setInt32(24, obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(28, obj.dstSubresource.aspectMask, true);
	view.setUint32(32, obj.dstSubresource.mipLevel, true);
	view.setUint32(36, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(40, obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(44, obj.dstOffset.x, true);
	view.setInt32(48, obj.dstOffset.y, true);
	view.setInt32(52, obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(56, obj.extent.width, true);
	view.setUint32(60, obj.extent.height, true);
	view.setUint32(64, obj.extent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageResolve_from_C(ptr){
	const obj = {
		srcSubresource: null,
		srcOffset: null,
		dstSubresource: null,
		dstOffset: null,
		extent: null
	};
	return obj;
}


export function VkRenderPassBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkRenderPassBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*64), BigInt(obj.renderPass||0), true);
	view.setBigUint64(16+(i*64), BigInt(obj.renderPass||0), true);


	view.setBigUint64(24+(i*64), BigInt(obj.framebuffer||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.framebuffer||0), true);

	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(32+(i*64), obj.renderArea.offset.x, true);
	view.setInt32(36+(i*64), obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(40+(i*64), obj.renderArea.extent.width, true);
	view.setUint32(44+(i*64), obj.renderArea.extent.height, true);
	}
	}
	view.setUint32(48+(i*64), obj.clearValueCount, true);

	view.setBigUint64(56+(i*64), BigInt(obj.pClearValues||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.pClearValues||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.renderPass||0), true);
	view.setBigUint64(16, BigInt(obj.renderPass||0), true);


	view.setBigUint64(24, BigInt(obj.framebuffer||0), true);
	view.setBigUint64(24, BigInt(obj.framebuffer||0), true);

	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(32, obj.renderArea.offset.x, true);
	view.setInt32(36, obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(40, obj.renderArea.extent.width, true);
	view.setUint32(44, obj.renderArea.extent.height, true);
	}
	}
	view.setUint32(48, obj.clearValueCount, true);

	view.setBigUint64(56, BigInt(obj.pClearValues||0), true);
	view.setBigUint64(56, BigInt(obj.pClearValues||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		renderPass: undefined,
		framebuffer: undefined,
		renderArea: null,
		clearValueCount: read.u32(ptr, 48),
		pClearValues: read.ptr(ptr)
	};
	return obj;
}

export const VkPointClippingBehavior = {
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: 0,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: 1,
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: NaN,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: NaN,
	VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES",
		"1": "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY",
		"NaN": "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR",
		"NaN": "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR",
		"2147483647": "VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM",
}};
export const VkTessellationDomainOrigin = {
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: 0,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: 1,
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: NaN,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: NaN,
	VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT",
		"1": "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT",
		"NaN": "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR",
		"NaN": "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR",
		"2147483647": "VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM",
}};
export const VkSamplerYcbcrModelConversion = {
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: 0,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: 1,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: 2,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: 3,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: 4,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: NaN,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: NaN,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: NaN,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: NaN,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: NaN,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY",
		"1": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY",
		"2": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709",
		"3": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601",
		"4": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020",
		"NaN": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR",
		"NaN": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR",
		"NaN": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR",
		"NaN": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR",
		"NaN": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR",
		"2147483647": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM",
}};
export const VkSamplerYcbcrRange = {
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL: 0,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: 1,
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: NaN,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: NaN,
	VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SAMPLER_YCBCR_RANGE_ITU_FULL",
		"1": "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW",
		"NaN": "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR",
		"NaN": "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR",
		"2147483647": "VK_SAMPLER_YCBCR_RANGE_MAX_ENUM",
}};
export const VkChromaLocation = {
	VK_CHROMA_LOCATION_COSITED_EVEN: 0,
	VK_CHROMA_LOCATION_MIDPOINT: 1,
	VK_CHROMA_LOCATION_COSITED_EVEN_KHR: NaN,
	VK_CHROMA_LOCATION_MIDPOINT_KHR: NaN,
	VK_CHROMA_LOCATION_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_CHROMA_LOCATION_COSITED_EVEN",
		"1": "VK_CHROMA_LOCATION_MIDPOINT",
		"NaN": "VK_CHROMA_LOCATION_COSITED_EVEN_KHR",
		"NaN": "VK_CHROMA_LOCATION_MIDPOINT_KHR",
		"2147483647": "VK_CHROMA_LOCATION_MAX_ENUM",
}};
export const VkDescriptorUpdateTemplateType = {
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: 0,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: 1,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: NaN,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET",
		"1": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
		"NaN": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR",
		"2147483647": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM",
}};
export const VkSubgroupFeatureFlagBits = {
	VK_SUBGROUP_FEATURE_BASIC_BIT: 1,
	VK_SUBGROUP_FEATURE_VOTE_BIT: 2,
	VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: 4,
	VK_SUBGROUP_FEATURE_BALLOT_BIT: 8,
	VK_SUBGROUP_FEATURE_SHUFFLE_BIT: 16,
	VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: 32,
	VK_SUBGROUP_FEATURE_CLUSTERED_BIT: 64,
	VK_SUBGROUP_FEATURE_QUAD_BIT: 128,
	VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: 256,
	VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SUBGROUP_FEATURE_BASIC_BIT",
		"2": "VK_SUBGROUP_FEATURE_VOTE_BIT",
		"4": "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT",
		"8": "VK_SUBGROUP_FEATURE_BALLOT_BIT",
		"16": "VK_SUBGROUP_FEATURE_SHUFFLE_BIT",
		"32": "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT",
		"64": "VK_SUBGROUP_FEATURE_CLUSTERED_BIT",
		"128": "VK_SUBGROUP_FEATURE_QUAD_BIT",
		"256": "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV",
		"2147483647": "VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM",
}};
export const VkPeerMemoryFeatureFlagBits = {
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: 1,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: 2,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: 4,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: 8,
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: NaN,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: NaN,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: NaN,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: NaN,
	VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT",
		"2": "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT",
		"4": "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT",
		"8": "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT",
		"NaN": "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR",
		"NaN": "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR",
		"NaN": "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR",
		"NaN": "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR",
		"2147483647": "VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM",
}};
export const VkMemoryAllocateFlagBits = {
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: 1,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: 2,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: 4,
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: NaN,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: NaN,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: NaN,
	VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",
		"2": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT",
		"4": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
		"NaN": "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR",
		"NaN": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR",
		"NaN": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
		"2147483647": "VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalMemoryHandleTypeFlagBits = {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: 8,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: 16,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: 32,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: 64,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: 512,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: 1024,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: 128,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: 256,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA: 2048,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV: 4096,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT",
		"2": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		"4": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		"8": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT",
		"16": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT",
		"32": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT",
		"64": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT",
		"512": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT",
		"1024": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID",
		"128": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT",
		"256": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT",
		"2048": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA",
		"4096": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR",
		"2147483647": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalMemoryFeatureFlagBits = {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: 1,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: 2,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: 4,
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT",
		"2": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT",
		"4": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT",
		"NaN": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR",
		"NaN": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR",
		"2147483647": "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalFenceHandleTypeFlagBits = {
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: 8,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT",
		"2": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		"4": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		"8": "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT",
		"NaN": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
		"NaN": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
		"NaN": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
		"NaN": "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
		"2147483647": "VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalFenceFeatureFlagBits = {
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: 1,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: 2,
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT",
		"2": "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT",
		"NaN": "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR",
		"NaN": "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR",
		"2147483647": "VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM",
}};
export const VkFenceImportFlagBits = {
	VK_FENCE_IMPORT_TEMPORARY_BIT: 1,
	VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: NaN,
	VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_FENCE_IMPORT_TEMPORARY_BIT",
		"NaN": "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR",
		"2147483647": "VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM",
}};
export const VkSemaphoreImportFlagBits = {
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: 1,
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: NaN,
	VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT",
		"NaN": "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR",
		"2147483647": "VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalSemaphoreHandleTypeFlagBits = {
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: 1,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: 2,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: 4,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: 8,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: 16,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA: 128,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT",
		"2": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
		"4": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
		"8": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT",
		"16": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT",
		"128": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR",
		"NaN": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
		"2147483647": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM",
}};
export const VkExternalSemaphoreFeatureFlagBits = {
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: 1,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: 2,
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: NaN,
	VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT",
		"2": "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT",
		"NaN": "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR",
		"NaN": "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR",
		"2147483647": "VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM",
}};

export function VkPhysicalDeviceSubgroupProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubgroupProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.subgroupSize, true);
	view.setUint32(20+(i*32), obj.supportedStages, true);
	view.setUint32(24+(i*32), obj.supportedOperations, true);
	view.setUint32(28+(i*32), obj.quadOperationsInAllStages, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subgroupSize, true);
	view.setUint32(20, obj.supportedStages, true);
	view.setUint32(24, obj.supportedOperations, true);
	view.setUint32(28, obj.quadOperationsInAllStages, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubgroupProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subgroupSize: read.u32(ptr, 16),
		supportedStages: read.u32(ptr, 20),
		supportedOperations: read.u32(ptr, 24),
		quadOperationsInAllStages: read.u32(ptr, 28)
	};
	return obj;
}


export function VkBindBufferMemoryInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkBindBufferMemoryInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.buffer||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.buffer||0), true);


	view.setBigUint64(24+(i*40), BigInt(obj.memory||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.memory||0), true);

	view.setUint64(32+(i*40), obj.memoryOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.buffer||0), true);
	view.setBigUint64(16, BigInt(obj.buffer||0), true);


	view.setBigUint64(24, BigInt(obj.memory||0), true);
	view.setBigUint64(24, BigInt(obj.memory||0), true);

	view.setUint64(32, obj.memoryOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindBufferMemoryInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		buffer: undefined,
		memory: undefined,
		memoryOffset: null
	};
	return obj;
}


export function VkBindImageMemoryInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkBindImageMemoryInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.image||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.image||0), true);


	view.setBigUint64(24+(i*40), BigInt(obj.memory||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.memory||0), true);

	view.setUint64(32+(i*40), obj.memoryOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.image||0), true);
	view.setBigUint64(16, BigInt(obj.image||0), true);


	view.setBigUint64(24, BigInt(obj.memory||0), true);
	view.setBigUint64(24, BigInt(obj.memory||0), true);

	view.setUint64(32, obj.memoryOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindImageMemoryInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image: undefined,
		memory: undefined,
		memoryOffset: null
	};
	return obj;
}


export function VkPhysicalDevice16BitStorageFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDevice16BitStorageFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.storageBuffer16BitAccess, true);
	view.setUint32(20+(i*32), obj.uniformAndStorageBuffer16BitAccess, true);
	view.setUint32(24+(i*32), obj.storagePushConstant16, true);
	view.setUint32(28+(i*32), obj.storageInputOutput16, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.storageBuffer16BitAccess, true);
	view.setUint32(20, obj.uniformAndStorageBuffer16BitAccess, true);
	view.setUint32(24, obj.storagePushConstant16, true);
	view.setUint32(28, obj.storageInputOutput16, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevice16BitStorageFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		storageBuffer16BitAccess: read.u32(ptr, 16),
		uniformAndStorageBuffer16BitAccess: read.u32(ptr, 20),
		storagePushConstant16: read.u32(ptr, 24),
		storageInputOutput16: read.u32(ptr, 28)
	};
	return obj;
}


export function VkMemoryDedicatedRequirements_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryDedicatedRequirements_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.prefersDedicatedAllocation, true);
	view.setUint32(20+(i*24), obj.requiresDedicatedAllocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.prefersDedicatedAllocation, true);
	view.setUint32(20, obj.requiresDedicatedAllocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryDedicatedRequirements_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		prefersDedicatedAllocation: read.u32(ptr, 16),
		requiresDedicatedAllocation: read.u32(ptr, 20)
	};
	return obj;
}


export function VkMemoryDedicatedAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkMemoryDedicatedAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.image||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.image||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.buffer||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.buffer||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.image||0), true);
	view.setBigUint64(16, BigInt(obj.image||0), true);


	view.setBigUint64(24, BigInt(obj.buffer||0), true);
	view.setBigUint64(24, BigInt(obj.buffer||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryDedicatedAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image: undefined,
		buffer: undefined
	};
	return obj;
}


export function VkMemoryAllocateFlagsInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryAllocateFlagsInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.deviceMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.deviceMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryAllocateFlagsInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		deviceMask: read.u32(ptr, 20)
	};
	return obj;
}


export function VkDeviceGroupRenderPassBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDeviceGroupRenderPassBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.deviceMask, true);
	view.setUint32(20+(i*32), obj.deviceRenderAreaCount, true);
	if (obj.pDeviceRenderAreas){
		const wrapped = VkRect2D_to_C(obj.pDeviceRenderAreas, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pDeviceRenderAreas||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceMask, true);
	view.setUint32(20, obj.deviceRenderAreaCount, true);
	if (obj.pDeviceRenderAreas){
		const wrapped = VkRect2D_to_C(obj.pDeviceRenderAreas, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pDeviceRenderAreas||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupRenderPassBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceMask: read.u32(ptr, 16),
		deviceRenderAreaCount: read.u32(ptr, 20),
		pDeviceRenderAreas: VkRect2D_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkDeviceGroupCommandBufferBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceGroupCommandBufferBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.deviceMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupCommandBufferBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceMask: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDeviceGroupSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkDeviceGroupSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.waitSemaphoreCount, true);

	view.setBigUint64(24+(i*64), BigInt(obj.pWaitSemaphoreDeviceIndices||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.pWaitSemaphoreDeviceIndices||0), true);

	view.setUint32(32+(i*64), obj.commandBufferCount, true);

	view.setBigUint64(40+(i*64), BigInt(obj.pCommandBufferDeviceMasks||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.pCommandBufferDeviceMasks||0), true);

	view.setUint32(48+(i*64), obj.signalSemaphoreCount, true);

	view.setBigUint64(56+(i*64), BigInt(obj.pSignalSemaphoreDeviceIndices||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.pSignalSemaphoreDeviceIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.waitSemaphoreCount, true);

	view.setBigUint64(24, BigInt(obj.pWaitSemaphoreDeviceIndices||0), true);
	view.setBigUint64(24, BigInt(obj.pWaitSemaphoreDeviceIndices||0), true);

	view.setUint32(32, obj.commandBufferCount, true);

	view.setBigUint64(40, BigInt(obj.pCommandBufferDeviceMasks||0), true);
	view.setBigUint64(40, BigInt(obj.pCommandBufferDeviceMasks||0), true);

	view.setUint32(48, obj.signalSemaphoreCount, true);

	view.setBigUint64(56, BigInt(obj.pSignalSemaphoreDeviceIndices||0), true);
	view.setBigUint64(56, BigInt(obj.pSignalSemaphoreDeviceIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		waitSemaphoreCount: read.u32(ptr, 16),
		pWaitSemaphoreDeviceIndices: undefined,
		commandBufferCount: read.u32(ptr, 32),
		pCommandBufferDeviceMasks: undefined,
		signalSemaphoreCount: read.u32(ptr, 48),
		pSignalSemaphoreDeviceIndices: undefined
	};
	return obj;
}


export function VkDeviceGroupBindSparseInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceGroupBindSparseInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.resourceDeviceIndex, true);
	view.setUint32(20+(i*24), obj.memoryDeviceIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.resourceDeviceIndex, true);
	view.setUint32(20, obj.memoryDeviceIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupBindSparseInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		resourceDeviceIndex: read.u32(ptr, 16),
		memoryDeviceIndex: read.u32(ptr, 20)
	};
	return obj;
}


export function VkBindBufferMemoryDeviceGroupInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkBindBufferMemoryDeviceGroupInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.deviceIndexCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pDeviceIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceIndexCount, true);

	view.setBigUint64(24, BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(24, BigInt(obj.pDeviceIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindBufferMemoryDeviceGroupInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceIndexCount: read.u32(ptr, 16),
		pDeviceIndices: undefined
	};
	return obj;
}


export function VkBindImageMemoryDeviceGroupInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkBindImageMemoryDeviceGroupInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.deviceIndexCount, true);

	view.setBigUint64(24+(i*48), BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pDeviceIndices||0), true);

	view.setUint32(32+(i*48), obj.splitInstanceBindRegionCount, true);
	if (obj.pSplitInstanceBindRegions){
		const wrapped = VkRect2D_to_C(obj.pSplitInstanceBindRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pSplitInstanceBindRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceIndexCount, true);

	view.setBigUint64(24, BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(24, BigInt(obj.pDeviceIndices||0), true);

	view.setUint32(32, obj.splitInstanceBindRegionCount, true);
	if (obj.pSplitInstanceBindRegions){
		const wrapped = VkRect2D_to_C(obj.pSplitInstanceBindRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pSplitInstanceBindRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindImageMemoryDeviceGroupInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceIndexCount: read.u32(ptr, 16),
		pDeviceIndices: undefined,
		splitInstanceBindRegionCount: read.u32(ptr, 32),
		pSplitInstanceBindRegions: VkRect2D_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceGroupProperties_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceGroupProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.physicalDeviceCount, true);

	view.setUint32(32+(i*40), obj.subsetAllocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.physicalDeviceCount, true);

	view.setUint32(32, obj.subsetAllocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceGroupProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		physicalDeviceCount: read.u32(ptr, 16),
		physicalDevices: null,
		subsetAllocation: read.u32(ptr, 32)
	};
	return obj;
}


export function VkDeviceGroupDeviceCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDeviceGroupDeviceCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.physicalDeviceCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pPhysicalDevices||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pPhysicalDevices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.physicalDeviceCount, true);

	view.setBigUint64(24, BigInt(obj.pPhysicalDevices||0), true);
	view.setBigUint64(24, BigInt(obj.pPhysicalDevices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupDeviceCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		physicalDeviceCount: read.u32(ptr, 16),
		pPhysicalDevices: read.ptr(ptr)
	};
	return obj;
}


export function VkBufferMemoryRequirementsInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBufferMemoryRequirementsInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.buffer||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.buffer||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.buffer||0), true);
	view.setBigUint64(16, BigInt(obj.buffer||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferMemoryRequirementsInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		buffer: undefined
	};
	return obj;
}


export function VkImageMemoryRequirementsInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageMemoryRequirementsInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.image||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.image||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.image||0), true);
	view.setBigUint64(16, BigInt(obj.image||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageMemoryRequirementsInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image: undefined
	};
	return obj;
}


export function VkImageSparseMemoryRequirementsInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageSparseMemoryRequirementsInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.image||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.image||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.image||0), true);
	view.setBigUint64(16, BigInt(obj.image||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSparseMemoryRequirementsInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image: undefined
	};
	return obj;
}


export function VkMemoryRequirements2_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkMemoryRequirements2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	if (obj.memoryRequirements){
	view.setUint64(16+(i*40), obj.memoryRequirements.size, true);
	view.setUint64(24+(i*40), obj.memoryRequirements.alignment, true);
	view.setUint32(32+(i*40), obj.memoryRequirements.memoryTypeBits, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.memoryRequirements){
	view.setUint64(16, obj.memoryRequirements.size, true);
	view.setUint64(24, obj.memoryRequirements.alignment, true);
	view.setUint32(32, obj.memoryRequirements.memoryTypeBits, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryRequirements2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryRequirements: null
	};
	return obj;
}


export function VkSparseImageMemoryRequirements2_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkSparseImageMemoryRequirements2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	if (obj.memoryRequirements){
	if (obj.memoryRequirements.formatProperties){
	view.setUint32(20+(i*80), obj.memoryRequirements.formatProperties.aspectMask, true);
	if (obj.memoryRequirements.formatProperties.imageGranularity){
	view.setUint32(24+(i*80), obj.memoryRequirements.formatProperties.imageGranularity.width, true);
	view.setUint32(28+(i*80), obj.memoryRequirements.formatProperties.imageGranularity.height, true);
	view.setUint32(32+(i*80), obj.memoryRequirements.formatProperties.imageGranularity.depth, true);
	}
	view.setUint32(36+(i*80), obj.memoryRequirements.formatProperties.flags, true);
	}
	view.setUint32(40+(i*80), obj.memoryRequirements.imageMipTailFirstLod, true);
	view.setUint64(44+(i*80), obj.memoryRequirements.imageMipTailSize, true);
	view.setUint64(52+(i*80), obj.memoryRequirements.imageMipTailOffset, true);
	view.setUint64(60+(i*80), obj.memoryRequirements.imageMipTailStride, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.memoryRequirements){
	if (obj.memoryRequirements.formatProperties){
	view.setUint32(20, obj.memoryRequirements.formatProperties.aspectMask, true);
	if (obj.memoryRequirements.formatProperties.imageGranularity){
	view.setUint32(24, obj.memoryRequirements.formatProperties.imageGranularity.width, true);
	view.setUint32(28, obj.memoryRequirements.formatProperties.imageGranularity.height, true);
	view.setUint32(32, obj.memoryRequirements.formatProperties.imageGranularity.depth, true);
	}
	view.setUint32(36, obj.memoryRequirements.formatProperties.flags, true);
	}
	view.setUint32(40, obj.memoryRequirements.imageMipTailFirstLod, true);
	view.setUint64(44, obj.memoryRequirements.imageMipTailSize, true);
	view.setUint64(52, obj.memoryRequirements.imageMipTailOffset, true);
	view.setUint64(60, obj.memoryRequirements.imageMipTailStride, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageMemoryRequirements2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryRequirements: null
	};
	return obj;
}


export function VkPhysicalDeviceFeatures2_alloc_array(size){
	const buffer = new ArrayBuffer(240*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFeatures2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(240*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*240), obj.sType, true)

	view.setBigUint64(8+(i*240), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*240), BigInt(obj.pNext||0), true);

	if (obj.features){
	view.setUint32(16+(i*240), obj.features.robustBufferAccess, true);
	view.setUint32(20+(i*240), obj.features.fullDrawIndexUint32, true);
	view.setUint32(24+(i*240), obj.features.imageCubeArray, true);
	view.setUint32(28+(i*240), obj.features.independentBlend, true);
	view.setUint32(32+(i*240), obj.features.geometryShader, true);
	view.setUint32(36+(i*240), obj.features.tessellationShader, true);
	view.setUint32(40+(i*240), obj.features.sampleRateShading, true);
	view.setUint32(44+(i*240), obj.features.dualSrcBlend, true);
	view.setUint32(48+(i*240), obj.features.logicOp, true);
	view.setUint32(52+(i*240), obj.features.multiDrawIndirect, true);
	view.setUint32(56+(i*240), obj.features.drawIndirectFirstInstance, true);
	view.setUint32(60+(i*240), obj.features.depthClamp, true);
	view.setUint32(64+(i*240), obj.features.depthBiasClamp, true);
	view.setUint32(68+(i*240), obj.features.fillModeNonSolid, true);
	view.setUint32(72+(i*240), obj.features.depthBounds, true);
	view.setUint32(76+(i*240), obj.features.wideLines, true);
	view.setUint32(80+(i*240), obj.features.largePoints, true);
	view.setUint32(84+(i*240), obj.features.alphaToOne, true);
	view.setUint32(88+(i*240), obj.features.multiViewport, true);
	view.setUint32(92+(i*240), obj.features.samplerAnisotropy, true);
	view.setUint32(96+(i*240), obj.features.textureCompressionETC2, true);
	view.setUint32(100+(i*240), obj.features.textureCompressionASTC_LDR, true);
	view.setUint32(104+(i*240), obj.features.textureCompressionBC, true);
	view.setUint32(108+(i*240), obj.features.occlusionQueryPrecise, true);
	view.setUint32(112+(i*240), obj.features.pipelineStatisticsQuery, true);
	view.setUint32(116+(i*240), obj.features.vertexPipelineStoresAndAtomics, true);
	view.setUint32(120+(i*240), obj.features.fragmentStoresAndAtomics, true);
	view.setUint32(124+(i*240), obj.features.shaderTessellationAndGeometryPointSize, true);
	view.setUint32(128+(i*240), obj.features.shaderImageGatherExtended, true);
	view.setUint32(132+(i*240), obj.features.shaderStorageImageExtendedFormats, true);
	view.setUint32(136+(i*240), obj.features.shaderStorageImageMultisample, true);
	view.setUint32(140+(i*240), obj.features.shaderStorageImageReadWithoutFormat, true);
	view.setUint32(144+(i*240), obj.features.shaderStorageImageWriteWithoutFormat, true);
	view.setUint32(148+(i*240), obj.features.shaderUniformBufferArrayDynamicIndexing, true);
	view.setUint32(152+(i*240), obj.features.shaderSampledImageArrayDynamicIndexing, true);
	view.setUint32(156+(i*240), obj.features.shaderStorageBufferArrayDynamicIndexing, true);
	view.setUint32(160+(i*240), obj.features.shaderStorageImageArrayDynamicIndexing, true);
	view.setUint32(164+(i*240), obj.features.shaderClipDistance, true);
	view.setUint32(168+(i*240), obj.features.shaderCullDistance, true);
	view.setUint32(172+(i*240), obj.features.shaderFloat64, true);
	view.setUint32(176+(i*240), obj.features.shaderInt64, true);
	view.setUint32(180+(i*240), obj.features.shaderInt16, true);
	view.setUint32(184+(i*240), obj.features.shaderResourceResidency, true);
	view.setUint32(188+(i*240), obj.features.shaderResourceMinLod, true);
	view.setUint32(192+(i*240), obj.features.sparseBinding, true);
	view.setUint32(196+(i*240), obj.features.sparseResidencyBuffer, true);
	view.setUint32(200+(i*240), obj.features.sparseResidencyImage2D, true);
	view.setUint32(204+(i*240), obj.features.sparseResidencyImage3D, true);
	view.setUint32(208+(i*240), obj.features.sparseResidency2Samples, true);
	view.setUint32(212+(i*240), obj.features.sparseResidency4Samples, true);
	view.setUint32(216+(i*240), obj.features.sparseResidency8Samples, true);
	view.setUint32(220+(i*240), obj.features.sparseResidency16Samples, true);
	view.setUint32(224+(i*240), obj.features.sparseResidencyAliased, true);
	view.setUint32(228+(i*240), obj.features.variableMultisampleRate, true);
	view.setUint32(232+(i*240), obj.features.inheritedQueries, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(240);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.features){
	view.setUint32(16, obj.features.robustBufferAccess, true);
	view.setUint32(20, obj.features.fullDrawIndexUint32, true);
	view.setUint32(24, obj.features.imageCubeArray, true);
	view.setUint32(28, obj.features.independentBlend, true);
	view.setUint32(32, obj.features.geometryShader, true);
	view.setUint32(36, obj.features.tessellationShader, true);
	view.setUint32(40, obj.features.sampleRateShading, true);
	view.setUint32(44, obj.features.dualSrcBlend, true);
	view.setUint32(48, obj.features.logicOp, true);
	view.setUint32(52, obj.features.multiDrawIndirect, true);
	view.setUint32(56, obj.features.drawIndirectFirstInstance, true);
	view.setUint32(60, obj.features.depthClamp, true);
	view.setUint32(64, obj.features.depthBiasClamp, true);
	view.setUint32(68, obj.features.fillModeNonSolid, true);
	view.setUint32(72, obj.features.depthBounds, true);
	view.setUint32(76, obj.features.wideLines, true);
	view.setUint32(80, obj.features.largePoints, true);
	view.setUint32(84, obj.features.alphaToOne, true);
	view.setUint32(88, obj.features.multiViewport, true);
	view.setUint32(92, obj.features.samplerAnisotropy, true);
	view.setUint32(96, obj.features.textureCompressionETC2, true);
	view.setUint32(100, obj.features.textureCompressionASTC_LDR, true);
	view.setUint32(104, obj.features.textureCompressionBC, true);
	view.setUint32(108, obj.features.occlusionQueryPrecise, true);
	view.setUint32(112, obj.features.pipelineStatisticsQuery, true);
	view.setUint32(116, obj.features.vertexPipelineStoresAndAtomics, true);
	view.setUint32(120, obj.features.fragmentStoresAndAtomics, true);
	view.setUint32(124, obj.features.shaderTessellationAndGeometryPointSize, true);
	view.setUint32(128, obj.features.shaderImageGatherExtended, true);
	view.setUint32(132, obj.features.shaderStorageImageExtendedFormats, true);
	view.setUint32(136, obj.features.shaderStorageImageMultisample, true);
	view.setUint32(140, obj.features.shaderStorageImageReadWithoutFormat, true);
	view.setUint32(144, obj.features.shaderStorageImageWriteWithoutFormat, true);
	view.setUint32(148, obj.features.shaderUniformBufferArrayDynamicIndexing, true);
	view.setUint32(152, obj.features.shaderSampledImageArrayDynamicIndexing, true);
	view.setUint32(156, obj.features.shaderStorageBufferArrayDynamicIndexing, true);
	view.setUint32(160, obj.features.shaderStorageImageArrayDynamicIndexing, true);
	view.setUint32(164, obj.features.shaderClipDistance, true);
	view.setUint32(168, obj.features.shaderCullDistance, true);
	view.setUint32(172, obj.features.shaderFloat64, true);
	view.setUint32(176, obj.features.shaderInt64, true);
	view.setUint32(180, obj.features.shaderInt16, true);
	view.setUint32(184, obj.features.shaderResourceResidency, true);
	view.setUint32(188, obj.features.shaderResourceMinLod, true);
	view.setUint32(192, obj.features.sparseBinding, true);
	view.setUint32(196, obj.features.sparseResidencyBuffer, true);
	view.setUint32(200, obj.features.sparseResidencyImage2D, true);
	view.setUint32(204, obj.features.sparseResidencyImage3D, true);
	view.setUint32(208, obj.features.sparseResidency2Samples, true);
	view.setUint32(212, obj.features.sparseResidency4Samples, true);
	view.setUint32(216, obj.features.sparseResidency8Samples, true);
	view.setUint32(220, obj.features.sparseResidency16Samples, true);
	view.setUint32(224, obj.features.sparseResidencyAliased, true);
	view.setUint32(228, obj.features.variableMultisampleRate, true);
	view.setUint32(232, obj.features.inheritedQueries, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFeatures2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		features: null
	};
	return obj;
}


export function VkPhysicalDeviceProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(1416*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(1416*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*1416), obj.sType, true)

	view.setBigUint64(8+(i*1416), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*1416), BigInt(obj.pNext||0), true);

	if (obj.properties){
	view.setUint32(472+(i*1416), obj.properties.apiVersion, true);
	view.setUint32(476+(i*1416), obj.properties.driverVersion, true);
	view.setUint32(480+(i*1416), obj.properties.vendorID, true);
	view.setUint32(484+(i*1416), obj.properties.deviceID, true);
	view.setUint32(488+(i*1416), obj.properties.deviceType, true)


	if (obj.properties.limits){
	view.setUint32(512+(i*1416), obj.properties.limits.maxImageDimension1D, true);
	view.setUint32(516+(i*1416), obj.properties.limits.maxImageDimension2D, true);
	view.setUint32(520+(i*1416), obj.properties.limits.maxImageDimension3D, true);
	view.setUint32(524+(i*1416), obj.properties.limits.maxImageDimensionCube, true);
	view.setUint32(528+(i*1416), obj.properties.limits.maxImageArrayLayers, true);
	view.setUint32(532+(i*1416), obj.properties.limits.maxTexelBufferElements, true);
	view.setUint32(536+(i*1416), obj.properties.limits.maxUniformBufferRange, true);
	view.setUint32(540+(i*1416), obj.properties.limits.maxStorageBufferRange, true);
	view.setUint32(544+(i*1416), obj.properties.limits.maxPushConstantsSize, true);
	view.setUint32(548+(i*1416), obj.properties.limits.maxMemoryAllocationCount, true);
	view.setUint32(552+(i*1416), obj.properties.limits.maxSamplerAllocationCount, true);
	view.setUint64(560+(i*1416), obj.properties.limits.bufferImageGranularity, true);
	view.setUint64(568+(i*1416), obj.properties.limits.sparseAddressSpaceSize, true);
	view.setUint32(576+(i*1416), obj.properties.limits.maxBoundDescriptorSets, true);
	view.setUint32(580+(i*1416), obj.properties.limits.maxPerStageDescriptorSamplers, true);
	view.setUint32(584+(i*1416), obj.properties.limits.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(588+(i*1416), obj.properties.limits.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(592+(i*1416), obj.properties.limits.maxPerStageDescriptorSampledImages, true);
	view.setUint32(596+(i*1416), obj.properties.limits.maxPerStageDescriptorStorageImages, true);
	view.setUint32(600+(i*1416), obj.properties.limits.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(604+(i*1416), obj.properties.limits.maxPerStageResources, true);
	view.setUint32(608+(i*1416), obj.properties.limits.maxDescriptorSetSamplers, true);
	view.setUint32(612+(i*1416), obj.properties.limits.maxDescriptorSetUniformBuffers, true);
	view.setUint32(616+(i*1416), obj.properties.limits.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(620+(i*1416), obj.properties.limits.maxDescriptorSetStorageBuffers, true);
	view.setUint32(624+(i*1416), obj.properties.limits.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(628+(i*1416), obj.properties.limits.maxDescriptorSetSampledImages, true);
	view.setUint32(632+(i*1416), obj.properties.limits.maxDescriptorSetStorageImages, true);
	view.setUint32(636+(i*1416), obj.properties.limits.maxDescriptorSetInputAttachments, true);
	view.setUint32(640+(i*1416), obj.properties.limits.maxVertexInputAttributes, true);
	view.setUint32(644+(i*1416), obj.properties.limits.maxVertexInputBindings, true);
	view.setUint32(648+(i*1416), obj.properties.limits.maxVertexInputAttributeOffset, true);
	view.setUint32(652+(i*1416), obj.properties.limits.maxVertexInputBindingStride, true);
	view.setUint32(656+(i*1416), obj.properties.limits.maxVertexOutputComponents, true);
	view.setUint32(660+(i*1416), obj.properties.limits.maxTessellationGenerationLevel, true);
	view.setUint32(664+(i*1416), obj.properties.limits.maxTessellationPatchSize, true);
	view.setUint32(668+(i*1416), obj.properties.limits.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(672+(i*1416), obj.properties.limits.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(676+(i*1416), obj.properties.limits.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(680+(i*1416), obj.properties.limits.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(684+(i*1416), obj.properties.limits.maxTessellationEvaluationInputComponents, true);
	view.setUint32(688+(i*1416), obj.properties.limits.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(692+(i*1416), obj.properties.limits.maxGeometryShaderInvocations, true);
	view.setUint32(696+(i*1416), obj.properties.limits.maxGeometryInputComponents, true);
	view.setUint32(700+(i*1416), obj.properties.limits.maxGeometryOutputComponents, true);
	view.setUint32(704+(i*1416), obj.properties.limits.maxGeometryOutputVertices, true);
	view.setUint32(708+(i*1416), obj.properties.limits.maxGeometryTotalOutputComponents, true);
	view.setUint32(712+(i*1416), obj.properties.limits.maxFragmentInputComponents, true);
	view.setUint32(716+(i*1416), obj.properties.limits.maxFragmentOutputAttachments, true);
	view.setUint32(720+(i*1416), obj.properties.limits.maxFragmentDualSrcAttachments, true);
	view.setUint32(724+(i*1416), obj.properties.limits.maxFragmentCombinedOutputResources, true);
	view.setUint32(728+(i*1416), obj.properties.limits.maxComputeSharedMemorySize, true);

	view.setUint32(736+(i*1416), obj.properties.limits.maxComputeWorkGroupInvocations, true);

	view.setUint32(744+(i*1416), obj.properties.limits.subPixelPrecisionBits, true);
	view.setUint32(748+(i*1416), obj.properties.limits.subTexelPrecisionBits, true);
	view.setUint32(752+(i*1416), obj.properties.limits.mipmapPrecisionBits, true);
	view.setUint32(756+(i*1416), obj.properties.limits.maxDrawIndexedIndexValue, true);
	view.setUint32(760+(i*1416), obj.properties.limits.maxDrawIndirectCount, true);
	view.setFloat32(764+(i*1416), obj.properties.limits.maxSamplerLodBias, true);
	view.setFloat32(768+(i*1416), obj.properties.limits.maxSamplerAnisotropy, true);
	view.setUint32(772+(i*1416), obj.properties.limits.maxViewports, true);


	view.setUint32(784+(i*1416), obj.properties.limits.viewportSubPixelBits, true);

	view.setBigUint64(792+(i*1416), BigInt(obj.properties.limits.minMemoryMapAlignment||0), true);
	view.setBigUint64(792+(i*1416), BigInt(obj.properties.limits.minMemoryMapAlignment||0), true);

	view.setUint64(800+(i*1416), obj.properties.limits.minTexelBufferOffsetAlignment, true);
	view.setUint64(808+(i*1416), obj.properties.limits.minUniformBufferOffsetAlignment, true);
	view.setUint64(816+(i*1416), obj.properties.limits.minStorageBufferOffsetAlignment, true);
	view.setInt32(824+(i*1416), obj.properties.limits.minTexelOffset, true);
	view.setUint32(828+(i*1416), obj.properties.limits.maxTexelOffset, true);
	view.setInt32(832+(i*1416), obj.properties.limits.minTexelGatherOffset, true);
	view.setUint32(836+(i*1416), obj.properties.limits.maxTexelGatherOffset, true);
	view.setFloat32(840+(i*1416), obj.properties.limits.minInterpolationOffset, true);
	view.setFloat32(844+(i*1416), obj.properties.limits.maxInterpolationOffset, true);
	view.setUint32(848+(i*1416), obj.properties.limits.subPixelInterpolationOffsetBits, true);
	view.setUint32(852+(i*1416), obj.properties.limits.maxFramebufferWidth, true);
	view.setUint32(856+(i*1416), obj.properties.limits.maxFramebufferHeight, true);
	view.setUint32(860+(i*1416), obj.properties.limits.maxFramebufferLayers, true);
	view.setUint32(864+(i*1416), obj.properties.limits.framebufferColorSampleCounts, true);
	view.setUint32(868+(i*1416), obj.properties.limits.framebufferDepthSampleCounts, true);
	view.setUint32(872+(i*1416), obj.properties.limits.framebufferStencilSampleCounts, true);
	view.setUint32(876+(i*1416), obj.properties.limits.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(880+(i*1416), obj.properties.limits.maxColorAttachments, true);
	view.setUint32(884+(i*1416), obj.properties.limits.sampledImageColorSampleCounts, true);
	view.setUint32(888+(i*1416), obj.properties.limits.sampledImageIntegerSampleCounts, true);
	view.setUint32(892+(i*1416), obj.properties.limits.sampledImageDepthSampleCounts, true);
	view.setUint32(896+(i*1416), obj.properties.limits.sampledImageStencilSampleCounts, true);
	view.setUint32(900+(i*1416), obj.properties.limits.storageImageSampleCounts, true);
	view.setUint32(904+(i*1416), obj.properties.limits.maxSampleMaskWords, true);
	view.setUint32(908+(i*1416), obj.properties.limits.timestampComputeAndGraphics, true);
	view.setFloat32(912+(i*1416), obj.properties.limits.timestampPeriod, true);
	view.setUint32(916+(i*1416), obj.properties.limits.maxClipDistances, true);
	view.setUint32(920+(i*1416), obj.properties.limits.maxCullDistances, true);
	view.setUint32(924+(i*1416), obj.properties.limits.maxCombinedClipAndCullDistances, true);
	view.setUint32(928+(i*1416), obj.properties.limits.discreteQueuePriorities, true);


	view.setFloat32(940+(i*1416), obj.properties.limits.pointSizeGranularity, true);
	view.setFloat32(944+(i*1416), obj.properties.limits.lineWidthGranularity, true);
	view.setUint32(948+(i*1416), obj.properties.limits.strictLines, true);
	view.setUint32(952+(i*1416), obj.properties.limits.standardSampleLocations, true);
	view.setUint64(960+(i*1416), obj.properties.limits.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(968+(i*1416), obj.properties.limits.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(976+(i*1416), obj.properties.limits.nonCoherentAtomSize, true);
	}
	if (obj.properties.sparseProperties){
	view.setUint32(984+(i*1416), obj.properties.sparseProperties.residencyStandard2DBlockShape, true);
	view.setUint32(988+(i*1416), obj.properties.sparseProperties.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(992+(i*1416), obj.properties.sparseProperties.residencyStandard3DBlockShape, true);
	view.setUint32(996+(i*1416), obj.properties.sparseProperties.residencyAlignedMipSize, true);
	view.setUint32(1000+(i*1416), obj.properties.sparseProperties.residencyNonResidentStrict, true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(1416);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.properties){
	view.setUint32(472, obj.properties.apiVersion, true);
	view.setUint32(476, obj.properties.driverVersion, true);
	view.setUint32(480, obj.properties.vendorID, true);
	view.setUint32(484, obj.properties.deviceID, true);
	view.setUint32(488, obj.properties.deviceType, true)


	if (obj.properties.limits){
	view.setUint32(512, obj.properties.limits.maxImageDimension1D, true);
	view.setUint32(516, obj.properties.limits.maxImageDimension2D, true);
	view.setUint32(520, obj.properties.limits.maxImageDimension3D, true);
	view.setUint32(524, obj.properties.limits.maxImageDimensionCube, true);
	view.setUint32(528, obj.properties.limits.maxImageArrayLayers, true);
	view.setUint32(532, obj.properties.limits.maxTexelBufferElements, true);
	view.setUint32(536, obj.properties.limits.maxUniformBufferRange, true);
	view.setUint32(540, obj.properties.limits.maxStorageBufferRange, true);
	view.setUint32(544, obj.properties.limits.maxPushConstantsSize, true);
	view.setUint32(548, obj.properties.limits.maxMemoryAllocationCount, true);
	view.setUint32(552, obj.properties.limits.maxSamplerAllocationCount, true);
	view.setUint64(560, obj.properties.limits.bufferImageGranularity, true);
	view.setUint64(568, obj.properties.limits.sparseAddressSpaceSize, true);
	view.setUint32(576, obj.properties.limits.maxBoundDescriptorSets, true);
	view.setUint32(580, obj.properties.limits.maxPerStageDescriptorSamplers, true);
	view.setUint32(584, obj.properties.limits.maxPerStageDescriptorUniformBuffers, true);
	view.setUint32(588, obj.properties.limits.maxPerStageDescriptorStorageBuffers, true);
	view.setUint32(592, obj.properties.limits.maxPerStageDescriptorSampledImages, true);
	view.setUint32(596, obj.properties.limits.maxPerStageDescriptorStorageImages, true);
	view.setUint32(600, obj.properties.limits.maxPerStageDescriptorInputAttachments, true);
	view.setUint32(604, obj.properties.limits.maxPerStageResources, true);
	view.setUint32(608, obj.properties.limits.maxDescriptorSetSamplers, true);
	view.setUint32(612, obj.properties.limits.maxDescriptorSetUniformBuffers, true);
	view.setUint32(616, obj.properties.limits.maxDescriptorSetUniformBuffersDynamic, true);
	view.setUint32(620, obj.properties.limits.maxDescriptorSetStorageBuffers, true);
	view.setUint32(624, obj.properties.limits.maxDescriptorSetStorageBuffersDynamic, true);
	view.setUint32(628, obj.properties.limits.maxDescriptorSetSampledImages, true);
	view.setUint32(632, obj.properties.limits.maxDescriptorSetStorageImages, true);
	view.setUint32(636, obj.properties.limits.maxDescriptorSetInputAttachments, true);
	view.setUint32(640, obj.properties.limits.maxVertexInputAttributes, true);
	view.setUint32(644, obj.properties.limits.maxVertexInputBindings, true);
	view.setUint32(648, obj.properties.limits.maxVertexInputAttributeOffset, true);
	view.setUint32(652, obj.properties.limits.maxVertexInputBindingStride, true);
	view.setUint32(656, obj.properties.limits.maxVertexOutputComponents, true);
	view.setUint32(660, obj.properties.limits.maxTessellationGenerationLevel, true);
	view.setUint32(664, obj.properties.limits.maxTessellationPatchSize, true);
	view.setUint32(668, obj.properties.limits.maxTessellationControlPerVertexInputComponents, true);
	view.setUint32(672, obj.properties.limits.maxTessellationControlPerVertexOutputComponents, true);
	view.setUint32(676, obj.properties.limits.maxTessellationControlPerPatchOutputComponents, true);
	view.setUint32(680, obj.properties.limits.maxTessellationControlTotalOutputComponents, true);
	view.setUint32(684, obj.properties.limits.maxTessellationEvaluationInputComponents, true);
	view.setUint32(688, obj.properties.limits.maxTessellationEvaluationOutputComponents, true);
	view.setUint32(692, obj.properties.limits.maxGeometryShaderInvocations, true);
	view.setUint32(696, obj.properties.limits.maxGeometryInputComponents, true);
	view.setUint32(700, obj.properties.limits.maxGeometryOutputComponents, true);
	view.setUint32(704, obj.properties.limits.maxGeometryOutputVertices, true);
	view.setUint32(708, obj.properties.limits.maxGeometryTotalOutputComponents, true);
	view.setUint32(712, obj.properties.limits.maxFragmentInputComponents, true);
	view.setUint32(716, obj.properties.limits.maxFragmentOutputAttachments, true);
	view.setUint32(720, obj.properties.limits.maxFragmentDualSrcAttachments, true);
	view.setUint32(724, obj.properties.limits.maxFragmentCombinedOutputResources, true);
	view.setUint32(728, obj.properties.limits.maxComputeSharedMemorySize, true);

	view.setUint32(736, obj.properties.limits.maxComputeWorkGroupInvocations, true);

	view.setUint32(744, obj.properties.limits.subPixelPrecisionBits, true);
	view.setUint32(748, obj.properties.limits.subTexelPrecisionBits, true);
	view.setUint32(752, obj.properties.limits.mipmapPrecisionBits, true);
	view.setUint32(756, obj.properties.limits.maxDrawIndexedIndexValue, true);
	view.setUint32(760, obj.properties.limits.maxDrawIndirectCount, true);
	view.setFloat32(764, obj.properties.limits.maxSamplerLodBias, true);
	view.setFloat32(768, obj.properties.limits.maxSamplerAnisotropy, true);
	view.setUint32(772, obj.properties.limits.maxViewports, true);


	view.setUint32(784, obj.properties.limits.viewportSubPixelBits, true);

	view.setBigUint64(792, BigInt(obj.properties.limits.minMemoryMapAlignment||0), true);
	view.setBigUint64(792, BigInt(obj.properties.limits.minMemoryMapAlignment||0), true);

	view.setUint64(800, obj.properties.limits.minTexelBufferOffsetAlignment, true);
	view.setUint64(808, obj.properties.limits.minUniformBufferOffsetAlignment, true);
	view.setUint64(816, obj.properties.limits.minStorageBufferOffsetAlignment, true);
	view.setInt32(824, obj.properties.limits.minTexelOffset, true);
	view.setUint32(828, obj.properties.limits.maxTexelOffset, true);
	view.setInt32(832, obj.properties.limits.minTexelGatherOffset, true);
	view.setUint32(836, obj.properties.limits.maxTexelGatherOffset, true);
	view.setFloat32(840, obj.properties.limits.minInterpolationOffset, true);
	view.setFloat32(844, obj.properties.limits.maxInterpolationOffset, true);
	view.setUint32(848, obj.properties.limits.subPixelInterpolationOffsetBits, true);
	view.setUint32(852, obj.properties.limits.maxFramebufferWidth, true);
	view.setUint32(856, obj.properties.limits.maxFramebufferHeight, true);
	view.setUint32(860, obj.properties.limits.maxFramebufferLayers, true);
	view.setUint32(864, obj.properties.limits.framebufferColorSampleCounts, true);
	view.setUint32(868, obj.properties.limits.framebufferDepthSampleCounts, true);
	view.setUint32(872, obj.properties.limits.framebufferStencilSampleCounts, true);
	view.setUint32(876, obj.properties.limits.framebufferNoAttachmentsSampleCounts, true);
	view.setUint32(880, obj.properties.limits.maxColorAttachments, true);
	view.setUint32(884, obj.properties.limits.sampledImageColorSampleCounts, true);
	view.setUint32(888, obj.properties.limits.sampledImageIntegerSampleCounts, true);
	view.setUint32(892, obj.properties.limits.sampledImageDepthSampleCounts, true);
	view.setUint32(896, obj.properties.limits.sampledImageStencilSampleCounts, true);
	view.setUint32(900, obj.properties.limits.storageImageSampleCounts, true);
	view.setUint32(904, obj.properties.limits.maxSampleMaskWords, true);
	view.setUint32(908, obj.properties.limits.timestampComputeAndGraphics, true);
	view.setFloat32(912, obj.properties.limits.timestampPeriod, true);
	view.setUint32(916, obj.properties.limits.maxClipDistances, true);
	view.setUint32(920, obj.properties.limits.maxCullDistances, true);
	view.setUint32(924, obj.properties.limits.maxCombinedClipAndCullDistances, true);
	view.setUint32(928, obj.properties.limits.discreteQueuePriorities, true);


	view.setFloat32(940, obj.properties.limits.pointSizeGranularity, true);
	view.setFloat32(944, obj.properties.limits.lineWidthGranularity, true);
	view.setUint32(948, obj.properties.limits.strictLines, true);
	view.setUint32(952, obj.properties.limits.standardSampleLocations, true);
	view.setUint64(960, obj.properties.limits.optimalBufferCopyOffsetAlignment, true);
	view.setUint64(968, obj.properties.limits.optimalBufferCopyRowPitchAlignment, true);
	view.setUint64(976, obj.properties.limits.nonCoherentAtomSize, true);
	}
	if (obj.properties.sparseProperties){
	view.setUint32(984, obj.properties.sparseProperties.residencyStandard2DBlockShape, true);
	view.setUint32(988, obj.properties.sparseProperties.residencyStandard2DMultisampleBlockShape, true);
	view.setUint32(992, obj.properties.sparseProperties.residencyStandard3DBlockShape, true);
	view.setUint32(996, obj.properties.sparseProperties.residencyAlignedMipSize, true);
	view.setUint32(1000, obj.properties.sparseProperties.residencyNonResidentStrict, true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		properties: null
	};
	return obj;
}


export function VkFormatProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkFormatProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.formatProperties){
	view.setUint32(16+(i*32), obj.formatProperties.linearTilingFeatures, true);
	view.setUint32(20+(i*32), obj.formatProperties.optimalTilingFeatures, true);
	view.setUint32(24+(i*32), obj.formatProperties.bufferFeatures, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.formatProperties){
	view.setUint32(16, obj.formatProperties.linearTilingFeatures, true);
	view.setUint32(20, obj.formatProperties.optimalTilingFeatures, true);
	view.setUint32(24, obj.formatProperties.bufferFeatures, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFormatProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		formatProperties: null
	};
	return obj;
}


export function VkImageFormatProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(60*size);
	return ptr(buffer);
}
export function VkImageFormatProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(60*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*60), obj.sType, true)

	view.setBigUint64(8+(i*60), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*60), BigInt(obj.pNext||0), true);

	if (obj.imageFormatProperties){
	if (obj.imageFormatProperties.maxExtent){
	view.setUint32(24+(i*60), obj.imageFormatProperties.maxExtent.width, true);
	view.setUint32(28+(i*60), obj.imageFormatProperties.maxExtent.height, true);
	view.setUint32(32+(i*60), obj.imageFormatProperties.maxExtent.depth, true);
	}
	view.setUint32(36+(i*60), obj.imageFormatProperties.maxMipLevels, true);
	view.setUint32(40+(i*60), obj.imageFormatProperties.maxArrayLayers, true);
	view.setUint32(44+(i*60), obj.imageFormatProperties.sampleCounts, true);
	view.setUint64(48+(i*60), obj.imageFormatProperties.maxResourceSize, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(60);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.imageFormatProperties){
	if (obj.imageFormatProperties.maxExtent){
	view.setUint32(24, obj.imageFormatProperties.maxExtent.width, true);
	view.setUint32(28, obj.imageFormatProperties.maxExtent.height, true);
	view.setUint32(32, obj.imageFormatProperties.maxExtent.depth, true);
	}
	view.setUint32(36, obj.imageFormatProperties.maxMipLevels, true);
	view.setUint32(40, obj.imageFormatProperties.maxArrayLayers, true);
	view.setUint32(44, obj.imageFormatProperties.sampleCounts, true);
	view.setUint64(48, obj.imageFormatProperties.maxResourceSize, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageFormatProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageFormatProperties: null
	};
	return obj;
}


export function VkPhysicalDeviceImageFormatInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageFormatInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.format, true)
	view.setUint32(20+(i*40), obj.type, true)
	view.setUint32(24+(i*40), obj.tiling, true)
	view.setUint32(28+(i*40), obj.usage, true);
	view.setUint32(32+(i*40), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.format, true)
	view.setUint32(20, obj.type, true)
	view.setUint32(24, obj.tiling, true)
	view.setUint32(28, obj.usage, true);
	view.setUint32(32, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageFormatInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		format: read.u32(ptr, 16),
		type: read.u32(ptr, 20),
		tiling: read.u32(ptr, 24),
		usage: read.u32(ptr, 28),
		flags: read.u32(ptr, 32)
	};
	return obj;
}


export function VkQueueFamilyProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkQueueFamilyProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	if (obj.queueFamilyProperties){
	view.setUint32(24+(i*48), obj.queueFamilyProperties.queueFlags, true);
	view.setUint32(28+(i*48), obj.queueFamilyProperties.queueCount, true);
	view.setUint32(32+(i*48), obj.queueFamilyProperties.timestampValidBits, true);
	if (obj.queueFamilyProperties.minImageTransferGranularity){
	view.setUint32(36+(i*48), obj.queueFamilyProperties.minImageTransferGranularity.width, true);
	view.setUint32(40+(i*48), obj.queueFamilyProperties.minImageTransferGranularity.height, true);
	view.setUint32(44+(i*48), obj.queueFamilyProperties.minImageTransferGranularity.depth, true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.queueFamilyProperties){
	view.setUint32(24, obj.queueFamilyProperties.queueFlags, true);
	view.setUint32(28, obj.queueFamilyProperties.queueCount, true);
	view.setUint32(32, obj.queueFamilyProperties.timestampValidBits, true);
	if (obj.queueFamilyProperties.minImageTransferGranularity){
	view.setUint32(36, obj.queueFamilyProperties.minImageTransferGranularity.width, true);
	view.setUint32(40, obj.queueFamilyProperties.minImageTransferGranularity.height, true);
	view.setUint32(44, obj.queueFamilyProperties.minImageTransferGranularity.depth, true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueueFamilyProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		queueFamilyProperties: null
	};
	return obj;
}


export function VkPhysicalDeviceMemoryProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMemoryProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	if (obj.memoryProperties){
	view.setUint32(16+(i*64), obj.memoryProperties.memoryTypeCount, true);

	view.setUint32(32+(i*64), obj.memoryProperties.memoryHeapCount, true);

	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.memoryProperties){
	view.setUint32(16, obj.memoryProperties.memoryTypeCount, true);

	view.setUint32(32, obj.memoryProperties.memoryHeapCount, true);

	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMemoryProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryProperties: null
	};
	return obj;
}


export function VkSparseImageFormatProperties2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkSparseImageFormatProperties2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	if (obj.properties){
	view.setUint32(24+(i*48), obj.properties.aspectMask, true);
	if (obj.properties.imageGranularity){
	view.setUint32(28+(i*48), obj.properties.imageGranularity.width, true);
	view.setUint32(32+(i*48), obj.properties.imageGranularity.height, true);
	view.setUint32(36+(i*48), obj.properties.imageGranularity.depth, true);
	}
	view.setUint32(40+(i*48), obj.properties.flags, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.properties){
	view.setUint32(24, obj.properties.aspectMask, true);
	if (obj.properties.imageGranularity){
	view.setUint32(28, obj.properties.imageGranularity.width, true);
	view.setUint32(32, obj.properties.imageGranularity.height, true);
	view.setUint32(36, obj.properties.imageGranularity.depth, true);
	}
	view.setUint32(40, obj.properties.flags, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSparseImageFormatProperties2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		properties: null
	};
	return obj;
}


export function VkPhysicalDeviceSparseImageFormatInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSparseImageFormatInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.format, true)
	view.setUint32(20+(i*40), obj.type, true)
	view.setUint32(24+(i*40), obj.samples, true)
	view.setUint32(28+(i*40), obj.usage, true);
	view.setUint32(32+(i*40), obj.tiling, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.format, true)
	view.setUint32(20, obj.type, true)
	view.setUint32(24, obj.samples, true)
	view.setUint32(28, obj.usage, true);
	view.setUint32(32, obj.tiling, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSparseImageFormatInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		format: read.u32(ptr, 16),
		type: read.u32(ptr, 20),
		samples: read.u32(ptr, 24),
		usage: read.u32(ptr, 28),
		tiling: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDevicePointClippingProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePointClippingProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pointClippingBehavior, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pointClippingBehavior, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePointClippingProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pointClippingBehavior: read.u32(ptr, 16)
	};
	return obj;
}


export function VkInputAttachmentAspectReference_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkInputAttachmentAspectReference_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.subpass, true);
	view.setUint32(4+(i*12), obj.inputAttachmentIndex, true);
	view.setUint32(8+(i*12), obj.aspectMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.subpass, true);
	view.setUint32(4, obj.inputAttachmentIndex, true);
	view.setUint32(8, obj.aspectMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkInputAttachmentAspectReference_from_C(ptr){
	const obj = {
		subpass: read.u32(ptr, 0),
		inputAttachmentIndex: read.u32(ptr, 4),
		aspectMask: read.u32(ptr, 8)
	};
	return obj;
}


export function VkRenderPassInputAttachmentAspectCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkRenderPassInputAttachmentAspectCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.aspectReferenceCount, true);
	if (obj.pAspectReferences){
		const wrapped = VkInputAttachmentAspectReference_to_C(obj.pAspectReferences, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pAspectReferences||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.aspectReferenceCount, true);
	if (obj.pAspectReferences){
		const wrapped = VkInputAttachmentAspectReference_to_C(obj.pAspectReferences, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pAspectReferences||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassInputAttachmentAspectCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		aspectReferenceCount: read.u32(ptr, 16),
		pAspectReferences: VkInputAttachmentAspectReference_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkImageViewUsageCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageViewUsageCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.usage, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.usage, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewUsageCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		usage: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineTessellationDomainOriginStateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineTessellationDomainOriginStateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.domainOrigin, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.domainOrigin, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineTessellationDomainOriginStateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		domainOrigin: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderPassMultiviewCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkRenderPassMultiviewCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.subpassCount, true);

	view.setBigUint64(24+(i*64), BigInt(obj.pViewMasks||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.pViewMasks||0), true);

	view.setUint32(32+(i*64), obj.dependencyCount, true);

	view.setBigUint64(40+(i*64), BigInt(obj.pViewOffsets||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.pViewOffsets||0), true);

	view.setUint32(48+(i*64), obj.correlationMaskCount, true);

	view.setBigUint64(56+(i*64), BigInt(obj.pCorrelationMasks||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.pCorrelationMasks||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subpassCount, true);

	view.setBigUint64(24, BigInt(obj.pViewMasks||0), true);
	view.setBigUint64(24, BigInt(obj.pViewMasks||0), true);

	view.setUint32(32, obj.dependencyCount, true);

	view.setBigUint64(40, BigInt(obj.pViewOffsets||0), true);
	view.setBigUint64(40, BigInt(obj.pViewOffsets||0), true);

	view.setUint32(48, obj.correlationMaskCount, true);

	view.setBigUint64(56, BigInt(obj.pCorrelationMasks||0), true);
	view.setBigUint64(56, BigInt(obj.pCorrelationMasks||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassMultiviewCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subpassCount: read.u32(ptr, 16),
		pViewMasks: undefined,
		dependencyCount: read.u32(ptr, 32),
		pViewOffsets: undefined,
		correlationMaskCount: read.u32(ptr, 48),
		pCorrelationMasks: undefined
	};
	return obj;
}


export function VkPhysicalDeviceMultiviewFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultiviewFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.multiview, true);
	view.setUint32(20+(i*32), obj.multiviewGeometryShader, true);
	view.setUint32(24+(i*32), obj.multiviewTessellationShader, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.multiview, true);
	view.setUint32(20, obj.multiviewGeometryShader, true);
	view.setUint32(24, obj.multiviewTessellationShader, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultiviewFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		multiview: read.u32(ptr, 16),
		multiviewGeometryShader: read.u32(ptr, 20),
		multiviewTessellationShader: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceMultiviewProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultiviewProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxMultiviewViewCount, true);
	view.setUint32(20+(i*24), obj.maxMultiviewInstanceIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxMultiviewViewCount, true);
	view.setUint32(20, obj.maxMultiviewInstanceIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultiviewProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxMultiviewViewCount: read.u32(ptr, 16),
		maxMultiviewInstanceIndex: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceVariablePointersFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVariablePointersFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.variablePointersStorageBuffer, true);
	view.setUint32(20+(i*24), obj.variablePointers, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.variablePointersStorageBuffer, true);
	view.setUint32(20, obj.variablePointers, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVariablePointersFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		variablePointersStorageBuffer: read.u32(ptr, 16),
		variablePointers: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceProtectedMemoryFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProtectedMemoryFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.protectedMemory, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.protectedMemory, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProtectedMemoryFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		protectedMemory: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceProtectedMemoryProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProtectedMemoryProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.protectedNoFault, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.protectedNoFault, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProtectedMemoryProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		protectedNoFault: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDeviceQueueInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDeviceQueueInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.queueFamilyIndex, true);
	view.setUint32(24+(i*32), obj.queueIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.queueFamilyIndex, true);
	view.setUint32(24, obj.queueIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceQueueInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		queueFamilyIndex: read.u32(ptr, 20),
		queueIndex: read.u32(ptr, 24)
	};
	return obj;
}


export function VkProtectedSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkProtectedSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.protectedSubmit, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.protectedSubmit, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkProtectedSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		protectedSubmit: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSamplerYcbcrConversionCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkSamplerYcbcrConversionCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.format, true)
	view.setUint32(20+(i*64), obj.ycbcrModel, true)
	view.setUint32(24+(i*64), obj.ycbcrRange, true)
	if (obj.components){
	view.setUint32(28+(i*64), obj.components.r, true)
	view.setUint32(32+(i*64), obj.components.g, true)
	view.setUint32(36+(i*64), obj.components.b, true)
	view.setUint32(40+(i*64), obj.components.a, true)
	}
	view.setUint32(44+(i*64), obj.xChromaOffset, true)
	view.setUint32(48+(i*64), obj.yChromaOffset, true)
	view.setUint32(52+(i*64), obj.chromaFilter, true)
	view.setUint32(56+(i*64), obj.forceExplicitReconstruction, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.format, true)
	view.setUint32(20, obj.ycbcrModel, true)
	view.setUint32(24, obj.ycbcrRange, true)
	if (obj.components){
	view.setUint32(28, obj.components.r, true)
	view.setUint32(32, obj.components.g, true)
	view.setUint32(36, obj.components.b, true)
	view.setUint32(40, obj.components.a, true)
	}
	view.setUint32(44, obj.xChromaOffset, true)
	view.setUint32(48, obj.yChromaOffset, true)
	view.setUint32(52, obj.chromaFilter, true)
	view.setUint32(56, obj.forceExplicitReconstruction, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerYcbcrConversionCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		format: read.u32(ptr, 16),
		ycbcrModel: read.u32(ptr, 20),
		ycbcrRange: read.u32(ptr, 24),
		components: null,
		xChromaOffset: read.u32(ptr, 44),
		yChromaOffset: read.u32(ptr, 48),
		chromaFilter: read.u32(ptr, 52),
		forceExplicitReconstruction: read.u32(ptr, 56)
	};
	return obj;
}


export function VkSamplerYcbcrConversionInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSamplerYcbcrConversionInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.conversion||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.conversion||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.conversion||0), true);
	view.setBigUint64(16, BigInt(obj.conversion||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerYcbcrConversionInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		conversion: undefined
	};
	return obj;
}


export function VkBindImagePlaneMemoryInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBindImagePlaneMemoryInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.planeAspect, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.planeAspect, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindImagePlaneMemoryInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		planeAspect: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImagePlaneMemoryRequirementsInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImagePlaneMemoryRequirementsInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.planeAspect, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.planeAspect, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImagePlaneMemoryRequirementsInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		planeAspect: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceSamplerYcbcrConversionFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSamplerYcbcrConversionFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.samplerYcbcrConversion, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.samplerYcbcrConversion, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSamplerYcbcrConversionFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		samplerYcbcrConversion: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSamplerYcbcrConversionImageFormatProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSamplerYcbcrConversionImageFormatProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.combinedImageSamplerDescriptorCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.combinedImageSamplerDescriptorCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerYcbcrConversionImageFormatProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		combinedImageSamplerDescriptorCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDescriptorUpdateTemplateEntry_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorUpdateTemplateEntry_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.dstBinding, true);
	view.setUint32(4+(i*32), obj.dstArrayElement, true);
	view.setUint32(8+(i*32), obj.descriptorCount, true);
	view.setUint32(12+(i*32), obj.descriptorType, true)

	view.setBigUint64(16+(i*32), BigInt(obj.offset||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.offset||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.stride||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.stride||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.dstBinding, true);
	view.setUint32(4, obj.dstArrayElement, true);
	view.setUint32(8, obj.descriptorCount, true);
	view.setUint32(12, obj.descriptorType, true)

	view.setBigUint64(16, BigInt(obj.offset||0), true);
	view.setBigUint64(16, BigInt(obj.offset||0), true);


	view.setBigUint64(24, BigInt(obj.stride||0), true);
	view.setBigUint64(24, BigInt(obj.stride||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorUpdateTemplateEntry_from_C(ptr){
	const obj = {
		dstBinding: read.u32(ptr, 0),
		dstArrayElement: read.u32(ptr, 4),
		descriptorCount: read.u32(ptr, 8),
		descriptorType: read.u32(ptr, 12),
		offset: undefined,
		stride: undefined
	};
	return obj;
}


export function VkDescriptorUpdateTemplateCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkDescriptorUpdateTemplateCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.flags, true);
	view.setUint32(20+(i*72), obj.descriptorUpdateEntryCount, true);
	if (obj.pDescriptorUpdateEntries){
		const wrapped = VkDescriptorUpdateTemplateEntry_to_C(obj.pDescriptorUpdateEntries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*72), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*72), BigInt(obj.pDescriptorUpdateEntries||0), true);
	}
	view.setUint32(32+(i*72), obj.templateType, true)

	view.setBigUint64(40+(i*72), BigInt(obj.descriptorSetLayout||0), true);
	view.setBigUint64(40+(i*72), BigInt(obj.descriptorSetLayout||0), true);

	view.setUint32(48+(i*72), obj.pipelineBindPoint, true)

	view.setBigUint64(56+(i*72), BigInt(obj.pipelineLayout||0), true);
	view.setBigUint64(56+(i*72), BigInt(obj.pipelineLayout||0), true);

	view.setUint32(64+(i*72), obj.set, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.descriptorUpdateEntryCount, true);
	if (obj.pDescriptorUpdateEntries){
		const wrapped = VkDescriptorUpdateTemplateEntry_to_C(obj.pDescriptorUpdateEntries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pDescriptorUpdateEntries||0), true);
	}
	view.setUint32(32, obj.templateType, true)

	view.setBigUint64(40, BigInt(obj.descriptorSetLayout||0), true);
	view.setBigUint64(40, BigInt(obj.descriptorSetLayout||0), true);

	view.setUint32(48, obj.pipelineBindPoint, true)

	view.setBigUint64(56, BigInt(obj.pipelineLayout||0), true);
	view.setBigUint64(56, BigInt(obj.pipelineLayout||0), true);

	view.setUint32(64, obj.set, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorUpdateTemplateCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		descriptorUpdateEntryCount: read.u32(ptr, 20),
		pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry_from_C(read.ptr(ptr)),
		templateType: read.u32(ptr, 32),
		descriptorSetLayout: undefined,
		pipelineBindPoint: read.u32(ptr, 48),
		pipelineLayout: undefined,
		set: read.u32(ptr, 64)
	};
	return obj;
}


export function VkExternalMemoryProperties_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkExternalMemoryProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.externalMemoryFeatures, true);
	view.setUint32(4+(i*12), obj.exportFromImportedHandleTypes, true);
	view.setUint32(8+(i*12), obj.compatibleHandleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.externalMemoryFeatures, true);
	view.setUint32(4, obj.exportFromImportedHandleTypes, true);
	view.setUint32(8, obj.compatibleHandleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalMemoryProperties_from_C(ptr){
	const obj = {
		externalMemoryFeatures: read.u32(ptr, 0),
		exportFromImportedHandleTypes: read.u32(ptr, 4),
		compatibleHandleTypes: read.u32(ptr, 8)
	};
	return obj;
}


export function VkPhysicalDeviceExternalImageFormatInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalImageFormatInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalImageFormatInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleType: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExternalImageFormatProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkExternalImageFormatProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.externalMemoryProperties){
	view.setUint32(16+(i*32), obj.externalMemoryProperties.externalMemoryFeatures, true);
	view.setUint32(20+(i*32), obj.externalMemoryProperties.exportFromImportedHandleTypes, true);
	view.setUint32(24+(i*32), obj.externalMemoryProperties.compatibleHandleTypes, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.externalMemoryProperties){
	view.setUint32(16, obj.externalMemoryProperties.externalMemoryFeatures, true);
	view.setUint32(20, obj.externalMemoryProperties.exportFromImportedHandleTypes, true);
	view.setUint32(24, obj.externalMemoryProperties.compatibleHandleTypes, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalImageFormatProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		externalMemoryProperties: null
	};
	return obj;
}


export function VkPhysicalDeviceExternalBufferInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalBufferInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.usage, true);
	view.setUint32(24+(i*32), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.usage, true);
	view.setUint32(24, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalBufferInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		usage: read.u32(ptr, 20),
		handleType: read.u32(ptr, 24)
	};
	return obj;
}


export function VkExternalBufferProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkExternalBufferProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.externalMemoryProperties){
	view.setUint32(16+(i*32), obj.externalMemoryProperties.externalMemoryFeatures, true);
	view.setUint32(20+(i*32), obj.externalMemoryProperties.exportFromImportedHandleTypes, true);
	view.setUint32(24+(i*32), obj.externalMemoryProperties.compatibleHandleTypes, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.externalMemoryProperties){
	view.setUint32(16, obj.externalMemoryProperties.externalMemoryFeatures, true);
	view.setUint32(20, obj.externalMemoryProperties.exportFromImportedHandleTypes, true);
	view.setUint32(24, obj.externalMemoryProperties.compatibleHandleTypes, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalBufferProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		externalMemoryProperties: null
	};
	return obj;
}


export function VkPhysicalDeviceIDProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceIDProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);




	view.setUint32(20+(i*32), obj.deviceNodeMask, true);
	view.setUint32(24+(i*32), obj.deviceLUIDValid, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);




	view.setUint32(20, obj.deviceNodeMask, true);
	view.setUint32(24, obj.deviceLUIDValid, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceIDProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceUUID: null,
		driverUUID: null,
		deviceLUID: null,
		deviceNodeMask: read.u32(ptr, 20),
		deviceLUIDValid: read.u32(ptr, 24)
	};
	return obj;
}


export function VkExternalMemoryImageCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExternalMemoryImageCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalMemoryImageCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExternalMemoryBufferCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExternalMemoryBufferCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalMemoryBufferCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExportMemoryAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExportMemoryAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExportMemoryAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceExternalFenceInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalFenceInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalFenceInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleType: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExternalFenceProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkExternalFenceProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.exportFromImportedHandleTypes, true);
	view.setUint32(20+(i*32), obj.compatibleHandleTypes, true);
	view.setUint32(24+(i*32), obj.externalFenceFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.exportFromImportedHandleTypes, true);
	view.setUint32(20, obj.compatibleHandleTypes, true);
	view.setUint32(24, obj.externalFenceFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalFenceProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		exportFromImportedHandleTypes: read.u32(ptr, 16),
		compatibleHandleTypes: read.u32(ptr, 20),
		externalFenceFeatures: read.u32(ptr, 24)
	};
	return obj;
}


export function VkExportFenceCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExportFenceCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExportFenceCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExportSemaphoreCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExportSemaphoreCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExportSemaphoreCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceExternalSemaphoreInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalSemaphoreInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalSemaphoreInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleType: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExternalSemaphoreProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkExternalSemaphoreProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.exportFromImportedHandleTypes, true);
	view.setUint32(20+(i*32), obj.compatibleHandleTypes, true);
	view.setUint32(24+(i*32), obj.externalSemaphoreFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.exportFromImportedHandleTypes, true);
	view.setUint32(20, obj.compatibleHandleTypes, true);
	view.setUint32(24, obj.externalSemaphoreFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalSemaphoreProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		exportFromImportedHandleTypes: read.u32(ptr, 16),
		compatibleHandleTypes: read.u32(ptr, 20),
		externalSemaphoreFeatures: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceMaintenance3Properties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMaintenance3Properties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.maxPerSetDescriptors, true);
	view.setUint64(24+(i*32), obj.maxMemoryAllocationSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxPerSetDescriptors, true);
	view.setUint64(24, obj.maxMemoryAllocationSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMaintenance3Properties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxPerSetDescriptors: read.u32(ptr, 16),
		maxMemoryAllocationSize: null
	};
	return obj;
}


export function VkDescriptorSetLayoutSupport_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorSetLayoutSupport_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.supported, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.supported, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetLayoutSupport_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		supported: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderDrawParametersFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderDrawParametersFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderDrawParameters, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderDrawParameters, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderDrawParametersFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderDrawParameters: read.u32(ptr, 16)
	};
	return obj;
}

export const VkDriverId = {
	VK_DRIVER_ID_AMD_PROPRIETARY: 1,
	VK_DRIVER_ID_AMD_OPEN_SOURCE: 2,
	VK_DRIVER_ID_MESA_RADV: 3,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY: 4,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: 5,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: 6,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY: 7,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY: 8,
	VK_DRIVER_ID_ARM_PROPRIETARY: 9,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER: 10,
	VK_DRIVER_ID_GGP_PROPRIETARY: 11,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY: 12,
	VK_DRIVER_ID_MESA_LLVMPIPE: 13,
	VK_DRIVER_ID_MOLTENVK: 14,
	VK_DRIVER_ID_COREAVI_PROPRIETARY: 15,
	VK_DRIVER_ID_JUICE_PROPRIETARY: 16,
	VK_DRIVER_ID_VERISILICON_PROPRIETARY: 17,
	VK_DRIVER_ID_MESA_TURNIP: 18,
	VK_DRIVER_ID_MESA_V3DV: 19,
	VK_DRIVER_ID_MESA_PANVK: 20,
	VK_DRIVER_ID_SAMSUNG_PROPRIETARY: 21,
	VK_DRIVER_ID_MESA_VENUS: 22,
	VK_DRIVER_ID_MESA_DOZEN: 23,
	VK_DRIVER_ID_AMD_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: NaN,
	VK_DRIVER_ID_MESA_RADV_KHR: NaN,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: NaN,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: NaN,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_ARM_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: NaN,
	VK_DRIVER_ID_GGP_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: NaN,
	VK_DRIVER_ID_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_DRIVER_ID_AMD_PROPRIETARY",
		"2": "VK_DRIVER_ID_AMD_OPEN_SOURCE",
		"3": "VK_DRIVER_ID_MESA_RADV",
		"4": "VK_DRIVER_ID_NVIDIA_PROPRIETARY",
		"5": "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS",
		"6": "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA",
		"7": "VK_DRIVER_ID_IMAGINATION_PROPRIETARY",
		"8": "VK_DRIVER_ID_QUALCOMM_PROPRIETARY",
		"9": "VK_DRIVER_ID_ARM_PROPRIETARY",
		"10": "VK_DRIVER_ID_GOOGLE_SWIFTSHADER",
		"11": "VK_DRIVER_ID_GGP_PROPRIETARY",
		"12": "VK_DRIVER_ID_BROADCOM_PROPRIETARY",
		"13": "VK_DRIVER_ID_MESA_LLVMPIPE",
		"14": "VK_DRIVER_ID_MOLTENVK",
		"15": "VK_DRIVER_ID_COREAVI_PROPRIETARY",
		"16": "VK_DRIVER_ID_JUICE_PROPRIETARY",
		"17": "VK_DRIVER_ID_VERISILICON_PROPRIETARY",
		"18": "VK_DRIVER_ID_MESA_TURNIP",
		"19": "VK_DRIVER_ID_MESA_V3DV",
		"20": "VK_DRIVER_ID_MESA_PANVK",
		"21": "VK_DRIVER_ID_SAMSUNG_PROPRIETARY",
		"22": "VK_DRIVER_ID_MESA_VENUS",
		"23": "VK_DRIVER_ID_MESA_DOZEN",
		"NaN": "VK_DRIVER_ID_AMD_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR",
		"NaN": "VK_DRIVER_ID_MESA_RADV_KHR",
		"NaN": "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR",
		"NaN": "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR",
		"NaN": "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_ARM_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR",
		"NaN": "VK_DRIVER_ID_GGP_PROPRIETARY_KHR",
		"NaN": "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR",
		"2147483647": "VK_DRIVER_ID_MAX_ENUM",
}};
export const VkShaderFloatControlsIndependence = {
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: 0,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: 1,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: 2,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: NaN,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: NaN,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: NaN,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY",
		"1": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL",
		"2": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE",
		"NaN": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR",
		"NaN": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR",
		"NaN": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR",
		"2147483647": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM",
}};
export const VkSamplerReductionMode = {
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: 0,
	VK_SAMPLER_REDUCTION_MODE_MIN: 1,
	VK_SAMPLER_REDUCTION_MODE_MAX: 2,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: NaN,
	VK_SAMPLER_REDUCTION_MODE_MIN_EXT: NaN,
	VK_SAMPLER_REDUCTION_MODE_MAX_EXT: NaN,
	VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE",
		"1": "VK_SAMPLER_REDUCTION_MODE_MIN",
		"2": "VK_SAMPLER_REDUCTION_MODE_MAX",
		"NaN": "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT",
		"NaN": "VK_SAMPLER_REDUCTION_MODE_MIN_EXT",
		"NaN": "VK_SAMPLER_REDUCTION_MODE_MAX_EXT",
		"2147483647": "VK_SAMPLER_REDUCTION_MODE_MAX_ENUM",
}};
export const VkSemaphoreType = {
	VK_SEMAPHORE_TYPE_BINARY: 0,
	VK_SEMAPHORE_TYPE_TIMELINE: 1,
	VK_SEMAPHORE_TYPE_BINARY_KHR: NaN,
	VK_SEMAPHORE_TYPE_TIMELINE_KHR: NaN,
	VK_SEMAPHORE_TYPE_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_SEMAPHORE_TYPE_BINARY",
		"1": "VK_SEMAPHORE_TYPE_TIMELINE",
		"NaN": "VK_SEMAPHORE_TYPE_BINARY_KHR",
		"NaN": "VK_SEMAPHORE_TYPE_TIMELINE_KHR",
		"2147483647": "VK_SEMAPHORE_TYPE_MAX_ENUM",
}};
export const VkResolveModeFlagBits = {
	VK_RESOLVE_MODE_NONE: 0,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: 1,
	VK_RESOLVE_MODE_AVERAGE_BIT: 2,
	VK_RESOLVE_MODE_MIN_BIT: 4,
	VK_RESOLVE_MODE_MAX_BIT: 8,
	VK_RESOLVE_MODE_NONE_KHR: NaN,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: NaN,
	VK_RESOLVE_MODE_AVERAGE_BIT_KHR: NaN,
	VK_RESOLVE_MODE_MIN_BIT_KHR: NaN,
	VK_RESOLVE_MODE_MAX_BIT_KHR: NaN,
	VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"0": "VK_RESOLVE_MODE_NONE",
		"1": "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT",
		"2": "VK_RESOLVE_MODE_AVERAGE_BIT",
		"4": "VK_RESOLVE_MODE_MIN_BIT",
		"8": "VK_RESOLVE_MODE_MAX_BIT",
		"NaN": "VK_RESOLVE_MODE_NONE_KHR",
		"NaN": "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR",
		"NaN": "VK_RESOLVE_MODE_AVERAGE_BIT_KHR",
		"NaN": "VK_RESOLVE_MODE_MIN_BIT_KHR",
		"NaN": "VK_RESOLVE_MODE_MAX_BIT_KHR",
		"2147483647": "VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM",
}};
export const VkDescriptorBindingFlagBits = {
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: 1,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: 2,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: 4,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: 8,
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: NaN,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: NaN,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: NaN,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: NaN,
	VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT",
		"2": "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT",
		"4": "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT",
		"8": "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT",
		"NaN": "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT",
		"NaN": "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT",
		"NaN": "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT",
		"NaN": "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT",
		"2147483647": "VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM",
}};
export const VkSemaphoreWaitFlagBits = {
	VK_SEMAPHORE_WAIT_ANY_BIT: 1,
	VK_SEMAPHORE_WAIT_ANY_BIT_KHR: NaN,
	VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SEMAPHORE_WAIT_ANY_BIT",
		"NaN": "VK_SEMAPHORE_WAIT_ANY_BIT_KHR",
		"2147483647": "VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM",
}};

export function VkPhysicalDeviceVulkan11Features_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan11Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.storageBuffer16BitAccess, true);
	view.setUint32(20+(i*64), obj.uniformAndStorageBuffer16BitAccess, true);
	view.setUint32(24+(i*64), obj.storagePushConstant16, true);
	view.setUint32(28+(i*64), obj.storageInputOutput16, true);
	view.setUint32(32+(i*64), obj.multiview, true);
	view.setUint32(36+(i*64), obj.multiviewGeometryShader, true);
	view.setUint32(40+(i*64), obj.multiviewTessellationShader, true);
	view.setUint32(44+(i*64), obj.variablePointersStorageBuffer, true);
	view.setUint32(48+(i*64), obj.variablePointers, true);
	view.setUint32(52+(i*64), obj.protectedMemory, true);
	view.setUint32(56+(i*64), obj.samplerYcbcrConversion, true);
	view.setUint32(60+(i*64), obj.shaderDrawParameters, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.storageBuffer16BitAccess, true);
	view.setUint32(20, obj.uniformAndStorageBuffer16BitAccess, true);
	view.setUint32(24, obj.storagePushConstant16, true);
	view.setUint32(28, obj.storageInputOutput16, true);
	view.setUint32(32, obj.multiview, true);
	view.setUint32(36, obj.multiviewGeometryShader, true);
	view.setUint32(40, obj.multiviewTessellationShader, true);
	view.setUint32(44, obj.variablePointersStorageBuffer, true);
	view.setUint32(48, obj.variablePointers, true);
	view.setUint32(52, obj.protectedMemory, true);
	view.setUint32(56, obj.samplerYcbcrConversion, true);
	view.setUint32(60, obj.shaderDrawParameters, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan11Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		storageBuffer16BitAccess: read.u32(ptr, 16),
		uniformAndStorageBuffer16BitAccess: read.u32(ptr, 20),
		storagePushConstant16: read.u32(ptr, 24),
		storageInputOutput16: read.u32(ptr, 28),
		multiview: read.u32(ptr, 32),
		multiviewGeometryShader: read.u32(ptr, 36),
		multiviewTessellationShader: read.u32(ptr, 40),
		variablePointersStorageBuffer: read.u32(ptr, 44),
		variablePointers: read.u32(ptr, 48),
		protectedMemory: read.u32(ptr, 52),
		samplerYcbcrConversion: read.u32(ptr, 56),
		shaderDrawParameters: read.u32(ptr, 60)
	};
	return obj;
}


export function VkPhysicalDeviceVulkan11Properties_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan11Properties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);




	view.setUint32(20+(i*72), obj.deviceNodeMask, true);
	view.setUint32(24+(i*72), obj.deviceLUIDValid, true);
	view.setUint32(28+(i*72), obj.subgroupSize, true);
	view.setUint32(32+(i*72), obj.subgroupSupportedStages, true);
	view.setUint32(36+(i*72), obj.subgroupSupportedOperations, true);
	view.setUint32(40+(i*72), obj.subgroupQuadOperationsInAllStages, true);
	view.setUint32(44+(i*72), obj.pointClippingBehavior, true)
	view.setUint32(48+(i*72), obj.maxMultiviewViewCount, true);
	view.setUint32(52+(i*72), obj.maxMultiviewInstanceIndex, true);
	view.setUint32(56+(i*72), obj.protectedNoFault, true);
	view.setUint32(60+(i*72), obj.maxPerSetDescriptors, true);
	view.setUint64(64+(i*72), obj.maxMemoryAllocationSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);




	view.setUint32(20, obj.deviceNodeMask, true);
	view.setUint32(24, obj.deviceLUIDValid, true);
	view.setUint32(28, obj.subgroupSize, true);
	view.setUint32(32, obj.subgroupSupportedStages, true);
	view.setUint32(36, obj.subgroupSupportedOperations, true);
	view.setUint32(40, obj.subgroupQuadOperationsInAllStages, true);
	view.setUint32(44, obj.pointClippingBehavior, true)
	view.setUint32(48, obj.maxMultiviewViewCount, true);
	view.setUint32(52, obj.maxMultiviewInstanceIndex, true);
	view.setUint32(56, obj.protectedNoFault, true);
	view.setUint32(60, obj.maxPerSetDescriptors, true);
	view.setUint64(64, obj.maxMemoryAllocationSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan11Properties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceUUID: null,
		driverUUID: null,
		deviceLUID: null,
		deviceNodeMask: read.u32(ptr, 20),
		deviceLUIDValid: read.u32(ptr, 24),
		subgroupSize: read.u32(ptr, 28),
		subgroupSupportedStages: read.u32(ptr, 32),
		subgroupSupportedOperations: read.u32(ptr, 36),
		subgroupQuadOperationsInAllStages: read.u32(ptr, 40),
		pointClippingBehavior: read.u32(ptr, 44),
		maxMultiviewViewCount: read.u32(ptr, 48),
		maxMultiviewInstanceIndex: read.u32(ptr, 52),
		protectedNoFault: read.u32(ptr, 56),
		maxPerSetDescriptors: read.u32(ptr, 60),
		maxMemoryAllocationSize: null
	};
	return obj;
}


export function VkPhysicalDeviceVulkan12Features_alloc_array(size){
	const buffer = new ArrayBuffer(208*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan12Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(208*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*208), obj.sType, true)

	view.setBigUint64(8+(i*208), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*208), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*208), obj.samplerMirrorClampToEdge, true);
	view.setUint32(20+(i*208), obj.drawIndirectCount, true);
	view.setUint32(24+(i*208), obj.storageBuffer8BitAccess, true);
	view.setUint32(28+(i*208), obj.uniformAndStorageBuffer8BitAccess, true);
	view.setUint32(32+(i*208), obj.storagePushConstant8, true);
	view.setUint32(36+(i*208), obj.shaderBufferInt64Atomics, true);
	view.setUint32(40+(i*208), obj.shaderSharedInt64Atomics, true);
	view.setUint32(44+(i*208), obj.shaderFloat16, true);
	view.setUint32(48+(i*208), obj.shaderInt8, true);
	view.setUint32(52+(i*208), obj.descriptorIndexing, true);
	view.setUint32(56+(i*208), obj.shaderInputAttachmentArrayDynamicIndexing, true);
	view.setUint32(60+(i*208), obj.shaderUniformTexelBufferArrayDynamicIndexing, true);
	view.setUint32(64+(i*208), obj.shaderStorageTexelBufferArrayDynamicIndexing, true);
	view.setUint32(68+(i*208), obj.shaderUniformBufferArrayNonUniformIndexing, true);
	view.setUint32(72+(i*208), obj.shaderSampledImageArrayNonUniformIndexing, true);
	view.setUint32(76+(i*208), obj.shaderStorageBufferArrayNonUniformIndexing, true);
	view.setUint32(80+(i*208), obj.shaderStorageImageArrayNonUniformIndexing, true);
	view.setUint32(84+(i*208), obj.shaderInputAttachmentArrayNonUniformIndexing, true);
	view.setUint32(88+(i*208), obj.shaderUniformTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(92+(i*208), obj.shaderStorageTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(96+(i*208), obj.descriptorBindingUniformBufferUpdateAfterBind, true);
	view.setUint32(100+(i*208), obj.descriptorBindingSampledImageUpdateAfterBind, true);
	view.setUint32(104+(i*208), obj.descriptorBindingStorageImageUpdateAfterBind, true);
	view.setUint32(108+(i*208), obj.descriptorBindingStorageBufferUpdateAfterBind, true);
	view.setUint32(112+(i*208), obj.descriptorBindingUniformTexelBufferUpdateAfterBind, true);
	view.setUint32(116+(i*208), obj.descriptorBindingStorageTexelBufferUpdateAfterBind, true);
	view.setUint32(120+(i*208), obj.descriptorBindingUpdateUnusedWhilePending, true);
	view.setUint32(124+(i*208), obj.descriptorBindingPartiallyBound, true);
	view.setUint32(128+(i*208), obj.descriptorBindingVariableDescriptorCount, true);
	view.setUint32(132+(i*208), obj.runtimeDescriptorArray, true);
	view.setUint32(136+(i*208), obj.samplerFilterMinmax, true);
	view.setUint32(140+(i*208), obj.scalarBlockLayout, true);
	view.setUint32(144+(i*208), obj.imagelessFramebuffer, true);
	view.setUint32(148+(i*208), obj.uniformBufferStandardLayout, true);
	view.setUint32(152+(i*208), obj.shaderSubgroupExtendedTypes, true);
	view.setUint32(156+(i*208), obj.separateDepthStencilLayouts, true);
	view.setUint32(160+(i*208), obj.hostQueryReset, true);
	view.setUint32(164+(i*208), obj.timelineSemaphore, true);
	view.setUint32(168+(i*208), obj.bufferDeviceAddress, true);
	view.setUint32(172+(i*208), obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(176+(i*208), obj.bufferDeviceAddressMultiDevice, true);
	view.setUint32(180+(i*208), obj.vulkanMemoryModel, true);
	view.setUint32(184+(i*208), obj.vulkanMemoryModelDeviceScope, true);
	view.setUint32(188+(i*208), obj.vulkanMemoryModelAvailabilityVisibilityChains, true);
	view.setUint32(192+(i*208), obj.shaderOutputViewportIndex, true);
	view.setUint32(196+(i*208), obj.shaderOutputLayer, true);
	view.setUint32(200+(i*208), obj.subgroupBroadcastDynamicId, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(208);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.samplerMirrorClampToEdge, true);
	view.setUint32(20, obj.drawIndirectCount, true);
	view.setUint32(24, obj.storageBuffer8BitAccess, true);
	view.setUint32(28, obj.uniformAndStorageBuffer8BitAccess, true);
	view.setUint32(32, obj.storagePushConstant8, true);
	view.setUint32(36, obj.shaderBufferInt64Atomics, true);
	view.setUint32(40, obj.shaderSharedInt64Atomics, true);
	view.setUint32(44, obj.shaderFloat16, true);
	view.setUint32(48, obj.shaderInt8, true);
	view.setUint32(52, obj.descriptorIndexing, true);
	view.setUint32(56, obj.shaderInputAttachmentArrayDynamicIndexing, true);
	view.setUint32(60, obj.shaderUniformTexelBufferArrayDynamicIndexing, true);
	view.setUint32(64, obj.shaderStorageTexelBufferArrayDynamicIndexing, true);
	view.setUint32(68, obj.shaderUniformBufferArrayNonUniformIndexing, true);
	view.setUint32(72, obj.shaderSampledImageArrayNonUniformIndexing, true);
	view.setUint32(76, obj.shaderStorageBufferArrayNonUniformIndexing, true);
	view.setUint32(80, obj.shaderStorageImageArrayNonUniformIndexing, true);
	view.setUint32(84, obj.shaderInputAttachmentArrayNonUniformIndexing, true);
	view.setUint32(88, obj.shaderUniformTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(92, obj.shaderStorageTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(96, obj.descriptorBindingUniformBufferUpdateAfterBind, true);
	view.setUint32(100, obj.descriptorBindingSampledImageUpdateAfterBind, true);
	view.setUint32(104, obj.descriptorBindingStorageImageUpdateAfterBind, true);
	view.setUint32(108, obj.descriptorBindingStorageBufferUpdateAfterBind, true);
	view.setUint32(112, obj.descriptorBindingUniformTexelBufferUpdateAfterBind, true);
	view.setUint32(116, obj.descriptorBindingStorageTexelBufferUpdateAfterBind, true);
	view.setUint32(120, obj.descriptorBindingUpdateUnusedWhilePending, true);
	view.setUint32(124, obj.descriptorBindingPartiallyBound, true);
	view.setUint32(128, obj.descriptorBindingVariableDescriptorCount, true);
	view.setUint32(132, obj.runtimeDescriptorArray, true);
	view.setUint32(136, obj.samplerFilterMinmax, true);
	view.setUint32(140, obj.scalarBlockLayout, true);
	view.setUint32(144, obj.imagelessFramebuffer, true);
	view.setUint32(148, obj.uniformBufferStandardLayout, true);
	view.setUint32(152, obj.shaderSubgroupExtendedTypes, true);
	view.setUint32(156, obj.separateDepthStencilLayouts, true);
	view.setUint32(160, obj.hostQueryReset, true);
	view.setUint32(164, obj.timelineSemaphore, true);
	view.setUint32(168, obj.bufferDeviceAddress, true);
	view.setUint32(172, obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(176, obj.bufferDeviceAddressMultiDevice, true);
	view.setUint32(180, obj.vulkanMemoryModel, true);
	view.setUint32(184, obj.vulkanMemoryModelDeviceScope, true);
	view.setUint32(188, obj.vulkanMemoryModelAvailabilityVisibilityChains, true);
	view.setUint32(192, obj.shaderOutputViewportIndex, true);
	view.setUint32(196, obj.shaderOutputLayer, true);
	view.setUint32(200, obj.subgroupBroadcastDynamicId, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan12Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		samplerMirrorClampToEdge: read.u32(ptr, 16),
		drawIndirectCount: read.u32(ptr, 20),
		storageBuffer8BitAccess: read.u32(ptr, 24),
		uniformAndStorageBuffer8BitAccess: read.u32(ptr, 28),
		storagePushConstant8: read.u32(ptr, 32),
		shaderBufferInt64Atomics: read.u32(ptr, 36),
		shaderSharedInt64Atomics: read.u32(ptr, 40),
		shaderFloat16: read.u32(ptr, 44),
		shaderInt8: read.u32(ptr, 48),
		descriptorIndexing: read.u32(ptr, 52),
		shaderInputAttachmentArrayDynamicIndexing: read.u32(ptr, 56),
		shaderUniformTexelBufferArrayDynamicIndexing: read.u32(ptr, 60),
		shaderStorageTexelBufferArrayDynamicIndexing: read.u32(ptr, 64),
		shaderUniformBufferArrayNonUniformIndexing: read.u32(ptr, 68),
		shaderSampledImageArrayNonUniformIndexing: read.u32(ptr, 72),
		shaderStorageBufferArrayNonUniformIndexing: read.u32(ptr, 76),
		shaderStorageImageArrayNonUniformIndexing: read.u32(ptr, 80),
		shaderInputAttachmentArrayNonUniformIndexing: read.u32(ptr, 84),
		shaderUniformTexelBufferArrayNonUniformIndexing: read.u32(ptr, 88),
		shaderStorageTexelBufferArrayNonUniformIndexing: read.u32(ptr, 92),
		descriptorBindingUniformBufferUpdateAfterBind: read.u32(ptr, 96),
		descriptorBindingSampledImageUpdateAfterBind: read.u32(ptr, 100),
		descriptorBindingStorageImageUpdateAfterBind: read.u32(ptr, 104),
		descriptorBindingStorageBufferUpdateAfterBind: read.u32(ptr, 108),
		descriptorBindingUniformTexelBufferUpdateAfterBind: read.u32(ptr, 112),
		descriptorBindingStorageTexelBufferUpdateAfterBind: read.u32(ptr, 116),
		descriptorBindingUpdateUnusedWhilePending: read.u32(ptr, 120),
		descriptorBindingPartiallyBound: read.u32(ptr, 124),
		descriptorBindingVariableDescriptorCount: read.u32(ptr, 128),
		runtimeDescriptorArray: read.u32(ptr, 132),
		samplerFilterMinmax: read.u32(ptr, 136),
		scalarBlockLayout: read.u32(ptr, 140),
		imagelessFramebuffer: read.u32(ptr, 144),
		uniformBufferStandardLayout: read.u32(ptr, 148),
		shaderSubgroupExtendedTypes: read.u32(ptr, 152),
		separateDepthStencilLayouts: read.u32(ptr, 156),
		hostQueryReset: read.u32(ptr, 160),
		timelineSemaphore: read.u32(ptr, 164),
		bufferDeviceAddress: read.u32(ptr, 168),
		bufferDeviceAddressCaptureReplay: read.u32(ptr, 172),
		bufferDeviceAddressMultiDevice: read.u32(ptr, 176),
		vulkanMemoryModel: read.u32(ptr, 180),
		vulkanMemoryModelDeviceScope: read.u32(ptr, 184),
		vulkanMemoryModelAvailabilityVisibilityChains: read.u32(ptr, 188),
		shaderOutputViewportIndex: read.u32(ptr, 192),
		shaderOutputLayer: read.u32(ptr, 196),
		subgroupBroadcastDynamicId: read.u32(ptr, 200)
	};
	return obj;
}


export function VkConformanceVersion_alloc_array(size){
	const buffer = new ArrayBuffer(4*size);
	return ptr(buffer);
}
export function VkConformanceVersion_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(4*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint8(0+(i*4), obj.major, true);
	view.setUint8(1+(i*4), obj.minor, true);
	view.setUint8(2+(i*4), obj.subminor, true);
	view.setUint8(3+(i*4), obj.patch, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(4);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint8(0, obj.major, true);
	view.setUint8(1, obj.minor, true);
	view.setUint8(2, obj.subminor, true);
	view.setUint8(3, obj.patch, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkConformanceVersion_from_C(ptr){
	const obj = {
		major: null,
		minor: null,
		subminor: null,
		patch: null
	};
	return obj;
}


export function VkPhysicalDeviceVulkan12Properties_alloc_array(size){
	const buffer = new ArrayBuffer(248*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan12Properties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(248*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*248), obj.sType, true)

	view.setBigUint64(8+(i*248), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*248), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*248), obj.driverID, true)


	if (obj.conformanceVersion){
	view.setUint8(40+(i*248), obj.conformanceVersion.major, true);
	view.setUint8(41+(i*248), obj.conformanceVersion.minor, true);
	view.setUint8(42+(i*248), obj.conformanceVersion.subminor, true);
	view.setUint8(43+(i*248), obj.conformanceVersion.patch, true);
	}
	view.setUint32(44+(i*248), obj.denormBehaviorIndependence, true)
	view.setUint32(48+(i*248), obj.roundingModeIndependence, true)
	view.setUint32(52+(i*248), obj.shaderSignedZeroInfNanPreserveFloat16, true);
	view.setUint32(56+(i*248), obj.shaderSignedZeroInfNanPreserveFloat32, true);
	view.setUint32(60+(i*248), obj.shaderSignedZeroInfNanPreserveFloat64, true);
	view.setUint32(64+(i*248), obj.shaderDenormPreserveFloat16, true);
	view.setUint32(68+(i*248), obj.shaderDenormPreserveFloat32, true);
	view.setUint32(72+(i*248), obj.shaderDenormPreserveFloat64, true);
	view.setUint32(76+(i*248), obj.shaderDenormFlushToZeroFloat16, true);
	view.setUint32(80+(i*248), obj.shaderDenormFlushToZeroFloat32, true);
	view.setUint32(84+(i*248), obj.shaderDenormFlushToZeroFloat64, true);
	view.setUint32(88+(i*248), obj.shaderRoundingModeRTEFloat16, true);
	view.setUint32(92+(i*248), obj.shaderRoundingModeRTEFloat32, true);
	view.setUint32(96+(i*248), obj.shaderRoundingModeRTEFloat64, true);
	view.setUint32(100+(i*248), obj.shaderRoundingModeRTZFloat16, true);
	view.setUint32(104+(i*248), obj.shaderRoundingModeRTZFloat32, true);
	view.setUint32(108+(i*248), obj.shaderRoundingModeRTZFloat64, true);
	view.setUint32(112+(i*248), obj.maxUpdateAfterBindDescriptorsInAllPools, true);
	view.setUint32(116+(i*248), obj.shaderUniformBufferArrayNonUniformIndexingNative, true);
	view.setUint32(120+(i*248), obj.shaderSampledImageArrayNonUniformIndexingNative, true);
	view.setUint32(124+(i*248), obj.shaderStorageBufferArrayNonUniformIndexingNative, true);
	view.setUint32(128+(i*248), obj.shaderStorageImageArrayNonUniformIndexingNative, true);
	view.setUint32(132+(i*248), obj.shaderInputAttachmentArrayNonUniformIndexingNative, true);
	view.setUint32(136+(i*248), obj.robustBufferAccessUpdateAfterBind, true);
	view.setUint32(140+(i*248), obj.quadDivergentImplicitLod, true);
	view.setUint32(144+(i*248), obj.maxPerStageDescriptorUpdateAfterBindSamplers, true);
	view.setUint32(148+(i*248), obj.maxPerStageDescriptorUpdateAfterBindUniformBuffers, true);
	view.setUint32(152+(i*248), obj.maxPerStageDescriptorUpdateAfterBindStorageBuffers, true);
	view.setUint32(156+(i*248), obj.maxPerStageDescriptorUpdateAfterBindSampledImages, true);
	view.setUint32(160+(i*248), obj.maxPerStageDescriptorUpdateAfterBindStorageImages, true);
	view.setUint32(164+(i*248), obj.maxPerStageDescriptorUpdateAfterBindInputAttachments, true);
	view.setUint32(168+(i*248), obj.maxPerStageUpdateAfterBindResources, true);
	view.setUint32(172+(i*248), obj.maxDescriptorSetUpdateAfterBindSamplers, true);
	view.setUint32(176+(i*248), obj.maxDescriptorSetUpdateAfterBindUniformBuffers, true);
	view.setUint32(180+(i*248), obj.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, true);
	view.setUint32(184+(i*248), obj.maxDescriptorSetUpdateAfterBindStorageBuffers, true);
	view.setUint32(188+(i*248), obj.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, true);
	view.setUint32(192+(i*248), obj.maxDescriptorSetUpdateAfterBindSampledImages, true);
	view.setUint32(196+(i*248), obj.maxDescriptorSetUpdateAfterBindStorageImages, true);
	view.setUint32(200+(i*248), obj.maxDescriptorSetUpdateAfterBindInputAttachments, true);
	view.setUint32(204+(i*248), obj.supportedDepthResolveModes, true);
	view.setUint32(208+(i*248), obj.supportedStencilResolveModes, true);
	view.setUint32(212+(i*248), obj.independentResolveNone, true);
	view.setUint32(216+(i*248), obj.independentResolve, true);
	view.setUint32(220+(i*248), obj.filterMinmaxSingleComponentFormats, true);
	view.setUint32(224+(i*248), obj.filterMinmaxImageComponentMapping, true);
	view.setUint64(232+(i*248), obj.maxTimelineSemaphoreValueDifference, true);
	view.setUint32(240+(i*248), obj.framebufferIntegerColorSampleCounts, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(248);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.driverID, true)


	if (obj.conformanceVersion){
	view.setUint8(40, obj.conformanceVersion.major, true);
	view.setUint8(41, obj.conformanceVersion.minor, true);
	view.setUint8(42, obj.conformanceVersion.subminor, true);
	view.setUint8(43, obj.conformanceVersion.patch, true);
	}
	view.setUint32(44, obj.denormBehaviorIndependence, true)
	view.setUint32(48, obj.roundingModeIndependence, true)
	view.setUint32(52, obj.shaderSignedZeroInfNanPreserveFloat16, true);
	view.setUint32(56, obj.shaderSignedZeroInfNanPreserveFloat32, true);
	view.setUint32(60, obj.shaderSignedZeroInfNanPreserveFloat64, true);
	view.setUint32(64, obj.shaderDenormPreserveFloat16, true);
	view.setUint32(68, obj.shaderDenormPreserveFloat32, true);
	view.setUint32(72, obj.shaderDenormPreserveFloat64, true);
	view.setUint32(76, obj.shaderDenormFlushToZeroFloat16, true);
	view.setUint32(80, obj.shaderDenormFlushToZeroFloat32, true);
	view.setUint32(84, obj.shaderDenormFlushToZeroFloat64, true);
	view.setUint32(88, obj.shaderRoundingModeRTEFloat16, true);
	view.setUint32(92, obj.shaderRoundingModeRTEFloat32, true);
	view.setUint32(96, obj.shaderRoundingModeRTEFloat64, true);
	view.setUint32(100, obj.shaderRoundingModeRTZFloat16, true);
	view.setUint32(104, obj.shaderRoundingModeRTZFloat32, true);
	view.setUint32(108, obj.shaderRoundingModeRTZFloat64, true);
	view.setUint32(112, obj.maxUpdateAfterBindDescriptorsInAllPools, true);
	view.setUint32(116, obj.shaderUniformBufferArrayNonUniformIndexingNative, true);
	view.setUint32(120, obj.shaderSampledImageArrayNonUniformIndexingNative, true);
	view.setUint32(124, obj.shaderStorageBufferArrayNonUniformIndexingNative, true);
	view.setUint32(128, obj.shaderStorageImageArrayNonUniformIndexingNative, true);
	view.setUint32(132, obj.shaderInputAttachmentArrayNonUniformIndexingNative, true);
	view.setUint32(136, obj.robustBufferAccessUpdateAfterBind, true);
	view.setUint32(140, obj.quadDivergentImplicitLod, true);
	view.setUint32(144, obj.maxPerStageDescriptorUpdateAfterBindSamplers, true);
	view.setUint32(148, obj.maxPerStageDescriptorUpdateAfterBindUniformBuffers, true);
	view.setUint32(152, obj.maxPerStageDescriptorUpdateAfterBindStorageBuffers, true);
	view.setUint32(156, obj.maxPerStageDescriptorUpdateAfterBindSampledImages, true);
	view.setUint32(160, obj.maxPerStageDescriptorUpdateAfterBindStorageImages, true);
	view.setUint32(164, obj.maxPerStageDescriptorUpdateAfterBindInputAttachments, true);
	view.setUint32(168, obj.maxPerStageUpdateAfterBindResources, true);
	view.setUint32(172, obj.maxDescriptorSetUpdateAfterBindSamplers, true);
	view.setUint32(176, obj.maxDescriptorSetUpdateAfterBindUniformBuffers, true);
	view.setUint32(180, obj.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, true);
	view.setUint32(184, obj.maxDescriptorSetUpdateAfterBindStorageBuffers, true);
	view.setUint32(188, obj.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, true);
	view.setUint32(192, obj.maxDescriptorSetUpdateAfterBindSampledImages, true);
	view.setUint32(196, obj.maxDescriptorSetUpdateAfterBindStorageImages, true);
	view.setUint32(200, obj.maxDescriptorSetUpdateAfterBindInputAttachments, true);
	view.setUint32(204, obj.supportedDepthResolveModes, true);
	view.setUint32(208, obj.supportedStencilResolveModes, true);
	view.setUint32(212, obj.independentResolveNone, true);
	view.setUint32(216, obj.independentResolve, true);
	view.setUint32(220, obj.filterMinmaxSingleComponentFormats, true);
	view.setUint32(224, obj.filterMinmaxImageComponentMapping, true);
	view.setUint64(232, obj.maxTimelineSemaphoreValueDifference, true);
	view.setUint32(240, obj.framebufferIntegerColorSampleCounts, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan12Properties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		driverID: read.u32(ptr, 16),
		driverName: null,
		driverInfo: null,
		conformanceVersion: null,
		denormBehaviorIndependence: read.u32(ptr, 44),
		roundingModeIndependence: read.u32(ptr, 48),
		shaderSignedZeroInfNanPreserveFloat16: read.u32(ptr, 52),
		shaderSignedZeroInfNanPreserveFloat32: read.u32(ptr, 56),
		shaderSignedZeroInfNanPreserveFloat64: read.u32(ptr, 60),
		shaderDenormPreserveFloat16: read.u32(ptr, 64),
		shaderDenormPreserveFloat32: read.u32(ptr, 68),
		shaderDenormPreserveFloat64: read.u32(ptr, 72),
		shaderDenormFlushToZeroFloat16: read.u32(ptr, 76),
		shaderDenormFlushToZeroFloat32: read.u32(ptr, 80),
		shaderDenormFlushToZeroFloat64: read.u32(ptr, 84),
		shaderRoundingModeRTEFloat16: read.u32(ptr, 88),
		shaderRoundingModeRTEFloat32: read.u32(ptr, 92),
		shaderRoundingModeRTEFloat64: read.u32(ptr, 96),
		shaderRoundingModeRTZFloat16: read.u32(ptr, 100),
		shaderRoundingModeRTZFloat32: read.u32(ptr, 104),
		shaderRoundingModeRTZFloat64: read.u32(ptr, 108),
		maxUpdateAfterBindDescriptorsInAllPools: read.u32(ptr, 112),
		shaderUniformBufferArrayNonUniformIndexingNative: read.u32(ptr, 116),
		shaderSampledImageArrayNonUniformIndexingNative: read.u32(ptr, 120),
		shaderStorageBufferArrayNonUniformIndexingNative: read.u32(ptr, 124),
		shaderStorageImageArrayNonUniformIndexingNative: read.u32(ptr, 128),
		shaderInputAttachmentArrayNonUniformIndexingNative: read.u32(ptr, 132),
		robustBufferAccessUpdateAfterBind: read.u32(ptr, 136),
		quadDivergentImplicitLod: read.u32(ptr, 140),
		maxPerStageDescriptorUpdateAfterBindSamplers: read.u32(ptr, 144),
		maxPerStageDescriptorUpdateAfterBindUniformBuffers: read.u32(ptr, 148),
		maxPerStageDescriptorUpdateAfterBindStorageBuffers: read.u32(ptr, 152),
		maxPerStageDescriptorUpdateAfterBindSampledImages: read.u32(ptr, 156),
		maxPerStageDescriptorUpdateAfterBindStorageImages: read.u32(ptr, 160),
		maxPerStageDescriptorUpdateAfterBindInputAttachments: read.u32(ptr, 164),
		maxPerStageUpdateAfterBindResources: read.u32(ptr, 168),
		maxDescriptorSetUpdateAfterBindSamplers: read.u32(ptr, 172),
		maxDescriptorSetUpdateAfterBindUniformBuffers: read.u32(ptr, 176),
		maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: read.u32(ptr, 180),
		maxDescriptorSetUpdateAfterBindStorageBuffers: read.u32(ptr, 184),
		maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: read.u32(ptr, 188),
		maxDescriptorSetUpdateAfterBindSampledImages: read.u32(ptr, 192),
		maxDescriptorSetUpdateAfterBindStorageImages: read.u32(ptr, 196),
		maxDescriptorSetUpdateAfterBindInputAttachments: read.u32(ptr, 200),
		supportedDepthResolveModes: read.u32(ptr, 204),
		supportedStencilResolveModes: read.u32(ptr, 208),
		independentResolveNone: read.u32(ptr, 212),
		independentResolve: read.u32(ptr, 216),
		filterMinmaxSingleComponentFormats: read.u32(ptr, 220),
		filterMinmaxImageComponentMapping: read.u32(ptr, 224),
		maxTimelineSemaphoreValueDifference: null,
		framebufferIntegerColorSampleCounts: read.u32(ptr, 240)
	};
	return obj;
}


export function VkImageFormatListCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageFormatListCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.viewFormatCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pViewFormats||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pViewFormats||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.viewFormatCount, true);

	view.setBigUint64(24, BigInt(obj.pViewFormats||0), true);
	view.setBigUint64(24, BigInt(obj.pViewFormats||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageFormatListCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		viewFormatCount: read.u32(ptr, 16),
		pViewFormats: undefined
	};
	return obj;
}


export function VkAttachmentDescription2_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkAttachmentDescription2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.flags, true);
	view.setUint32(20+(i*56), obj.format, true)
	view.setUint32(24+(i*56), obj.samples, true)
	view.setUint32(28+(i*56), obj.loadOp, true)
	view.setUint32(32+(i*56), obj.storeOp, true)
	view.setUint32(36+(i*56), obj.stencilLoadOp, true)
	view.setUint32(40+(i*56), obj.stencilStoreOp, true)
	view.setUint32(44+(i*56), obj.initialLayout, true)
	view.setUint32(48+(i*56), obj.finalLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.format, true)
	view.setUint32(24, obj.samples, true)
	view.setUint32(28, obj.loadOp, true)
	view.setUint32(32, obj.storeOp, true)
	view.setUint32(36, obj.stencilLoadOp, true)
	view.setUint32(40, obj.stencilStoreOp, true)
	view.setUint32(44, obj.initialLayout, true)
	view.setUint32(48, obj.finalLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentDescription2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		format: read.u32(ptr, 20),
		samples: read.u32(ptr, 24),
		loadOp: read.u32(ptr, 28),
		storeOp: read.u32(ptr, 32),
		stencilLoadOp: read.u32(ptr, 36),
		stencilStoreOp: read.u32(ptr, 40),
		initialLayout: read.u32(ptr, 44),
		finalLayout: read.u32(ptr, 48)
	};
	return obj;
}


export function VkAttachmentReference2_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAttachmentReference2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.attachment, true);
	view.setUint32(20+(i*32), obj.layout, true)
	view.setUint32(24+(i*32), obj.aspectMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachment, true);
	view.setUint32(20, obj.layout, true)
	view.setUint32(24, obj.aspectMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentReference2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachment: read.u32(ptr, 16),
		layout: read.u32(ptr, 20),
		aspectMask: read.u32(ptr, 24)
	};
	return obj;
}


export function VkSubpassDescription2_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkSubpassDescription2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*88), obj.flags, true);
	view.setUint32(20+(i*88), obj.pipelineBindPoint, true)
	view.setUint32(24+(i*88), obj.viewMask, true);
	view.setUint32(28+(i*88), obj.inputAttachmentCount, true);
	if (obj.pInputAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pInputAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*88), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*88), BigInt(obj.pInputAttachments||0), true);
	}
	view.setUint32(40+(i*88), obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*88), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*88), BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pResolveAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pResolveAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*88), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*88), BigInt(obj.pResolveAttachments||0), true);
	}
	if (obj.pDepthStencilAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pDepthStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*88), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*88), BigInt(obj.pDepthStencilAttachment||0), true);
	}
	view.setUint32(72+(i*88), obj.preserveAttachmentCount, true);

	view.setBigUint64(80+(i*88), BigInt(obj.pPreserveAttachments||0), true);
	view.setBigUint64(80+(i*88), BigInt(obj.pPreserveAttachments||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.pipelineBindPoint, true)
	view.setUint32(24, obj.viewMask, true);
	view.setUint32(28, obj.inputAttachmentCount, true);
	if (obj.pInputAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pInputAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pInputAttachments||0), true);
	}
	view.setUint32(40, obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pResolveAttachments){
		const wrapped = VkAttachmentReference2_to_C(obj.pResolveAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pResolveAttachments||0), true);
	}
	if (obj.pDepthStencilAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pDepthStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.pDepthStencilAttachment||0), true);
	}
	view.setUint32(72, obj.preserveAttachmentCount, true);

	view.setBigUint64(80, BigInt(obj.pPreserveAttachments||0), true);
	view.setBigUint64(80, BigInt(obj.pPreserveAttachments||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassDescription2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pipelineBindPoint: read.u32(ptr, 20),
		viewMask: read.u32(ptr, 24),
		inputAttachmentCount: read.u32(ptr, 28),
		pInputAttachments: VkAttachmentReference2_from_C(read.ptr(ptr)),
		colorAttachmentCount: read.u32(ptr, 40),
		pColorAttachments: VkAttachmentReference2_from_C(read.ptr(ptr)),
		pResolveAttachments: VkAttachmentReference2_from_C(read.ptr(ptr)),
		pDepthStencilAttachment: VkAttachmentReference2_from_C(read.ptr(ptr)),
		preserveAttachmentCount: read.u32(ptr, 72),
		pPreserveAttachments: undefined
	};
	return obj;
}


export function VkSubpassDependency2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkSubpassDependency2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.srcSubpass, true);
	view.setUint32(20+(i*48), obj.dstSubpass, true);
	view.setUint32(24+(i*48), obj.srcStageMask, true);
	view.setUint32(28+(i*48), obj.dstStageMask, true);
	view.setUint32(32+(i*48), obj.srcAccessMask, true);
	view.setUint32(36+(i*48), obj.dstAccessMask, true);
	view.setUint32(40+(i*48), obj.dependencyFlags, true);
	view.setInt32(44+(i*48), obj.viewOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.srcSubpass, true);
	view.setUint32(20, obj.dstSubpass, true);
	view.setUint32(24, obj.srcStageMask, true);
	view.setUint32(28, obj.dstStageMask, true);
	view.setUint32(32, obj.srcAccessMask, true);
	view.setUint32(36, obj.dstAccessMask, true);
	view.setUint32(40, obj.dependencyFlags, true);
	view.setInt32(44, obj.viewOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassDependency2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcSubpass: read.u32(ptr, 16),
		dstSubpass: read.u32(ptr, 20),
		srcStageMask: read.u32(ptr, 24),
		dstStageMask: read.u32(ptr, 28),
		srcAccessMask: read.u32(ptr, 32),
		dstAccessMask: read.u32(ptr, 36),
		dependencyFlags: read.u32(ptr, 40),
		viewOffset: null
	};
	return obj;
}


export function VkRenderPassCreateInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkRenderPassCreateInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.flags, true);
	view.setUint32(20+(i*80), obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkAttachmentDescription2_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*80), BigInt(obj.pAttachments||0), true);
	}
	view.setUint32(32+(i*80), obj.subpassCount, true);
	if (obj.pSubpasses){
		const wrapped = VkSubpassDescription2_to_C(obj.pSubpasses, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*80), BigInt(obj.pSubpasses||0), true);
	}
	view.setUint32(48+(i*80), obj.dependencyCount, true);
	if (obj.pDependencies){
		const wrapped = VkSubpassDependency2_to_C(obj.pDependencies, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*80), BigInt(obj.pDependencies||0), true);
	}
	view.setUint32(64+(i*80), obj.correlatedViewMaskCount, true);

	view.setBigUint64(72+(i*80), BigInt(obj.pCorrelatedViewMasks||0), true);
	view.setBigUint64(72+(i*80), BigInt(obj.pCorrelatedViewMasks||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.attachmentCount, true);
	if (obj.pAttachments){
		const wrapped = VkAttachmentDescription2_to_C(obj.pAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pAttachments||0), true);
	}
	view.setUint32(32, obj.subpassCount, true);
	if (obj.pSubpasses){
		const wrapped = VkSubpassDescription2_to_C(obj.pSubpasses, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pSubpasses||0), true);
	}
	view.setUint32(48, obj.dependencyCount, true);
	if (obj.pDependencies){
		const wrapped = VkSubpassDependency2_to_C(obj.pDependencies, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pDependencies||0), true);
	}
	view.setUint32(64, obj.correlatedViewMaskCount, true);

	view.setBigUint64(72, BigInt(obj.pCorrelatedViewMasks||0), true);
	view.setBigUint64(72, BigInt(obj.pCorrelatedViewMasks||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassCreateInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		attachmentCount: read.u32(ptr, 20),
		pAttachments: VkAttachmentDescription2_from_C(read.ptr(ptr)),
		subpassCount: read.u32(ptr, 32),
		pSubpasses: VkSubpassDescription2_from_C(read.ptr(ptr)),
		dependencyCount: read.u32(ptr, 48),
		pDependencies: VkSubpassDependency2_from_C(read.ptr(ptr)),
		correlatedViewMaskCount: read.u32(ptr, 64),
		pCorrelatedViewMasks: undefined
	};
	return obj;
}


export function VkSubpassBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSubpassBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.contents, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.contents, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		contents: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSubpassEndInfo_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkSubpassEndInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.sType, true)

	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.pNext||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassEndInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDevice8BitStorageFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDevice8BitStorageFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.storageBuffer8BitAccess, true);
	view.setUint32(20+(i*32), obj.uniformAndStorageBuffer8BitAccess, true);
	view.setUint32(24+(i*32), obj.storagePushConstant8, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.storageBuffer8BitAccess, true);
	view.setUint32(20, obj.uniformAndStorageBuffer8BitAccess, true);
	view.setUint32(24, obj.storagePushConstant8, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevice8BitStorageFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		storageBuffer8BitAccess: read.u32(ptr, 16),
		uniformAndStorageBuffer8BitAccess: read.u32(ptr, 20),
		storagePushConstant8: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceDriverProperties_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDriverProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.driverID, true)


	if (obj.conformanceVersion){
	view.setUint8(40+(i*48), obj.conformanceVersion.major, true);
	view.setUint8(41+(i*48), obj.conformanceVersion.minor, true);
	view.setUint8(42+(i*48), obj.conformanceVersion.subminor, true);
	view.setUint8(43+(i*48), obj.conformanceVersion.patch, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.driverID, true)


	if (obj.conformanceVersion){
	view.setUint8(40, obj.conformanceVersion.major, true);
	view.setUint8(41, obj.conformanceVersion.minor, true);
	view.setUint8(42, obj.conformanceVersion.subminor, true);
	view.setUint8(43, obj.conformanceVersion.patch, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDriverProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		driverID: read.u32(ptr, 16),
		driverName: null,
		driverInfo: null,
		conformanceVersion: null
	};
	return obj;
}


export function VkPhysicalDeviceShaderAtomicInt64Features_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderAtomicInt64Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderBufferInt64Atomics, true);
	view.setUint32(20+(i*24), obj.shaderSharedInt64Atomics, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderBufferInt64Atomics, true);
	view.setUint32(20, obj.shaderSharedInt64Atomics, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderAtomicInt64Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderBufferInt64Atomics: read.u32(ptr, 16),
		shaderSharedInt64Atomics: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceShaderFloat16Int8Features_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderFloat16Int8Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderFloat16, true);
	view.setUint32(20+(i*24), obj.shaderInt8, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderFloat16, true);
	view.setUint32(20, obj.shaderInt8, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderFloat16Int8Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderFloat16: read.u32(ptr, 16),
		shaderInt8: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceFloatControlsProperties_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFloatControlsProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*88), obj.denormBehaviorIndependence, true)
	view.setUint32(20+(i*88), obj.roundingModeIndependence, true)
	view.setUint32(24+(i*88), obj.shaderSignedZeroInfNanPreserveFloat16, true);
	view.setUint32(28+(i*88), obj.shaderSignedZeroInfNanPreserveFloat32, true);
	view.setUint32(32+(i*88), obj.shaderSignedZeroInfNanPreserveFloat64, true);
	view.setUint32(36+(i*88), obj.shaderDenormPreserveFloat16, true);
	view.setUint32(40+(i*88), obj.shaderDenormPreserveFloat32, true);
	view.setUint32(44+(i*88), obj.shaderDenormPreserveFloat64, true);
	view.setUint32(48+(i*88), obj.shaderDenormFlushToZeroFloat16, true);
	view.setUint32(52+(i*88), obj.shaderDenormFlushToZeroFloat32, true);
	view.setUint32(56+(i*88), obj.shaderDenormFlushToZeroFloat64, true);
	view.setUint32(60+(i*88), obj.shaderRoundingModeRTEFloat16, true);
	view.setUint32(64+(i*88), obj.shaderRoundingModeRTEFloat32, true);
	view.setUint32(68+(i*88), obj.shaderRoundingModeRTEFloat64, true);
	view.setUint32(72+(i*88), obj.shaderRoundingModeRTZFloat16, true);
	view.setUint32(76+(i*88), obj.shaderRoundingModeRTZFloat32, true);
	view.setUint32(80+(i*88), obj.shaderRoundingModeRTZFloat64, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.denormBehaviorIndependence, true)
	view.setUint32(20, obj.roundingModeIndependence, true)
	view.setUint32(24, obj.shaderSignedZeroInfNanPreserveFloat16, true);
	view.setUint32(28, obj.shaderSignedZeroInfNanPreserveFloat32, true);
	view.setUint32(32, obj.shaderSignedZeroInfNanPreserveFloat64, true);
	view.setUint32(36, obj.shaderDenormPreserveFloat16, true);
	view.setUint32(40, obj.shaderDenormPreserveFloat32, true);
	view.setUint32(44, obj.shaderDenormPreserveFloat64, true);
	view.setUint32(48, obj.shaderDenormFlushToZeroFloat16, true);
	view.setUint32(52, obj.shaderDenormFlushToZeroFloat32, true);
	view.setUint32(56, obj.shaderDenormFlushToZeroFloat64, true);
	view.setUint32(60, obj.shaderRoundingModeRTEFloat16, true);
	view.setUint32(64, obj.shaderRoundingModeRTEFloat32, true);
	view.setUint32(68, obj.shaderRoundingModeRTEFloat64, true);
	view.setUint32(72, obj.shaderRoundingModeRTZFloat16, true);
	view.setUint32(76, obj.shaderRoundingModeRTZFloat32, true);
	view.setUint32(80, obj.shaderRoundingModeRTZFloat64, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFloatControlsProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		denormBehaviorIndependence: read.u32(ptr, 16),
		roundingModeIndependence: read.u32(ptr, 20),
		shaderSignedZeroInfNanPreserveFloat16: read.u32(ptr, 24),
		shaderSignedZeroInfNanPreserveFloat32: read.u32(ptr, 28),
		shaderSignedZeroInfNanPreserveFloat64: read.u32(ptr, 32),
		shaderDenormPreserveFloat16: read.u32(ptr, 36),
		shaderDenormPreserveFloat32: read.u32(ptr, 40),
		shaderDenormPreserveFloat64: read.u32(ptr, 44),
		shaderDenormFlushToZeroFloat16: read.u32(ptr, 48),
		shaderDenormFlushToZeroFloat32: read.u32(ptr, 52),
		shaderDenormFlushToZeroFloat64: read.u32(ptr, 56),
		shaderRoundingModeRTEFloat16: read.u32(ptr, 60),
		shaderRoundingModeRTEFloat32: read.u32(ptr, 64),
		shaderRoundingModeRTEFloat64: read.u32(ptr, 68),
		shaderRoundingModeRTZFloat16: read.u32(ptr, 72),
		shaderRoundingModeRTZFloat32: read.u32(ptr, 76),
		shaderRoundingModeRTZFloat64: read.u32(ptr, 80)
	};
	return obj;
}


export function VkDescriptorSetLayoutBindingFlagsCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorSetLayoutBindingFlagsCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.bindingCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pBindingFlags||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pBindingFlags||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.bindingCount, true);

	view.setBigUint64(24, BigInt(obj.pBindingFlags||0), true);
	view.setBigUint64(24, BigInt(obj.pBindingFlags||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetLayoutBindingFlagsCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		bindingCount: read.u32(ptr, 16),
		pBindingFlags: undefined
	};
	return obj;
}


export function VkPhysicalDeviceDescriptorIndexingFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDescriptorIndexingFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*96), obj.shaderInputAttachmentArrayDynamicIndexing, true);
	view.setUint32(20+(i*96), obj.shaderUniformTexelBufferArrayDynamicIndexing, true);
	view.setUint32(24+(i*96), obj.shaderStorageTexelBufferArrayDynamicIndexing, true);
	view.setUint32(28+(i*96), obj.shaderUniformBufferArrayNonUniformIndexing, true);
	view.setUint32(32+(i*96), obj.shaderSampledImageArrayNonUniformIndexing, true);
	view.setUint32(36+(i*96), obj.shaderStorageBufferArrayNonUniformIndexing, true);
	view.setUint32(40+(i*96), obj.shaderStorageImageArrayNonUniformIndexing, true);
	view.setUint32(44+(i*96), obj.shaderInputAttachmentArrayNonUniformIndexing, true);
	view.setUint32(48+(i*96), obj.shaderUniformTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(52+(i*96), obj.shaderStorageTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(56+(i*96), obj.descriptorBindingUniformBufferUpdateAfterBind, true);
	view.setUint32(60+(i*96), obj.descriptorBindingSampledImageUpdateAfterBind, true);
	view.setUint32(64+(i*96), obj.descriptorBindingStorageImageUpdateAfterBind, true);
	view.setUint32(68+(i*96), obj.descriptorBindingStorageBufferUpdateAfterBind, true);
	view.setUint32(72+(i*96), obj.descriptorBindingUniformTexelBufferUpdateAfterBind, true);
	view.setUint32(76+(i*96), obj.descriptorBindingStorageTexelBufferUpdateAfterBind, true);
	view.setUint32(80+(i*96), obj.descriptorBindingUpdateUnusedWhilePending, true);
	view.setUint32(84+(i*96), obj.descriptorBindingPartiallyBound, true);
	view.setUint32(88+(i*96), obj.descriptorBindingVariableDescriptorCount, true);
	view.setUint32(92+(i*96), obj.runtimeDescriptorArray, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderInputAttachmentArrayDynamicIndexing, true);
	view.setUint32(20, obj.shaderUniformTexelBufferArrayDynamicIndexing, true);
	view.setUint32(24, obj.shaderStorageTexelBufferArrayDynamicIndexing, true);
	view.setUint32(28, obj.shaderUniformBufferArrayNonUniformIndexing, true);
	view.setUint32(32, obj.shaderSampledImageArrayNonUniformIndexing, true);
	view.setUint32(36, obj.shaderStorageBufferArrayNonUniformIndexing, true);
	view.setUint32(40, obj.shaderStorageImageArrayNonUniformIndexing, true);
	view.setUint32(44, obj.shaderInputAttachmentArrayNonUniformIndexing, true);
	view.setUint32(48, obj.shaderUniformTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(52, obj.shaderStorageTexelBufferArrayNonUniformIndexing, true);
	view.setUint32(56, obj.descriptorBindingUniformBufferUpdateAfterBind, true);
	view.setUint32(60, obj.descriptorBindingSampledImageUpdateAfterBind, true);
	view.setUint32(64, obj.descriptorBindingStorageImageUpdateAfterBind, true);
	view.setUint32(68, obj.descriptorBindingStorageBufferUpdateAfterBind, true);
	view.setUint32(72, obj.descriptorBindingUniformTexelBufferUpdateAfterBind, true);
	view.setUint32(76, obj.descriptorBindingStorageTexelBufferUpdateAfterBind, true);
	view.setUint32(80, obj.descriptorBindingUpdateUnusedWhilePending, true);
	view.setUint32(84, obj.descriptorBindingPartiallyBound, true);
	view.setUint32(88, obj.descriptorBindingVariableDescriptorCount, true);
	view.setUint32(92, obj.runtimeDescriptorArray, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDescriptorIndexingFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderInputAttachmentArrayDynamicIndexing: read.u32(ptr, 16),
		shaderUniformTexelBufferArrayDynamicIndexing: read.u32(ptr, 20),
		shaderStorageTexelBufferArrayDynamicIndexing: read.u32(ptr, 24),
		shaderUniformBufferArrayNonUniformIndexing: read.u32(ptr, 28),
		shaderSampledImageArrayNonUniformIndexing: read.u32(ptr, 32),
		shaderStorageBufferArrayNonUniformIndexing: read.u32(ptr, 36),
		shaderStorageImageArrayNonUniformIndexing: read.u32(ptr, 40),
		shaderInputAttachmentArrayNonUniformIndexing: read.u32(ptr, 44),
		shaderUniformTexelBufferArrayNonUniformIndexing: read.u32(ptr, 48),
		shaderStorageTexelBufferArrayNonUniformIndexing: read.u32(ptr, 52),
		descriptorBindingUniformBufferUpdateAfterBind: read.u32(ptr, 56),
		descriptorBindingSampledImageUpdateAfterBind: read.u32(ptr, 60),
		descriptorBindingStorageImageUpdateAfterBind: read.u32(ptr, 64),
		descriptorBindingStorageBufferUpdateAfterBind: read.u32(ptr, 68),
		descriptorBindingUniformTexelBufferUpdateAfterBind: read.u32(ptr, 72),
		descriptorBindingStorageTexelBufferUpdateAfterBind: read.u32(ptr, 76),
		descriptorBindingUpdateUnusedWhilePending: read.u32(ptr, 80),
		descriptorBindingPartiallyBound: read.u32(ptr, 84),
		descriptorBindingVariableDescriptorCount: read.u32(ptr, 88),
		runtimeDescriptorArray: read.u32(ptr, 92)
	};
	return obj;
}


export function VkPhysicalDeviceDescriptorIndexingProperties_alloc_array(size){
	const buffer = new ArrayBuffer(112*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDescriptorIndexingProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(112*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*112), obj.sType, true)

	view.setBigUint64(8+(i*112), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*112), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*112), obj.maxUpdateAfterBindDescriptorsInAllPools, true);
	view.setUint32(20+(i*112), obj.shaderUniformBufferArrayNonUniformIndexingNative, true);
	view.setUint32(24+(i*112), obj.shaderSampledImageArrayNonUniformIndexingNative, true);
	view.setUint32(28+(i*112), obj.shaderStorageBufferArrayNonUniformIndexingNative, true);
	view.setUint32(32+(i*112), obj.shaderStorageImageArrayNonUniformIndexingNative, true);
	view.setUint32(36+(i*112), obj.shaderInputAttachmentArrayNonUniformIndexingNative, true);
	view.setUint32(40+(i*112), obj.robustBufferAccessUpdateAfterBind, true);
	view.setUint32(44+(i*112), obj.quadDivergentImplicitLod, true);
	view.setUint32(48+(i*112), obj.maxPerStageDescriptorUpdateAfterBindSamplers, true);
	view.setUint32(52+(i*112), obj.maxPerStageDescriptorUpdateAfterBindUniformBuffers, true);
	view.setUint32(56+(i*112), obj.maxPerStageDescriptorUpdateAfterBindStorageBuffers, true);
	view.setUint32(60+(i*112), obj.maxPerStageDescriptorUpdateAfterBindSampledImages, true);
	view.setUint32(64+(i*112), obj.maxPerStageDescriptorUpdateAfterBindStorageImages, true);
	view.setUint32(68+(i*112), obj.maxPerStageDescriptorUpdateAfterBindInputAttachments, true);
	view.setUint32(72+(i*112), obj.maxPerStageUpdateAfterBindResources, true);
	view.setUint32(76+(i*112), obj.maxDescriptorSetUpdateAfterBindSamplers, true);
	view.setUint32(80+(i*112), obj.maxDescriptorSetUpdateAfterBindUniformBuffers, true);
	view.setUint32(84+(i*112), obj.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, true);
	view.setUint32(88+(i*112), obj.maxDescriptorSetUpdateAfterBindStorageBuffers, true);
	view.setUint32(92+(i*112), obj.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, true);
	view.setUint32(96+(i*112), obj.maxDescriptorSetUpdateAfterBindSampledImages, true);
	view.setUint32(100+(i*112), obj.maxDescriptorSetUpdateAfterBindStorageImages, true);
	view.setUint32(104+(i*112), obj.maxDescriptorSetUpdateAfterBindInputAttachments, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(112);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxUpdateAfterBindDescriptorsInAllPools, true);
	view.setUint32(20, obj.shaderUniformBufferArrayNonUniformIndexingNative, true);
	view.setUint32(24, obj.shaderSampledImageArrayNonUniformIndexingNative, true);
	view.setUint32(28, obj.shaderStorageBufferArrayNonUniformIndexingNative, true);
	view.setUint32(32, obj.shaderStorageImageArrayNonUniformIndexingNative, true);
	view.setUint32(36, obj.shaderInputAttachmentArrayNonUniformIndexingNative, true);
	view.setUint32(40, obj.robustBufferAccessUpdateAfterBind, true);
	view.setUint32(44, obj.quadDivergentImplicitLod, true);
	view.setUint32(48, obj.maxPerStageDescriptorUpdateAfterBindSamplers, true);
	view.setUint32(52, obj.maxPerStageDescriptorUpdateAfterBindUniformBuffers, true);
	view.setUint32(56, obj.maxPerStageDescriptorUpdateAfterBindStorageBuffers, true);
	view.setUint32(60, obj.maxPerStageDescriptorUpdateAfterBindSampledImages, true);
	view.setUint32(64, obj.maxPerStageDescriptorUpdateAfterBindStorageImages, true);
	view.setUint32(68, obj.maxPerStageDescriptorUpdateAfterBindInputAttachments, true);
	view.setUint32(72, obj.maxPerStageUpdateAfterBindResources, true);
	view.setUint32(76, obj.maxDescriptorSetUpdateAfterBindSamplers, true);
	view.setUint32(80, obj.maxDescriptorSetUpdateAfterBindUniformBuffers, true);
	view.setUint32(84, obj.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, true);
	view.setUint32(88, obj.maxDescriptorSetUpdateAfterBindStorageBuffers, true);
	view.setUint32(92, obj.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, true);
	view.setUint32(96, obj.maxDescriptorSetUpdateAfterBindSampledImages, true);
	view.setUint32(100, obj.maxDescriptorSetUpdateAfterBindStorageImages, true);
	view.setUint32(104, obj.maxDescriptorSetUpdateAfterBindInputAttachments, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDescriptorIndexingProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxUpdateAfterBindDescriptorsInAllPools: read.u32(ptr, 16),
		shaderUniformBufferArrayNonUniformIndexingNative: read.u32(ptr, 20),
		shaderSampledImageArrayNonUniformIndexingNative: read.u32(ptr, 24),
		shaderStorageBufferArrayNonUniformIndexingNative: read.u32(ptr, 28),
		shaderStorageImageArrayNonUniformIndexingNative: read.u32(ptr, 32),
		shaderInputAttachmentArrayNonUniformIndexingNative: read.u32(ptr, 36),
		robustBufferAccessUpdateAfterBind: read.u32(ptr, 40),
		quadDivergentImplicitLod: read.u32(ptr, 44),
		maxPerStageDescriptorUpdateAfterBindSamplers: read.u32(ptr, 48),
		maxPerStageDescriptorUpdateAfterBindUniformBuffers: read.u32(ptr, 52),
		maxPerStageDescriptorUpdateAfterBindStorageBuffers: read.u32(ptr, 56),
		maxPerStageDescriptorUpdateAfterBindSampledImages: read.u32(ptr, 60),
		maxPerStageDescriptorUpdateAfterBindStorageImages: read.u32(ptr, 64),
		maxPerStageDescriptorUpdateAfterBindInputAttachments: read.u32(ptr, 68),
		maxPerStageUpdateAfterBindResources: read.u32(ptr, 72),
		maxDescriptorSetUpdateAfterBindSamplers: read.u32(ptr, 76),
		maxDescriptorSetUpdateAfterBindUniformBuffers: read.u32(ptr, 80),
		maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: read.u32(ptr, 84),
		maxDescriptorSetUpdateAfterBindStorageBuffers: read.u32(ptr, 88),
		maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: read.u32(ptr, 92),
		maxDescriptorSetUpdateAfterBindSampledImages: read.u32(ptr, 96),
		maxDescriptorSetUpdateAfterBindStorageImages: read.u32(ptr, 100),
		maxDescriptorSetUpdateAfterBindInputAttachments: read.u32(ptr, 104)
	};
	return obj;
}


export function VkDescriptorSetVariableDescriptorCountAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorSetVariableDescriptorCountAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.descriptorSetCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pDescriptorCounts||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pDescriptorCounts||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.descriptorSetCount, true);

	view.setBigUint64(24, BigInt(obj.pDescriptorCounts||0), true);
	view.setBigUint64(24, BigInt(obj.pDescriptorCounts||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetVariableDescriptorCountAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		descriptorSetCount: read.u32(ptr, 16),
		pDescriptorCounts: undefined
	};
	return obj;
}


export function VkDescriptorSetVariableDescriptorCountLayoutSupport_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorSetVariableDescriptorCountLayoutSupport_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxVariableDescriptorCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxVariableDescriptorCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetVariableDescriptorCountLayoutSupport_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxVariableDescriptorCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSubpassDescriptionDepthStencilResolve_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSubpassDescriptionDepthStencilResolve_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.depthResolveMode, true)
	view.setUint32(20+(i*32), obj.stencilResolveMode, true)
	if (obj.pDepthStencilResolveAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pDepthStencilResolveAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pDepthStencilResolveAttachment||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.depthResolveMode, true)
	view.setUint32(20, obj.stencilResolveMode, true)
	if (obj.pDepthStencilResolveAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pDepthStencilResolveAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pDepthStencilResolveAttachment||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassDescriptionDepthStencilResolve_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		depthResolveMode: read.u32(ptr, 16),
		stencilResolveMode: read.u32(ptr, 20),
		pDepthStencilResolveAttachment: VkAttachmentReference2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceDepthStencilResolveProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDepthStencilResolveProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.supportedDepthResolveModes, true);
	view.setUint32(20+(i*32), obj.supportedStencilResolveModes, true);
	view.setUint32(24+(i*32), obj.independentResolveNone, true);
	view.setUint32(28+(i*32), obj.independentResolve, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.supportedDepthResolveModes, true);
	view.setUint32(20, obj.supportedStencilResolveModes, true);
	view.setUint32(24, obj.independentResolveNone, true);
	view.setUint32(28, obj.independentResolve, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDepthStencilResolveProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		supportedDepthResolveModes: read.u32(ptr, 16),
		supportedStencilResolveModes: read.u32(ptr, 20),
		independentResolveNone: read.u32(ptr, 24),
		independentResolve: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPhysicalDeviceScalarBlockLayoutFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceScalarBlockLayoutFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.scalarBlockLayout, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.scalarBlockLayout, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceScalarBlockLayoutFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		scalarBlockLayout: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImageStencilUsageCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageStencilUsageCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.stencilUsage, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stencilUsage, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageStencilUsageCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stencilUsage: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSamplerReductionModeCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSamplerReductionModeCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.reductionMode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.reductionMode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerReductionModeCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		reductionMode: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceSamplerFilterMinmaxProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSamplerFilterMinmaxProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.filterMinmaxSingleComponentFormats, true);
	view.setUint32(20+(i*24), obj.filterMinmaxImageComponentMapping, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.filterMinmaxSingleComponentFormats, true);
	view.setUint32(20, obj.filterMinmaxImageComponentMapping, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSamplerFilterMinmaxProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		filterMinmaxSingleComponentFormats: read.u32(ptr, 16),
		filterMinmaxImageComponentMapping: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceVulkanMemoryModelFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkanMemoryModelFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.vulkanMemoryModel, true);
	view.setUint32(20+(i*32), obj.vulkanMemoryModelDeviceScope, true);
	view.setUint32(24+(i*32), obj.vulkanMemoryModelAvailabilityVisibilityChains, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.vulkanMemoryModel, true);
	view.setUint32(20, obj.vulkanMemoryModelDeviceScope, true);
	view.setUint32(24, obj.vulkanMemoryModelAvailabilityVisibilityChains, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkanMemoryModelFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vulkanMemoryModel: read.u32(ptr, 16),
		vulkanMemoryModelDeviceScope: read.u32(ptr, 20),
		vulkanMemoryModelAvailabilityVisibilityChains: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceImagelessFramebufferFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImagelessFramebufferFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imagelessFramebuffer, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imagelessFramebuffer, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImagelessFramebufferFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imagelessFramebuffer: read.u32(ptr, 16)
	};
	return obj;
}


export function VkFramebufferAttachmentImageInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkFramebufferAttachmentImageInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.usage, true);
	view.setUint32(24+(i*48), obj.width, true);
	view.setUint32(28+(i*48), obj.height, true);
	view.setUint32(32+(i*48), obj.layerCount, true);
	view.setUint32(36+(i*48), obj.viewFormatCount, true);

	view.setBigUint64(40+(i*48), BigInt(obj.pViewFormats||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pViewFormats||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.usage, true);
	view.setUint32(24, obj.width, true);
	view.setUint32(28, obj.height, true);
	view.setUint32(32, obj.layerCount, true);
	view.setUint32(36, obj.viewFormatCount, true);

	view.setBigUint64(40, BigInt(obj.pViewFormats||0), true);
	view.setBigUint64(40, BigInt(obj.pViewFormats||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFramebufferAttachmentImageInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		usage: read.u32(ptr, 20),
		width: read.u32(ptr, 24),
		height: read.u32(ptr, 28),
		layerCount: read.u32(ptr, 32),
		viewFormatCount: read.u32(ptr, 36),
		pViewFormats: undefined
	};
	return obj;
}


export function VkFramebufferAttachmentsCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkFramebufferAttachmentsCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.attachmentImageInfoCount, true);
	if (obj.pAttachmentImageInfos){
		const wrapped = VkFramebufferAttachmentImageInfo_to_C(obj.pAttachmentImageInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pAttachmentImageInfos||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachmentImageInfoCount, true);
	if (obj.pAttachmentImageInfos){
		const wrapped = VkFramebufferAttachmentImageInfo_to_C(obj.pAttachmentImageInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pAttachmentImageInfos||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFramebufferAttachmentsCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachmentImageInfoCount: read.u32(ptr, 16),
		pAttachmentImageInfos: VkFramebufferAttachmentImageInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkRenderPassAttachmentBeginInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkRenderPassAttachmentBeginInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.attachmentCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pAttachments||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pAttachments||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachmentCount, true);

	view.setBigUint64(24, BigInt(obj.pAttachments||0), true);
	view.setBigUint64(24, BigInt(obj.pAttachments||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassAttachmentBeginInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachmentCount: read.u32(ptr, 16),
		pAttachments: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDeviceUniformBufferStandardLayoutFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceUniformBufferStandardLayoutFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.uniformBufferStandardLayout, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.uniformBufferStandardLayout, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceUniformBufferStandardLayoutFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		uniformBufferStandardLayout: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderSubgroupExtendedTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderSubgroupExtendedTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderSubgroupExtendedTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.separateDepthStencilLayouts, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.separateDepthStencilLayouts, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		separateDepthStencilLayouts: read.u32(ptr, 16)
	};
	return obj;
}


export function VkAttachmentReferenceStencilLayout_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAttachmentReferenceStencilLayout_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.stencilLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stencilLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentReferenceStencilLayout_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stencilLayout: read.u32(ptr, 16)
	};
	return obj;
}


export function VkAttachmentDescriptionStencilLayout_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAttachmentDescriptionStencilLayout_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.stencilInitialLayout, true)
	view.setUint32(20+(i*24), obj.stencilFinalLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stencilInitialLayout, true)
	view.setUint32(20, obj.stencilFinalLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentDescriptionStencilLayout_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stencilInitialLayout: read.u32(ptr, 16),
		stencilFinalLayout: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceHostQueryResetFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceHostQueryResetFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.hostQueryReset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.hostQueryReset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceHostQueryResetFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		hostQueryReset: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceTimelineSemaphoreFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTimelineSemaphoreFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.timelineSemaphore, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.timelineSemaphore, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTimelineSemaphoreFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		timelineSemaphore: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceTimelineSemaphoreProperties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTimelineSemaphoreProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.maxTimelineSemaphoreValueDifference, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.maxTimelineSemaphoreValueDifference, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTimelineSemaphoreProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxTimelineSemaphoreValueDifference: null
	};
	return obj;
}


export function VkSemaphoreTypeCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSemaphoreTypeCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.semaphoreType, true)
	view.setUint64(24+(i*32), obj.initialValue, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.semaphoreType, true)
	view.setUint64(24, obj.initialValue, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreTypeCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		semaphoreType: read.u32(ptr, 16),
		initialValue: null
	};
	return obj;
}


export function VkTimelineSemaphoreSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkTimelineSemaphoreSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.waitSemaphoreValueCount, true);

	view.setBigUint64(24+(i*48), BigInt(obj.pWaitSemaphoreValues||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pWaitSemaphoreValues||0), true);

	view.setUint32(32+(i*48), obj.signalSemaphoreValueCount, true);

	view.setBigUint64(40+(i*48), BigInt(obj.pSignalSemaphoreValues||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pSignalSemaphoreValues||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.waitSemaphoreValueCount, true);

	view.setBigUint64(24, BigInt(obj.pWaitSemaphoreValues||0), true);
	view.setBigUint64(24, BigInt(obj.pWaitSemaphoreValues||0), true);

	view.setUint32(32, obj.signalSemaphoreValueCount, true);

	view.setBigUint64(40, BigInt(obj.pSignalSemaphoreValues||0), true);
	view.setBigUint64(40, BigInt(obj.pSignalSemaphoreValues||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTimelineSemaphoreSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		waitSemaphoreValueCount: read.u32(ptr, 16),
		pWaitSemaphoreValues: undefined,
		signalSemaphoreValueCount: read.u32(ptr, 32),
		pSignalSemaphoreValues: undefined
	};
	return obj;
}


export function VkSemaphoreWaitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkSemaphoreWaitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	view.setUint32(20+(i*40), obj.semaphoreCount, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pSemaphores||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pSemaphores||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pValues||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pValues||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.semaphoreCount, true);

	view.setBigUint64(24, BigInt(obj.pSemaphores||0), true);
	view.setBigUint64(24, BigInt(obj.pSemaphores||0), true);


	view.setBigUint64(32, BigInt(obj.pValues||0), true);
	view.setBigUint64(32, BigInt(obj.pValues||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreWaitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		semaphoreCount: read.u32(ptr, 20),
		pSemaphores: read.ptr(ptr),
		pValues: undefined
	};
	return obj;
}


export function VkSemaphoreSignalInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSemaphoreSignalInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.semaphore||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.semaphore||0), true);

	view.setUint64(24+(i*32), obj.value, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.semaphore||0), true);
	view.setBigUint64(16, BigInt(obj.semaphore||0), true);

	view.setUint64(24, obj.value, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreSignalInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		semaphore: undefined,
		value: null
	};
	return obj;
}


export function VkPhysicalDeviceBufferDeviceAddressFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceBufferDeviceAddressFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.bufferDeviceAddress, true);
	view.setUint32(20+(i*32), obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(24+(i*32), obj.bufferDeviceAddressMultiDevice, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.bufferDeviceAddress, true);
	view.setUint32(20, obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(24, obj.bufferDeviceAddressMultiDevice, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceBufferDeviceAddressFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		bufferDeviceAddress: read.u32(ptr, 16),
		bufferDeviceAddressCaptureReplay: read.u32(ptr, 20),
		bufferDeviceAddressMultiDevice: read.u32(ptr, 24)
	};
	return obj;
}


export function VkBufferDeviceAddressInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBufferDeviceAddressInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.buffer||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.buffer||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.buffer||0), true);
	view.setBigUint64(16, BigInt(obj.buffer||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferDeviceAddressInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		buffer: undefined
	};
	return obj;
}


export function VkBufferOpaqueCaptureAddressCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBufferOpaqueCaptureAddressCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.opaqueCaptureAddress, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.opaqueCaptureAddress, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferOpaqueCaptureAddressCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		opaqueCaptureAddress: null
	};
	return obj;
}


export function VkMemoryOpaqueCaptureAddressAllocateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryOpaqueCaptureAddressAllocateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.opaqueCaptureAddress, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.opaqueCaptureAddress, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryOpaqueCaptureAddressAllocateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		opaqueCaptureAddress: null
	};
	return obj;
}


export function VkDeviceMemoryOpaqueCaptureAddressInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceMemoryOpaqueCaptureAddressInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.memory||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.memory||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.memory||0), true);
	view.setBigUint64(16, BigInt(obj.memory||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceMemoryOpaqueCaptureAddressInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memory: undefined
	};
	return obj;
}

export const VkPipelineCreationFeedbackFlagBits = {
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT: 1,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT: 2,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT: 4,
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: NaN,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: NaN,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: NaN,
	VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT",
		"2": "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT",
		"4": "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT",
		"NaN": "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT",
		"NaN": "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT",
		"NaN": "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT",
		"2147483647": "VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM",
}};
export const VkToolPurposeFlagBits = {
	VK_TOOL_PURPOSE_VALIDATION_BIT: 1,
	VK_TOOL_PURPOSE_PROFILING_BIT: 2,
	VK_TOOL_PURPOSE_TRACING_BIT: 4,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: 8,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: 16,
	VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: 32,
	VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: 64,
	VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: NaN,
	VK_TOOL_PURPOSE_PROFILING_BIT_EXT: NaN,
	VK_TOOL_PURPOSE_TRACING_BIT_EXT: NaN,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: NaN,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: NaN,
	VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_TOOL_PURPOSE_VALIDATION_BIT",
		"2": "VK_TOOL_PURPOSE_PROFILING_BIT",
		"4": "VK_TOOL_PURPOSE_TRACING_BIT",
		"8": "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT",
		"16": "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT",
		"32": "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT",
		"64": "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT",
		"NaN": "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT",
		"NaN": "VK_TOOL_PURPOSE_PROFILING_BIT_EXT",
		"NaN": "VK_TOOL_PURPOSE_TRACING_BIT_EXT",
		"NaN": "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT",
		"NaN": "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT",
		"2147483647": "VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM",
}};
export const VkSubmitFlagBits = {
	VK_SUBMIT_PROTECTED_BIT: 1,
	VK_SUBMIT_PROTECTED_BIT_KHR: NaN,
	VK_SUBMIT_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_SUBMIT_PROTECTED_BIT",
		"NaN": "VK_SUBMIT_PROTECTED_BIT_KHR",
		"2147483647": "VK_SUBMIT_FLAG_BITS_MAX_ENUM",
}};
export const VkRenderingFlagBits = {
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT: 1,
	VK_RENDERING_SUSPENDING_BIT: 2,
	VK_RENDERING_RESUMING_BIT: 4,
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: NaN,
	VK_RENDERING_SUSPENDING_BIT_KHR: NaN,
	VK_RENDERING_RESUMING_BIT_KHR: NaN,
	VK_RENDERING_FLAG_BITS_MAX_ENUM: 2147483647,
	keys:{
		"1": "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT",
		"2": "VK_RENDERING_SUSPENDING_BIT",
		"4": "VK_RENDERING_RESUMING_BIT",
		"NaN": "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR",
		"NaN": "VK_RENDERING_SUSPENDING_BIT_KHR",
		"NaN": "VK_RENDERING_RESUMING_BIT_KHR",
		"2147483647": "VK_RENDERING_FLAG_BITS_MAX_ENUM",
}};

export function VkPhysicalDeviceVulkan13Features_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan13Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.robustImageAccess, true);
	view.setUint32(20+(i*80), obj.inlineUniformBlock, true);
	view.setUint32(24+(i*80), obj.descriptorBindingInlineUniformBlockUpdateAfterBind, true);
	view.setUint32(28+(i*80), obj.pipelineCreationCacheControl, true);
	view.setUint32(32+(i*80), obj.privateData, true);
	view.setUint32(36+(i*80), obj.shaderDemoteToHelperInvocation, true);
	view.setUint32(40+(i*80), obj.shaderTerminateInvocation, true);
	view.setUint32(44+(i*80), obj.subgroupSizeControl, true);
	view.setUint32(48+(i*80), obj.computeFullSubgroups, true);
	view.setUint32(52+(i*80), obj.synchronization2, true);
	view.setUint32(56+(i*80), obj.textureCompressionASTC_HDR, true);
	view.setUint32(60+(i*80), obj.shaderZeroInitializeWorkgroupMemory, true);
	view.setUint32(64+(i*80), obj.dynamicRendering, true);
	view.setUint32(68+(i*80), obj.shaderIntegerDotProduct, true);
	view.setUint32(72+(i*80), obj.maintenance4, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.robustImageAccess, true);
	view.setUint32(20, obj.inlineUniformBlock, true);
	view.setUint32(24, obj.descriptorBindingInlineUniformBlockUpdateAfterBind, true);
	view.setUint32(28, obj.pipelineCreationCacheControl, true);
	view.setUint32(32, obj.privateData, true);
	view.setUint32(36, obj.shaderDemoteToHelperInvocation, true);
	view.setUint32(40, obj.shaderTerminateInvocation, true);
	view.setUint32(44, obj.subgroupSizeControl, true);
	view.setUint32(48, obj.computeFullSubgroups, true);
	view.setUint32(52, obj.synchronization2, true);
	view.setUint32(56, obj.textureCompressionASTC_HDR, true);
	view.setUint32(60, obj.shaderZeroInitializeWorkgroupMemory, true);
	view.setUint32(64, obj.dynamicRendering, true);
	view.setUint32(68, obj.shaderIntegerDotProduct, true);
	view.setUint32(72, obj.maintenance4, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan13Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		robustImageAccess: read.u32(ptr, 16),
		inlineUniformBlock: read.u32(ptr, 20),
		descriptorBindingInlineUniformBlockUpdateAfterBind: read.u32(ptr, 24),
		pipelineCreationCacheControl: read.u32(ptr, 28),
		privateData: read.u32(ptr, 32),
		shaderDemoteToHelperInvocation: read.u32(ptr, 36),
		shaderTerminateInvocation: read.u32(ptr, 40),
		subgroupSizeControl: read.u32(ptr, 44),
		computeFullSubgroups: read.u32(ptr, 48),
		synchronization2: read.u32(ptr, 52),
		textureCompressionASTC_HDR: read.u32(ptr, 56),
		shaderZeroInitializeWorkgroupMemory: read.u32(ptr, 60),
		dynamicRendering: read.u32(ptr, 64),
		shaderIntegerDotProduct: read.u32(ptr, 68),
		maintenance4: read.u32(ptr, 72)
	};
	return obj;
}


export function VkPhysicalDeviceVulkan13Properties_alloc_array(size){
	const buffer = new ArrayBuffer(216*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVulkan13Properties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(216*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*216), obj.sType, true)

	view.setBigUint64(8+(i*216), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*216), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*216), obj.minSubgroupSize, true);
	view.setUint32(20+(i*216), obj.maxSubgroupSize, true);
	view.setUint32(24+(i*216), obj.maxComputeWorkgroupSubgroups, true);
	view.setUint32(28+(i*216), obj.requiredSubgroupSizeStages, true);
	view.setUint32(32+(i*216), obj.maxInlineUniformBlockSize, true);
	view.setUint32(36+(i*216), obj.maxPerStageDescriptorInlineUniformBlocks, true);
	view.setUint32(40+(i*216), obj.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(44+(i*216), obj.maxDescriptorSetInlineUniformBlocks, true);
	view.setUint32(48+(i*216), obj.maxDescriptorSetUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(52+(i*216), obj.maxInlineUniformTotalSize, true);
	view.setUint32(56+(i*216), obj.integerDotProduct8BitUnsignedAccelerated, true);
	view.setUint32(60+(i*216), obj.integerDotProduct8BitSignedAccelerated, true);
	view.setUint32(64+(i*216), obj.integerDotProduct8BitMixedSignednessAccelerated, true);
	view.setUint32(68+(i*216), obj.integerDotProduct4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(72+(i*216), obj.integerDotProduct4x8BitPackedSignedAccelerated, true);
	view.setUint32(76+(i*216), obj.integerDotProduct4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(80+(i*216), obj.integerDotProduct16BitUnsignedAccelerated, true);
	view.setUint32(84+(i*216), obj.integerDotProduct16BitSignedAccelerated, true);
	view.setUint32(88+(i*216), obj.integerDotProduct16BitMixedSignednessAccelerated, true);
	view.setUint32(92+(i*216), obj.integerDotProduct32BitUnsignedAccelerated, true);
	view.setUint32(96+(i*216), obj.integerDotProduct32BitSignedAccelerated, true);
	view.setUint32(100+(i*216), obj.integerDotProduct32BitMixedSignednessAccelerated, true);
	view.setUint32(104+(i*216), obj.integerDotProduct64BitUnsignedAccelerated, true);
	view.setUint32(108+(i*216), obj.integerDotProduct64BitSignedAccelerated, true);
	view.setUint32(112+(i*216), obj.integerDotProduct64BitMixedSignednessAccelerated, true);
	view.setUint32(116+(i*216), obj.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, true);
	view.setUint32(120+(i*216), obj.integerDotProductAccumulatingSaturating8BitSignedAccelerated, true);
	view.setUint32(124+(i*216), obj.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, true);
	view.setUint32(128+(i*216), obj.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(132+(i*216), obj.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, true);
	view.setUint32(136+(i*216), obj.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(140+(i*216), obj.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, true);
	view.setUint32(144+(i*216), obj.integerDotProductAccumulatingSaturating16BitSignedAccelerated, true);
	view.setUint32(148+(i*216), obj.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, true);
	view.setUint32(152+(i*216), obj.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, true);
	view.setUint32(156+(i*216), obj.integerDotProductAccumulatingSaturating32BitSignedAccelerated, true);
	view.setUint32(160+(i*216), obj.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, true);
	view.setUint32(164+(i*216), obj.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, true);
	view.setUint32(168+(i*216), obj.integerDotProductAccumulatingSaturating64BitSignedAccelerated, true);
	view.setUint32(172+(i*216), obj.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, true);
	view.setUint64(176+(i*216), obj.storageTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(184+(i*216), obj.storageTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(192+(i*216), obj.uniformTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(200+(i*216), obj.uniformTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(208+(i*216), obj.maxBufferSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(216);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.minSubgroupSize, true);
	view.setUint32(20, obj.maxSubgroupSize, true);
	view.setUint32(24, obj.maxComputeWorkgroupSubgroups, true);
	view.setUint32(28, obj.requiredSubgroupSizeStages, true);
	view.setUint32(32, obj.maxInlineUniformBlockSize, true);
	view.setUint32(36, obj.maxPerStageDescriptorInlineUniformBlocks, true);
	view.setUint32(40, obj.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(44, obj.maxDescriptorSetInlineUniformBlocks, true);
	view.setUint32(48, obj.maxDescriptorSetUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(52, obj.maxInlineUniformTotalSize, true);
	view.setUint32(56, obj.integerDotProduct8BitUnsignedAccelerated, true);
	view.setUint32(60, obj.integerDotProduct8BitSignedAccelerated, true);
	view.setUint32(64, obj.integerDotProduct8BitMixedSignednessAccelerated, true);
	view.setUint32(68, obj.integerDotProduct4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(72, obj.integerDotProduct4x8BitPackedSignedAccelerated, true);
	view.setUint32(76, obj.integerDotProduct4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(80, obj.integerDotProduct16BitUnsignedAccelerated, true);
	view.setUint32(84, obj.integerDotProduct16BitSignedAccelerated, true);
	view.setUint32(88, obj.integerDotProduct16BitMixedSignednessAccelerated, true);
	view.setUint32(92, obj.integerDotProduct32BitUnsignedAccelerated, true);
	view.setUint32(96, obj.integerDotProduct32BitSignedAccelerated, true);
	view.setUint32(100, obj.integerDotProduct32BitMixedSignednessAccelerated, true);
	view.setUint32(104, obj.integerDotProduct64BitUnsignedAccelerated, true);
	view.setUint32(108, obj.integerDotProduct64BitSignedAccelerated, true);
	view.setUint32(112, obj.integerDotProduct64BitMixedSignednessAccelerated, true);
	view.setUint32(116, obj.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, true);
	view.setUint32(120, obj.integerDotProductAccumulatingSaturating8BitSignedAccelerated, true);
	view.setUint32(124, obj.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, true);
	view.setUint32(128, obj.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(132, obj.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, true);
	view.setUint32(136, obj.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(140, obj.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, true);
	view.setUint32(144, obj.integerDotProductAccumulatingSaturating16BitSignedAccelerated, true);
	view.setUint32(148, obj.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, true);
	view.setUint32(152, obj.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, true);
	view.setUint32(156, obj.integerDotProductAccumulatingSaturating32BitSignedAccelerated, true);
	view.setUint32(160, obj.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, true);
	view.setUint32(164, obj.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, true);
	view.setUint32(168, obj.integerDotProductAccumulatingSaturating64BitSignedAccelerated, true);
	view.setUint32(172, obj.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, true);
	view.setUint64(176, obj.storageTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(184, obj.storageTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(192, obj.uniformTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(200, obj.uniformTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(208, obj.maxBufferSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVulkan13Properties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minSubgroupSize: read.u32(ptr, 16),
		maxSubgroupSize: read.u32(ptr, 20),
		maxComputeWorkgroupSubgroups: read.u32(ptr, 24),
		requiredSubgroupSizeStages: read.u32(ptr, 28),
		maxInlineUniformBlockSize: read.u32(ptr, 32),
		maxPerStageDescriptorInlineUniformBlocks: read.u32(ptr, 36),
		maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: read.u32(ptr, 40),
		maxDescriptorSetInlineUniformBlocks: read.u32(ptr, 44),
		maxDescriptorSetUpdateAfterBindInlineUniformBlocks: read.u32(ptr, 48),
		maxInlineUniformTotalSize: read.u32(ptr, 52),
		integerDotProduct8BitUnsignedAccelerated: read.u32(ptr, 56),
		integerDotProduct8BitSignedAccelerated: read.u32(ptr, 60),
		integerDotProduct8BitMixedSignednessAccelerated: read.u32(ptr, 64),
		integerDotProduct4x8BitPackedUnsignedAccelerated: read.u32(ptr, 68),
		integerDotProduct4x8BitPackedSignedAccelerated: read.u32(ptr, 72),
		integerDotProduct4x8BitPackedMixedSignednessAccelerated: read.u32(ptr, 76),
		integerDotProduct16BitUnsignedAccelerated: read.u32(ptr, 80),
		integerDotProduct16BitSignedAccelerated: read.u32(ptr, 84),
		integerDotProduct16BitMixedSignednessAccelerated: read.u32(ptr, 88),
		integerDotProduct32BitUnsignedAccelerated: read.u32(ptr, 92),
		integerDotProduct32BitSignedAccelerated: read.u32(ptr, 96),
		integerDotProduct32BitMixedSignednessAccelerated: read.u32(ptr, 100),
		integerDotProduct64BitUnsignedAccelerated: read.u32(ptr, 104),
		integerDotProduct64BitSignedAccelerated: read.u32(ptr, 108),
		integerDotProduct64BitMixedSignednessAccelerated: read.u32(ptr, 112),
		integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: read.u32(ptr, 116),
		integerDotProductAccumulatingSaturating8BitSignedAccelerated: read.u32(ptr, 120),
		integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: read.u32(ptr, 124),
		integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: read.u32(ptr, 128),
		integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: read.u32(ptr, 132),
		integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: read.u32(ptr, 136),
		integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: read.u32(ptr, 140),
		integerDotProductAccumulatingSaturating16BitSignedAccelerated: read.u32(ptr, 144),
		integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: read.u32(ptr, 148),
		integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: read.u32(ptr, 152),
		integerDotProductAccumulatingSaturating32BitSignedAccelerated: read.u32(ptr, 156),
		integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: read.u32(ptr, 160),
		integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: read.u32(ptr, 164),
		integerDotProductAccumulatingSaturating64BitSignedAccelerated: read.u32(ptr, 168),
		integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: read.u32(ptr, 172),
		storageTexelBufferOffsetAlignmentBytes: null,
		storageTexelBufferOffsetSingleTexelAlignment: read.u32(ptr, 184),
		uniformTexelBufferOffsetAlignmentBytes: null,
		uniformTexelBufferOffsetSingleTexelAlignment: read.u32(ptr, 200),
		maxBufferSize: null
	};
	return obj;
}


export function VkPipelineCreationFeedback_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkPipelineCreationFeedback_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.flags, true);
	view.setUint64(8+(i*16), obj.duration, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.flags, true);
	view.setUint64(8, obj.duration, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCreationFeedback_from_C(ptr){
	const obj = {
		flags: read.u32(ptr, 0),
		duration: null
	};
	return obj;
}


export function VkPipelineCreationFeedbackCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPipelineCreationFeedbackCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	if (obj.pPipelineCreationFeedback){
		const wrapped = VkPipelineCreationFeedback_to_C(obj.pPipelineCreationFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*40), BigInt(obj.pPipelineCreationFeedback||0), true);
	}
	view.setUint32(24+(i*40), obj.pipelineStageCreationFeedbackCount, true);
	if (obj.pPipelineStageCreationFeedbacks){
		const wrapped = VkPipelineCreationFeedback_to_C(obj.pPipelineStageCreationFeedbacks, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pPipelineStageCreationFeedbacks||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pPipelineCreationFeedback){
		const wrapped = VkPipelineCreationFeedback_to_C(obj.pPipelineCreationFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pPipelineCreationFeedback||0), true);
	}
	view.setUint32(24, obj.pipelineStageCreationFeedbackCount, true);
	if (obj.pPipelineStageCreationFeedbacks){
		const wrapped = VkPipelineCreationFeedback_to_C(obj.pPipelineStageCreationFeedbacks, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pPipelineStageCreationFeedbacks||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCreationFeedbackCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pPipelineCreationFeedback: VkPipelineCreationFeedback_from_C(read.ptr(ptr)),
		pipelineStageCreationFeedbackCount: read.u32(ptr, 24),
		pPipelineStageCreationFeedbacks: VkPipelineCreationFeedback_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceShaderTerminateInvocationFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderTerminateInvocationFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderTerminateInvocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderTerminateInvocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderTerminateInvocationFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderTerminateInvocation: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceToolProperties_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceToolProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);



	view.setUint32(32+(i*56), obj.purposes, true);


	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);



	view.setUint32(32, obj.purposes, true);


	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceToolProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		name: null,
		version: null,
		purposes: read.u32(ptr, 32),
		description: null,
		layer: null
	};
	return obj;
}


export function VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderDemoteToHelperInvocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderDemoteToHelperInvocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderDemoteToHelperInvocation: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePrivateDataFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePrivateDataFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.privateData, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.privateData, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePrivateDataFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		privateData: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDevicePrivateDataCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDevicePrivateDataCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.privateDataSlotRequestCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.privateDataSlotRequestCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDevicePrivateDataCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		privateDataSlotRequestCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPrivateDataSlotCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPrivateDataSlotCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPrivateDataSlotCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePipelineCreationCacheControlFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePipelineCreationCacheControlFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pipelineCreationCacheControl, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineCreationCacheControl, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePipelineCreationCacheControlFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineCreationCacheControl: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMemoryBarrier2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkMemoryBarrier2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*48), obj.srcStageMask, true);
	view.setUint64(24+(i*48), obj.srcAccessMask, true);
	view.setUint64(32+(i*48), obj.dstStageMask, true);
	view.setUint64(40+(i*48), obj.dstAccessMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.srcStageMask, true);
	view.setUint64(24, obj.srcAccessMask, true);
	view.setUint64(32, obj.dstStageMask, true);
	view.setUint64(40, obj.dstAccessMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryBarrier2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcStageMask: null,
		srcAccessMask: null,
		dstStageMask: null,
		dstAccessMask: null
	};
	return obj;
}


export function VkBufferMemoryBarrier2_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkBufferMemoryBarrier2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*80), obj.srcStageMask, true);
	view.setUint64(24+(i*80), obj.srcAccessMask, true);
	view.setUint64(32+(i*80), obj.dstStageMask, true);
	view.setUint64(40+(i*80), obj.dstAccessMask, true);
	view.setUint32(48+(i*80), obj.srcQueueFamilyIndex, true);
	view.setUint32(52+(i*80), obj.dstQueueFamilyIndex, true);

	view.setBigUint64(56+(i*80), BigInt(obj.buffer||0), true);
	view.setBigUint64(56+(i*80), BigInt(obj.buffer||0), true);

	view.setUint64(64+(i*80), obj.offset, true);
	view.setUint64(72+(i*80), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.srcStageMask, true);
	view.setUint64(24, obj.srcAccessMask, true);
	view.setUint64(32, obj.dstStageMask, true);
	view.setUint64(40, obj.dstAccessMask, true);
	view.setUint32(48, obj.srcQueueFamilyIndex, true);
	view.setUint32(52, obj.dstQueueFamilyIndex, true);

	view.setBigUint64(56, BigInt(obj.buffer||0), true);
	view.setBigUint64(56, BigInt(obj.buffer||0), true);

	view.setUint64(64, obj.offset, true);
	view.setUint64(72, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferMemoryBarrier2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcStageMask: null,
		srcAccessMask: null,
		dstStageMask: null,
		dstAccessMask: null,
		srcQueueFamilyIndex: read.u32(ptr, 48),
		dstQueueFamilyIndex: read.u32(ptr, 52),
		buffer: undefined,
		offset: null,
		size: null
	};
	return obj;
}


export function VkImageMemoryBarrier2_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkImageMemoryBarrier2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*96), obj.srcStageMask, true);
	view.setUint64(24+(i*96), obj.srcAccessMask, true);
	view.setUint64(32+(i*96), obj.dstStageMask, true);
	view.setUint64(40+(i*96), obj.dstAccessMask, true);
	view.setUint32(48+(i*96), obj.oldLayout, true)
	view.setUint32(52+(i*96), obj.newLayout, true)
	view.setUint32(56+(i*96), obj.srcQueueFamilyIndex, true);
	view.setUint32(60+(i*96), obj.dstQueueFamilyIndex, true);

	view.setBigUint64(64+(i*96), BigInt(obj.image||0), true);
	view.setBigUint64(64+(i*96), BigInt(obj.image||0), true);

	if (obj.subresourceRange){
	view.setUint32(72+(i*96), obj.subresourceRange.aspectMask, true);
	view.setUint32(76+(i*96), obj.subresourceRange.baseMipLevel, true);
	view.setUint32(80+(i*96), obj.subresourceRange.levelCount, true);
	view.setUint32(84+(i*96), obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(88+(i*96), obj.subresourceRange.layerCount, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.srcStageMask, true);
	view.setUint64(24, obj.srcAccessMask, true);
	view.setUint64(32, obj.dstStageMask, true);
	view.setUint64(40, obj.dstAccessMask, true);
	view.setUint32(48, obj.oldLayout, true)
	view.setUint32(52, obj.newLayout, true)
	view.setUint32(56, obj.srcQueueFamilyIndex, true);
	view.setUint32(60, obj.dstQueueFamilyIndex, true);

	view.setBigUint64(64, BigInt(obj.image||0), true);
	view.setBigUint64(64, BigInt(obj.image||0), true);

	if (obj.subresourceRange){
	view.setUint32(72, obj.subresourceRange.aspectMask, true);
	view.setUint32(76, obj.subresourceRange.baseMipLevel, true);
	view.setUint32(80, obj.subresourceRange.levelCount, true);
	view.setUint32(84, obj.subresourceRange.baseArrayLayer, true);
	view.setUint32(88, obj.subresourceRange.layerCount, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageMemoryBarrier2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcStageMask: null,
		srcAccessMask: null,
		dstStageMask: null,
		dstAccessMask: null,
		oldLayout: read.u32(ptr, 48),
		newLayout: read.u32(ptr, 52),
		srcQueueFamilyIndex: read.u32(ptr, 56),
		dstQueueFamilyIndex: read.u32(ptr, 60),
		image: undefined,
		subresourceRange: null
	};
	return obj;
}


export function VkDependencyInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkDependencyInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.dependencyFlags, true);
	view.setUint32(20+(i*64), obj.memoryBarrierCount, true);
	if (obj.pMemoryBarriers){
		const wrapped = VkMemoryBarrier2_to_C(obj.pMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*64), BigInt(obj.pMemoryBarriers||0), true);
	}
	view.setUint32(32+(i*64), obj.bufferMemoryBarrierCount, true);
	if (obj.pBufferMemoryBarriers){
		const wrapped = VkBufferMemoryBarrier2_to_C(obj.pBufferMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*64), BigInt(obj.pBufferMemoryBarriers||0), true);
	}
	view.setUint32(48+(i*64), obj.imageMemoryBarrierCount, true);
	if (obj.pImageMemoryBarriers){
		const wrapped = VkImageMemoryBarrier2_to_C(obj.pImageMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*64), BigInt(obj.pImageMemoryBarriers||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dependencyFlags, true);
	view.setUint32(20, obj.memoryBarrierCount, true);
	if (obj.pMemoryBarriers){
		const wrapped = VkMemoryBarrier2_to_C(obj.pMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pMemoryBarriers||0), true);
	}
	view.setUint32(32, obj.bufferMemoryBarrierCount, true);
	if (obj.pBufferMemoryBarriers){
		const wrapped = VkBufferMemoryBarrier2_to_C(obj.pBufferMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pBufferMemoryBarriers||0), true);
	}
	view.setUint32(48, obj.imageMemoryBarrierCount, true);
	if (obj.pImageMemoryBarriers){
		const wrapped = VkImageMemoryBarrier2_to_C(obj.pImageMemoryBarriers, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pImageMemoryBarriers||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDependencyInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dependencyFlags: read.u32(ptr, 16),
		memoryBarrierCount: read.u32(ptr, 20),
		pMemoryBarriers: VkMemoryBarrier2_from_C(read.ptr(ptr)),
		bufferMemoryBarrierCount: read.u32(ptr, 32),
		pBufferMemoryBarriers: VkBufferMemoryBarrier2_from_C(read.ptr(ptr)),
		imageMemoryBarrierCount: read.u32(ptr, 48),
		pImageMemoryBarriers: VkImageMemoryBarrier2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkSemaphoreSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkSemaphoreSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*48), BigInt(obj.semaphore||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.semaphore||0), true);

	view.setUint64(24+(i*48), obj.value, true);
	view.setUint64(32+(i*48), obj.stageMask, true);
	view.setUint32(40+(i*48), obj.deviceIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.semaphore||0), true);
	view.setBigUint64(16, BigInt(obj.semaphore||0), true);

	view.setUint64(24, obj.value, true);
	view.setUint64(32, obj.stageMask, true);
	view.setUint32(40, obj.deviceIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		semaphore: undefined,
		value: null,
		stageMask: null,
		deviceIndex: read.u32(ptr, 40)
	};
	return obj;
}


export function VkCommandBufferSubmitInfo_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCommandBufferSubmitInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.commandBuffer||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.commandBuffer||0), true);

	view.setUint32(24+(i*32), obj.deviceMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.commandBuffer||0), true);
	view.setBigUint64(16, BigInt(obj.commandBuffer||0), true);

	view.setUint32(24, obj.deviceMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferSubmitInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		commandBuffer: undefined,
		deviceMask: read.u32(ptr, 24)
	};
	return obj;
}


export function VkSubmitInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkSubmitInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);
	view.setUint32(20+(i*64), obj.waitSemaphoreInfoCount, true);
	if (obj.pWaitSemaphoreInfos){
		const wrapped = VkSemaphoreSubmitInfo_to_C(obj.pWaitSemaphoreInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*64), BigInt(obj.pWaitSemaphoreInfos||0), true);
	}
	view.setUint32(32+(i*64), obj.commandBufferInfoCount, true);
	if (obj.pCommandBufferInfos){
		const wrapped = VkCommandBufferSubmitInfo_to_C(obj.pCommandBufferInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*64), BigInt(obj.pCommandBufferInfos||0), true);
	}
	view.setUint32(48+(i*64), obj.signalSemaphoreInfoCount, true);
	if (obj.pSignalSemaphoreInfos){
		const wrapped = VkSemaphoreSubmitInfo_to_C(obj.pSignalSemaphoreInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*64), BigInt(obj.pSignalSemaphoreInfos||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.waitSemaphoreInfoCount, true);
	if (obj.pWaitSemaphoreInfos){
		const wrapped = VkSemaphoreSubmitInfo_to_C(obj.pWaitSemaphoreInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pWaitSemaphoreInfos||0), true);
	}
	view.setUint32(32, obj.commandBufferInfoCount, true);
	if (obj.pCommandBufferInfos){
		const wrapped = VkCommandBufferSubmitInfo_to_C(obj.pCommandBufferInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pCommandBufferInfos||0), true);
	}
	view.setUint32(48, obj.signalSemaphoreInfoCount, true);
	if (obj.pSignalSemaphoreInfos){
		const wrapped = VkSemaphoreSubmitInfo_to_C(obj.pSignalSemaphoreInfos, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pSignalSemaphoreInfos||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubmitInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		waitSemaphoreInfoCount: read.u32(ptr, 20),
		pWaitSemaphoreInfos: VkSemaphoreSubmitInfo_from_C(read.ptr(ptr)),
		commandBufferInfoCount: read.u32(ptr, 32),
		pCommandBufferInfos: VkCommandBufferSubmitInfo_from_C(read.ptr(ptr)),
		signalSemaphoreInfoCount: read.u32(ptr, 48),
		pSignalSemaphoreInfos: VkSemaphoreSubmitInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceSynchronization2Features_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSynchronization2Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.synchronization2, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.synchronization2, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSynchronization2Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		synchronization2: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderZeroInitializeWorkgroupMemory, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderZeroInitializeWorkgroupMemory, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderZeroInitializeWorkgroupMemory: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceImageRobustnessFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageRobustnessFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.robustImageAccess, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.robustImageAccess, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageRobustnessFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		robustImageAccess: read.u32(ptr, 16)
	};
	return obj;
}


export function VkBufferCopy2_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkBufferCopy2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*40), obj.srcOffset, true);
	view.setUint64(24+(i*40), obj.dstOffset, true);
	view.setUint64(32+(i*40), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.srcOffset, true);
	view.setUint64(24, obj.dstOffset, true);
	view.setUint64(32, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferCopy2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcOffset: null,
		dstOffset: null,
		size: null
	};
	return obj;
}


export function VkCopyBufferInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkCopyBufferInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*48), BigInt(obj.srcBuffer||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.srcBuffer||0), true);


	view.setBigUint64(24+(i*48), BigInt(obj.dstBuffer||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.dstBuffer||0), true);

	view.setUint32(32+(i*48), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcBuffer||0), true);
	view.setBigUint64(16, BigInt(obj.srcBuffer||0), true);


	view.setBigUint64(24, BigInt(obj.dstBuffer||0), true);
	view.setBigUint64(24, BigInt(obj.dstBuffer||0), true);

	view.setUint32(32, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyBufferInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcBuffer: undefined,
		dstBuffer: undefined,
		regionCount: read.u32(ptr, 32),
		pRegions: VkBufferCopy2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkImageCopy2_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkImageCopy2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16+(i*88), obj.srcSubresource.aspectMask, true);
	view.setUint32(20+(i*88), obj.srcSubresource.mipLevel, true);
	view.setUint32(24+(i*88), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28+(i*88), obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(32+(i*88), obj.srcOffset.x, true);
	view.setInt32(36+(i*88), obj.srcOffset.y, true);
	view.setInt32(40+(i*88), obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(44+(i*88), obj.dstSubresource.aspectMask, true);
	view.setUint32(48+(i*88), obj.dstSubresource.mipLevel, true);
	view.setUint32(52+(i*88), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(56+(i*88), obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(60+(i*88), obj.dstOffset.x, true);
	view.setInt32(64+(i*88), obj.dstOffset.y, true);
	view.setInt32(68+(i*88), obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(72+(i*88), obj.extent.width, true);
	view.setUint32(76+(i*88), obj.extent.height, true);
	view.setUint32(80+(i*88), obj.extent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16, obj.srcSubresource.aspectMask, true);
	view.setUint32(20, obj.srcSubresource.mipLevel, true);
	view.setUint32(24, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28, obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(32, obj.srcOffset.x, true);
	view.setInt32(36, obj.srcOffset.y, true);
	view.setInt32(40, obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(44, obj.dstSubresource.aspectMask, true);
	view.setUint32(48, obj.dstSubresource.mipLevel, true);
	view.setUint32(52, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(56, obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(60, obj.dstOffset.x, true);
	view.setInt32(64, obj.dstOffset.y, true);
	view.setInt32(68, obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(72, obj.extent.width, true);
	view.setUint32(76, obj.extent.height, true);
	view.setUint32(80, obj.extent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageCopy2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcSubresource: null,
		srcOffset: null,
		dstSubresource: null,
		dstOffset: null,
		extent: null
	};
	return obj;
}


export function VkCopyImageInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkCopyImageInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);

	view.setUint32(24+(i*56), obj.srcImageLayout, true)

	view.setBigUint64(32+(i*56), BigInt(obj.dstImage||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.dstImage||0), true);

	view.setUint32(40+(i*56), obj.dstImageLayout, true)
	view.setUint32(44+(i*56), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*56), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*56), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcImage||0), true);
	view.setBigUint64(16, BigInt(obj.srcImage||0), true);

	view.setUint32(24, obj.srcImageLayout, true)

	view.setBigUint64(32, BigInt(obj.dstImage||0), true);
	view.setBigUint64(32, BigInt(obj.dstImage||0), true);

	view.setUint32(40, obj.dstImageLayout, true)
	view.setUint32(44, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyImageInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcImage: undefined,
		srcImageLayout: read.u32(ptr, 24),
		dstImage: undefined,
		dstImageLayout: read.u32(ptr, 40),
		regionCount: read.u32(ptr, 44),
		pRegions: VkImageCopy2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkBufferImageCopy2_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkBufferImageCopy2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*72), obj.bufferOffset, true);
	view.setUint32(24+(i*72), obj.bufferRowLength, true);
	view.setUint32(28+(i*72), obj.bufferImageHeight, true);
	if (obj.imageSubresource){
	view.setUint32(32+(i*72), obj.imageSubresource.aspectMask, true);
	view.setUint32(36+(i*72), obj.imageSubresource.mipLevel, true);
	view.setUint32(40+(i*72), obj.imageSubresource.baseArrayLayer, true);
	view.setUint32(44+(i*72), obj.imageSubresource.layerCount, true);
	}
	if (obj.imageOffset){
	view.setInt32(48+(i*72), obj.imageOffset.x, true);
	view.setInt32(52+(i*72), obj.imageOffset.y, true);
	view.setInt32(56+(i*72), obj.imageOffset.z, true);
	}
	if (obj.imageExtent){
	view.setUint32(60+(i*72), obj.imageExtent.width, true);
	view.setUint32(64+(i*72), obj.imageExtent.height, true);
	view.setUint32(68+(i*72), obj.imageExtent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.bufferOffset, true);
	view.setUint32(24, obj.bufferRowLength, true);
	view.setUint32(28, obj.bufferImageHeight, true);
	if (obj.imageSubresource){
	view.setUint32(32, obj.imageSubresource.aspectMask, true);
	view.setUint32(36, obj.imageSubresource.mipLevel, true);
	view.setUint32(40, obj.imageSubresource.baseArrayLayer, true);
	view.setUint32(44, obj.imageSubresource.layerCount, true);
	}
	if (obj.imageOffset){
	view.setInt32(48, obj.imageOffset.x, true);
	view.setInt32(52, obj.imageOffset.y, true);
	view.setInt32(56, obj.imageOffset.z, true);
	}
	if (obj.imageExtent){
	view.setUint32(60, obj.imageExtent.width, true);
	view.setUint32(64, obj.imageExtent.height, true);
	view.setUint32(68, obj.imageExtent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferImageCopy2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		bufferOffset: null,
		bufferRowLength: read.u32(ptr, 24),
		bufferImageHeight: read.u32(ptr, 28),
		imageSubresource: null,
		imageOffset: null,
		imageExtent: null
	};
	return obj;
}


export function VkCopyBufferToImageInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkCopyBufferToImageInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*48), BigInt(obj.srcBuffer||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.srcBuffer||0), true);


	view.setBigUint64(24+(i*48), BigInt(obj.dstImage||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.dstImage||0), true);

	view.setUint32(32+(i*48), obj.dstImageLayout, true)
	view.setUint32(36+(i*48), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcBuffer||0), true);
	view.setBigUint64(16, BigInt(obj.srcBuffer||0), true);


	view.setBigUint64(24, BigInt(obj.dstImage||0), true);
	view.setBigUint64(24, BigInt(obj.dstImage||0), true);

	view.setUint32(32, obj.dstImageLayout, true)
	view.setUint32(36, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyBufferToImageInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcBuffer: undefined,
		dstImage: undefined,
		dstImageLayout: read.u32(ptr, 32),
		regionCount: read.u32(ptr, 36),
		pRegions: VkBufferImageCopy2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkCopyImageToBufferInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkCopyImageToBufferInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);

	view.setUint32(24+(i*56), obj.srcImageLayout, true)

	view.setBigUint64(32+(i*56), BigInt(obj.dstBuffer||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.dstBuffer||0), true);

	view.setUint32(40+(i*56), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*56), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*56), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcImage||0), true);
	view.setBigUint64(16, BigInt(obj.srcImage||0), true);

	view.setUint32(24, obj.srcImageLayout, true)

	view.setBigUint64(32, BigInt(obj.dstBuffer||0), true);
	view.setBigUint64(32, BigInt(obj.dstBuffer||0), true);

	view.setUint32(40, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkBufferImageCopy2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyImageToBufferInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcImage: undefined,
		srcImageLayout: read.u32(ptr, 24),
		dstBuffer: undefined,
		regionCount: read.u32(ptr, 40),
		pRegions: VkBufferImageCopy2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkImageBlit2_alloc_array(size){
	const buffer = new ArrayBuffer(84*size);
	return ptr(buffer);
}
export function VkImageBlit2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(84*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*84), obj.sType, true)

	view.setBigUint64(8+(i*84), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*84), BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16+(i*84), obj.srcSubresource.aspectMask, true);
	view.setUint32(20+(i*84), obj.srcSubresource.mipLevel, true);
	view.setUint32(24+(i*84), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28+(i*84), obj.srcSubresource.layerCount, true);
	}

	if (obj.dstSubresource){
	view.setUint32(48+(i*84), obj.dstSubresource.aspectMask, true);
	view.setUint32(52+(i*84), obj.dstSubresource.mipLevel, true);
	view.setUint32(56+(i*84), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(60+(i*84), obj.dstSubresource.layerCount, true);
	}

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(84);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16, obj.srcSubresource.aspectMask, true);
	view.setUint32(20, obj.srcSubresource.mipLevel, true);
	view.setUint32(24, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28, obj.srcSubresource.layerCount, true);
	}

	if (obj.dstSubresource){
	view.setUint32(48, obj.dstSubresource.aspectMask, true);
	view.setUint32(52, obj.dstSubresource.mipLevel, true);
	view.setUint32(56, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(60, obj.dstSubresource.layerCount, true);
	}

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageBlit2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcSubresource: null,
		srcOffsets: null,
		dstSubresource: null,
		dstOffsets: null
	};
	return obj;
}


export function VkBlitImageInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkBlitImageInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*64), BigInt(obj.srcImage||0), true);
	view.setBigUint64(16+(i*64), BigInt(obj.srcImage||0), true);

	view.setUint32(24+(i*64), obj.srcImageLayout, true)

	view.setBigUint64(32+(i*64), BigInt(obj.dstImage||0), true);
	view.setBigUint64(32+(i*64), BigInt(obj.dstImage||0), true);

	view.setUint32(40+(i*64), obj.dstImageLayout, true)
	view.setUint32(44+(i*64), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageBlit2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*64), BigInt(obj.pRegions||0), true);
	}
	view.setUint32(56+(i*64), obj.filter, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcImage||0), true);
	view.setBigUint64(16, BigInt(obj.srcImage||0), true);

	view.setUint32(24, obj.srcImageLayout, true)

	view.setBigUint64(32, BigInt(obj.dstImage||0), true);
	view.setBigUint64(32, BigInt(obj.dstImage||0), true);

	view.setUint32(40, obj.dstImageLayout, true)
	view.setUint32(44, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageBlit2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pRegions||0), true);
	}
	view.setUint32(56, obj.filter, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBlitImageInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcImage: undefined,
		srcImageLayout: read.u32(ptr, 24),
		dstImage: undefined,
		dstImageLayout: read.u32(ptr, 40),
		regionCount: read.u32(ptr, 44),
		pRegions: VkImageBlit2_from_C(read.ptr(ptr)),
		filter: read.u32(ptr, 56)
	};
	return obj;
}


export function VkImageResolve2_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkImageResolve2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16+(i*88), obj.srcSubresource.aspectMask, true);
	view.setUint32(20+(i*88), obj.srcSubresource.mipLevel, true);
	view.setUint32(24+(i*88), obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28+(i*88), obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(32+(i*88), obj.srcOffset.x, true);
	view.setInt32(36+(i*88), obj.srcOffset.y, true);
	view.setInt32(40+(i*88), obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(44+(i*88), obj.dstSubresource.aspectMask, true);
	view.setUint32(48+(i*88), obj.dstSubresource.mipLevel, true);
	view.setUint32(52+(i*88), obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(56+(i*88), obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(60+(i*88), obj.dstOffset.x, true);
	view.setInt32(64+(i*88), obj.dstOffset.y, true);
	view.setInt32(68+(i*88), obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(72+(i*88), obj.extent.width, true);
	view.setUint32(76+(i*88), obj.extent.height, true);
	view.setUint32(80+(i*88), obj.extent.depth, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.srcSubresource){
	view.setUint32(16, obj.srcSubresource.aspectMask, true);
	view.setUint32(20, obj.srcSubresource.mipLevel, true);
	view.setUint32(24, obj.srcSubresource.baseArrayLayer, true);
	view.setUint32(28, obj.srcSubresource.layerCount, true);
	}
	if (obj.srcOffset){
	view.setInt32(32, obj.srcOffset.x, true);
	view.setInt32(36, obj.srcOffset.y, true);
	view.setInt32(40, obj.srcOffset.z, true);
	}
	if (obj.dstSubresource){
	view.setUint32(44, obj.dstSubresource.aspectMask, true);
	view.setUint32(48, obj.dstSubresource.mipLevel, true);
	view.setUint32(52, obj.dstSubresource.baseArrayLayer, true);
	view.setUint32(56, obj.dstSubresource.layerCount, true);
	}
	if (obj.dstOffset){
	view.setInt32(60, obj.dstOffset.x, true);
	view.setInt32(64, obj.dstOffset.y, true);
	view.setInt32(68, obj.dstOffset.z, true);
	}
	if (obj.extent){
	view.setUint32(72, obj.extent.width, true);
	view.setUint32(76, obj.extent.height, true);
	view.setUint32(80, obj.extent.depth, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageResolve2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcSubresource: null,
		srcOffset: null,
		dstSubresource: null,
		dstOffset: null,
		extent: null
	};
	return obj;
}


export function VkResolveImageInfo2_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkResolveImageInfo2_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.srcImage||0), true);

	view.setUint32(24+(i*56), obj.srcImageLayout, true)

	view.setBigUint64(32+(i*56), BigInt(obj.dstImage||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.dstImage||0), true);

	view.setUint32(40+(i*56), obj.dstImageLayout, true)
	view.setUint32(44+(i*56), obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageResolve2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*56), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*56), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.srcImage||0), true);
	view.setBigUint64(16, BigInt(obj.srcImage||0), true);

	view.setUint32(24, obj.srcImageLayout, true)

	view.setBigUint64(32, BigInt(obj.dstImage||0), true);
	view.setBigUint64(32, BigInt(obj.dstImage||0), true);

	view.setUint32(40, obj.dstImageLayout, true)
	view.setUint32(44, obj.regionCount, true);
	if (obj.pRegions){
		const wrapped = VkImageResolve2_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkResolveImageInfo2_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcImage: undefined,
		srcImageLayout: read.u32(ptr, 24),
		dstImage: undefined,
		dstImageLayout: read.u32(ptr, 40),
		regionCount: read.u32(ptr, 44),
		pRegions: VkImageResolve2_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceSubgroupSizeControlFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubgroupSizeControlFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.subgroupSizeControl, true);
	view.setUint32(20+(i*24), obj.computeFullSubgroups, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subgroupSizeControl, true);
	view.setUint32(20, obj.computeFullSubgroups, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubgroupSizeControlFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subgroupSizeControl: read.u32(ptr, 16),
		computeFullSubgroups: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceSubgroupSizeControlProperties_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubgroupSizeControlProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.minSubgroupSize, true);
	view.setUint32(20+(i*32), obj.maxSubgroupSize, true);
	view.setUint32(24+(i*32), obj.maxComputeWorkgroupSubgroups, true);
	view.setUint32(28+(i*32), obj.requiredSubgroupSizeStages, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.minSubgroupSize, true);
	view.setUint32(20, obj.maxSubgroupSize, true);
	view.setUint32(24, obj.maxComputeWorkgroupSubgroups, true);
	view.setUint32(28, obj.requiredSubgroupSizeStages, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubgroupSizeControlProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minSubgroupSize: read.u32(ptr, 16),
		maxSubgroupSize: read.u32(ptr, 20),
		maxComputeWorkgroupSubgroups: read.u32(ptr, 24),
		requiredSubgroupSizeStages: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.requiredSubgroupSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.requiredSubgroupSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineShaderStageRequiredSubgroupSizeCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		requiredSubgroupSize: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceInlineUniformBlockFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceInlineUniformBlockFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.inlineUniformBlock, true);
	view.setUint32(20+(i*24), obj.descriptorBindingInlineUniformBlockUpdateAfterBind, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.inlineUniformBlock, true);
	view.setUint32(20, obj.descriptorBindingInlineUniformBlockUpdateAfterBind, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceInlineUniformBlockFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		inlineUniformBlock: read.u32(ptr, 16),
		descriptorBindingInlineUniformBlockUpdateAfterBind: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceInlineUniformBlockProperties_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceInlineUniformBlockProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.maxInlineUniformBlockSize, true);
	view.setUint32(20+(i*40), obj.maxPerStageDescriptorInlineUniformBlocks, true);
	view.setUint32(24+(i*40), obj.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(28+(i*40), obj.maxDescriptorSetInlineUniformBlocks, true);
	view.setUint32(32+(i*40), obj.maxDescriptorSetUpdateAfterBindInlineUniformBlocks, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxInlineUniformBlockSize, true);
	view.setUint32(20, obj.maxPerStageDescriptorInlineUniformBlocks, true);
	view.setUint32(24, obj.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, true);
	view.setUint32(28, obj.maxDescriptorSetInlineUniformBlocks, true);
	view.setUint32(32, obj.maxDescriptorSetUpdateAfterBindInlineUniformBlocks, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceInlineUniformBlockProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxInlineUniformBlockSize: read.u32(ptr, 16),
		maxPerStageDescriptorInlineUniformBlocks: read.u32(ptr, 20),
		maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: read.u32(ptr, 24),
		maxDescriptorSetInlineUniformBlocks: read.u32(ptr, 28),
		maxDescriptorSetUpdateAfterBindInlineUniformBlocks: read.u32(ptr, 32)
	};
	return obj;
}


export function VkWriteDescriptorSetInlineUniformBlock_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkWriteDescriptorSetInlineUniformBlock_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.dataSize, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dataSize, true);

	view.setBigUint64(24, BigInt(obj.pData||0), true);
	view.setBigUint64(24, BigInt(obj.pData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkWriteDescriptorSetInlineUniformBlock_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dataSize: read.u32(ptr, 16),
		pData: read.ptr(ptr)
	};
	return obj;
}


export function VkDescriptorPoolInlineUniformBlockCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDescriptorPoolInlineUniformBlockCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxInlineUniformBlockBindings, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxInlineUniformBlockBindings, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorPoolInlineUniformBlockCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxInlineUniformBlockBindings: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceTextureCompressionASTCHDRFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTextureCompressionASTCHDRFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.textureCompressionASTC_HDR, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.textureCompressionASTC_HDR, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTextureCompressionASTCHDRFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		textureCompressionASTC_HDR: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderingAttachmentInfo_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkRenderingAttachmentInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*64), BigInt(obj.imageView||0), true);
	view.setBigUint64(16+(i*64), BigInt(obj.imageView||0), true);

	view.setUint32(24+(i*64), obj.imageLayout, true)
	view.setUint32(28+(i*64), obj.resolveMode, true)

	view.setBigUint64(32+(i*64), BigInt(obj.resolveImageView||0), true);
	view.setBigUint64(32+(i*64), BigInt(obj.resolveImageView||0), true);

	view.setUint32(40+(i*64), obj.resolveImageLayout, true)
	view.setUint32(44+(i*64), obj.loadOp, true)
	view.setUint32(48+(i*64), obj.storeOp, true)

	view.setBigUint64(56+(i*64), BigInt(obj.clearValue||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.clearValue||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.imageView||0), true);
	view.setBigUint64(16, BigInt(obj.imageView||0), true);

	view.setUint32(24, obj.imageLayout, true)
	view.setUint32(28, obj.resolveMode, true)

	view.setBigUint64(32, BigInt(obj.resolveImageView||0), true);
	view.setBigUint64(32, BigInt(obj.resolveImageView||0), true);

	view.setUint32(40, obj.resolveImageLayout, true)
	view.setUint32(44, obj.loadOp, true)
	view.setUint32(48, obj.storeOp, true)

	view.setBigUint64(56, BigInt(obj.clearValue||0), true);
	view.setBigUint64(56, BigInt(obj.clearValue||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderingAttachmentInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageView: undefined,
		imageLayout: read.u32(ptr, 24),
		resolveMode: read.u32(ptr, 28),
		resolveImageView: undefined,
		resolveImageLayout: read.u32(ptr, 40),
		loadOp: read.u32(ptr, 44),
		storeOp: read.u32(ptr, 48),
		clearValue: undefined
	};
	return obj;
}


export function VkRenderingInfo_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkRenderingInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.flags, true);
	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(24+(i*80), obj.renderArea.offset.x, true);
	view.setInt32(28+(i*80), obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(32+(i*80), obj.renderArea.extent.width, true);
	view.setUint32(36+(i*80), obj.renderArea.extent.height, true);
	}
	}
	view.setUint32(40+(i*80), obj.layerCount, true);
	view.setUint32(44+(i*80), obj.viewMask, true);
	view.setUint32(48+(i*80), obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*80), BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pDepthAttachment){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pDepthAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*80), BigInt(obj.pDepthAttachment||0), true);
	}
	if (obj.pStencilAttachment){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72+(i*80), BigInt(obj.pStencilAttachment||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(24, obj.renderArea.offset.x, true);
	view.setInt32(28, obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(32, obj.renderArea.extent.width, true);
	view.setUint32(36, obj.renderArea.extent.height, true);
	}
	}
	view.setUint32(40, obj.layerCount, true);
	view.setUint32(44, obj.viewMask, true);
	view.setUint32(48, obj.colorAttachmentCount, true);
	if (obj.pColorAttachments){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pColorAttachments, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pColorAttachments||0), true);
	}
	if (obj.pDepthAttachment){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pDepthAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.pDepthAttachment||0), true);
	}
	if (obj.pStencilAttachment){
		const wrapped = VkRenderingAttachmentInfo_to_C(obj.pStencilAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72, BigInt(obj.pStencilAttachment||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderingInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		renderArea: null,
		layerCount: read.u32(ptr, 40),
		viewMask: read.u32(ptr, 44),
		colorAttachmentCount: read.u32(ptr, 48),
		pColorAttachments: VkRenderingAttachmentInfo_from_C(read.ptr(ptr)),
		pDepthAttachment: VkRenderingAttachmentInfo_from_C(read.ptr(ptr)),
		pStencilAttachment: VkRenderingAttachmentInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPipelineRenderingCreateInfo_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPipelineRenderingCreateInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.viewMask, true);
	view.setUint32(20+(i*40), obj.colorAttachmentCount, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pColorAttachmentFormats||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pColorAttachmentFormats||0), true);

	view.setUint32(32+(i*40), obj.depthAttachmentFormat, true)
	view.setUint32(36+(i*40), obj.stencilAttachmentFormat, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.viewMask, true);
	view.setUint32(20, obj.colorAttachmentCount, true);

	view.setBigUint64(24, BigInt(obj.pColorAttachmentFormats||0), true);
	view.setBigUint64(24, BigInt(obj.pColorAttachmentFormats||0), true);

	view.setUint32(32, obj.depthAttachmentFormat, true)
	view.setUint32(36, obj.stencilAttachmentFormat, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRenderingCreateInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		viewMask: read.u32(ptr, 16),
		colorAttachmentCount: read.u32(ptr, 20),
		pColorAttachmentFormats: undefined,
		depthAttachmentFormat: read.u32(ptr, 32),
		stencilAttachmentFormat: read.u32(ptr, 36)
	};
	return obj;
}


export function VkPhysicalDeviceDynamicRenderingFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDynamicRenderingFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.dynamicRendering, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dynamicRendering, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDynamicRenderingFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dynamicRendering: read.u32(ptr, 16)
	};
	return obj;
}


export function VkCommandBufferInheritanceRenderingInfo_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkCommandBufferInheritanceRenderingInfo_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.flags, true);
	view.setUint32(20+(i*56), obj.viewMask, true);
	view.setUint32(24+(i*56), obj.colorAttachmentCount, true);

	view.setBigUint64(32+(i*56), BigInt(obj.pColorAttachmentFormats||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.pColorAttachmentFormats||0), true);

	view.setUint32(40+(i*56), obj.depthAttachmentFormat, true)
	view.setUint32(44+(i*56), obj.stencilAttachmentFormat, true)
	view.setUint32(48+(i*56), obj.rasterizationSamples, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.viewMask, true);
	view.setUint32(24, obj.colorAttachmentCount, true);

	view.setBigUint64(32, BigInt(obj.pColorAttachmentFormats||0), true);
	view.setBigUint64(32, BigInt(obj.pColorAttachmentFormats||0), true);

	view.setUint32(40, obj.depthAttachmentFormat, true)
	view.setUint32(44, obj.stencilAttachmentFormat, true)
	view.setUint32(48, obj.rasterizationSamples, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferInheritanceRenderingInfo_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		viewMask: read.u32(ptr, 20),
		colorAttachmentCount: read.u32(ptr, 24),
		pColorAttachmentFormats: undefined,
		depthAttachmentFormat: read.u32(ptr, 40),
		stencilAttachmentFormat: read.u32(ptr, 44),
		rasterizationSamples: read.u32(ptr, 48)
	};
	return obj;
}


export function VkPhysicalDeviceShaderIntegerDotProductFeatures_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderIntegerDotProductFeatures_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderIntegerDotProduct, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderIntegerDotProduct, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderIntegerDotProductFeatures_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderIntegerDotProduct: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderIntegerDotProductProperties_alloc_array(size){
	const buffer = new ArrayBuffer(136*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderIntegerDotProductProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(136*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*136), obj.sType, true)

	view.setBigUint64(8+(i*136), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*136), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*136), obj.integerDotProduct8BitUnsignedAccelerated, true);
	view.setUint32(20+(i*136), obj.integerDotProduct8BitSignedAccelerated, true);
	view.setUint32(24+(i*136), obj.integerDotProduct8BitMixedSignednessAccelerated, true);
	view.setUint32(28+(i*136), obj.integerDotProduct4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(32+(i*136), obj.integerDotProduct4x8BitPackedSignedAccelerated, true);
	view.setUint32(36+(i*136), obj.integerDotProduct4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(40+(i*136), obj.integerDotProduct16BitUnsignedAccelerated, true);
	view.setUint32(44+(i*136), obj.integerDotProduct16BitSignedAccelerated, true);
	view.setUint32(48+(i*136), obj.integerDotProduct16BitMixedSignednessAccelerated, true);
	view.setUint32(52+(i*136), obj.integerDotProduct32BitUnsignedAccelerated, true);
	view.setUint32(56+(i*136), obj.integerDotProduct32BitSignedAccelerated, true);
	view.setUint32(60+(i*136), obj.integerDotProduct32BitMixedSignednessAccelerated, true);
	view.setUint32(64+(i*136), obj.integerDotProduct64BitUnsignedAccelerated, true);
	view.setUint32(68+(i*136), obj.integerDotProduct64BitSignedAccelerated, true);
	view.setUint32(72+(i*136), obj.integerDotProduct64BitMixedSignednessAccelerated, true);
	view.setUint32(76+(i*136), obj.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, true);
	view.setUint32(80+(i*136), obj.integerDotProductAccumulatingSaturating8BitSignedAccelerated, true);
	view.setUint32(84+(i*136), obj.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, true);
	view.setUint32(88+(i*136), obj.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(92+(i*136), obj.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, true);
	view.setUint32(96+(i*136), obj.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(100+(i*136), obj.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, true);
	view.setUint32(104+(i*136), obj.integerDotProductAccumulatingSaturating16BitSignedAccelerated, true);
	view.setUint32(108+(i*136), obj.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, true);
	view.setUint32(112+(i*136), obj.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, true);
	view.setUint32(116+(i*136), obj.integerDotProductAccumulatingSaturating32BitSignedAccelerated, true);
	view.setUint32(120+(i*136), obj.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, true);
	view.setUint32(124+(i*136), obj.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, true);
	view.setUint32(128+(i*136), obj.integerDotProductAccumulatingSaturating64BitSignedAccelerated, true);
	view.setUint32(132+(i*136), obj.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(136);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.integerDotProduct8BitUnsignedAccelerated, true);
	view.setUint32(20, obj.integerDotProduct8BitSignedAccelerated, true);
	view.setUint32(24, obj.integerDotProduct8BitMixedSignednessAccelerated, true);
	view.setUint32(28, obj.integerDotProduct4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(32, obj.integerDotProduct4x8BitPackedSignedAccelerated, true);
	view.setUint32(36, obj.integerDotProduct4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(40, obj.integerDotProduct16BitUnsignedAccelerated, true);
	view.setUint32(44, obj.integerDotProduct16BitSignedAccelerated, true);
	view.setUint32(48, obj.integerDotProduct16BitMixedSignednessAccelerated, true);
	view.setUint32(52, obj.integerDotProduct32BitUnsignedAccelerated, true);
	view.setUint32(56, obj.integerDotProduct32BitSignedAccelerated, true);
	view.setUint32(60, obj.integerDotProduct32BitMixedSignednessAccelerated, true);
	view.setUint32(64, obj.integerDotProduct64BitUnsignedAccelerated, true);
	view.setUint32(68, obj.integerDotProduct64BitSignedAccelerated, true);
	view.setUint32(72, obj.integerDotProduct64BitMixedSignednessAccelerated, true);
	view.setUint32(76, obj.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, true);
	view.setUint32(80, obj.integerDotProductAccumulatingSaturating8BitSignedAccelerated, true);
	view.setUint32(84, obj.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, true);
	view.setUint32(88, obj.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, true);
	view.setUint32(92, obj.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, true);
	view.setUint32(96, obj.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, true);
	view.setUint32(100, obj.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, true);
	view.setUint32(104, obj.integerDotProductAccumulatingSaturating16BitSignedAccelerated, true);
	view.setUint32(108, obj.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, true);
	view.setUint32(112, obj.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, true);
	view.setUint32(116, obj.integerDotProductAccumulatingSaturating32BitSignedAccelerated, true);
	view.setUint32(120, obj.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, true);
	view.setUint32(124, obj.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, true);
	view.setUint32(128, obj.integerDotProductAccumulatingSaturating64BitSignedAccelerated, true);
	view.setUint32(132, obj.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderIntegerDotProductProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		integerDotProduct8BitUnsignedAccelerated: read.u32(ptr, 16),
		integerDotProduct8BitSignedAccelerated: read.u32(ptr, 20),
		integerDotProduct8BitMixedSignednessAccelerated: read.u32(ptr, 24),
		integerDotProduct4x8BitPackedUnsignedAccelerated: read.u32(ptr, 28),
		integerDotProduct4x8BitPackedSignedAccelerated: read.u32(ptr, 32),
		integerDotProduct4x8BitPackedMixedSignednessAccelerated: read.u32(ptr, 36),
		integerDotProduct16BitUnsignedAccelerated: read.u32(ptr, 40),
		integerDotProduct16BitSignedAccelerated: read.u32(ptr, 44),
		integerDotProduct16BitMixedSignednessAccelerated: read.u32(ptr, 48),
		integerDotProduct32BitUnsignedAccelerated: read.u32(ptr, 52),
		integerDotProduct32BitSignedAccelerated: read.u32(ptr, 56),
		integerDotProduct32BitMixedSignednessAccelerated: read.u32(ptr, 60),
		integerDotProduct64BitUnsignedAccelerated: read.u32(ptr, 64),
		integerDotProduct64BitSignedAccelerated: read.u32(ptr, 68),
		integerDotProduct64BitMixedSignednessAccelerated: read.u32(ptr, 72),
		integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: read.u32(ptr, 76),
		integerDotProductAccumulatingSaturating8BitSignedAccelerated: read.u32(ptr, 80),
		integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: read.u32(ptr, 84),
		integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: read.u32(ptr, 88),
		integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: read.u32(ptr, 92),
		integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: read.u32(ptr, 96),
		integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: read.u32(ptr, 100),
		integerDotProductAccumulatingSaturating16BitSignedAccelerated: read.u32(ptr, 104),
		integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: read.u32(ptr, 108),
		integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: read.u32(ptr, 112),
		integerDotProductAccumulatingSaturating32BitSignedAccelerated: read.u32(ptr, 116),
		integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: read.u32(ptr, 120),
		integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: read.u32(ptr, 124),
		integerDotProductAccumulatingSaturating64BitSignedAccelerated: read.u32(ptr, 128),
		integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: read.u32(ptr, 132)
	};
	return obj;
}


export function VkPhysicalDeviceTexelBufferAlignmentProperties_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTexelBufferAlignmentProperties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*48), obj.storageTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(24+(i*48), obj.storageTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(32+(i*48), obj.uniformTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(40+(i*48), obj.uniformTexelBufferOffsetSingleTexelAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.storageTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(24, obj.storageTexelBufferOffsetSingleTexelAlignment, true);
	view.setUint64(32, obj.uniformTexelBufferOffsetAlignmentBytes, true);
	view.setUint32(40, obj.uniformTexelBufferOffsetSingleTexelAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTexelBufferAlignmentProperties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		storageTexelBufferOffsetAlignmentBytes: null,
		storageTexelBufferOffsetSingleTexelAlignment: read.u32(ptr, 24),
		uniformTexelBufferOffsetAlignmentBytes: null,
		uniformTexelBufferOffsetSingleTexelAlignment: read.u32(ptr, 40)
	};
	return obj;
}


export function VkFormatProperties3_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkFormatProperties3_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*40), obj.linearTilingFeatures, true);
	view.setUint64(24+(i*40), obj.optimalTilingFeatures, true);
	view.setUint64(32+(i*40), obj.bufferFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.linearTilingFeatures, true);
	view.setUint64(24, obj.optimalTilingFeatures, true);
	view.setUint64(32, obj.bufferFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFormatProperties3_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		linearTilingFeatures: null,
		optimalTilingFeatures: null,
		bufferFeatures: null
	};
	return obj;
}


export function VkPhysicalDeviceMaintenance4Features_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMaintenance4Features_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maintenance4, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maintenance4, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMaintenance4Features_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maintenance4: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceMaintenance4Properties_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMaintenance4Properties_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.maxBufferSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.maxBufferSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMaintenance4Properties_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxBufferSize: null
	};
	return obj;
}


export function VkDeviceBufferMemoryRequirements_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceBufferMemoryRequirements_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.pCreateInfo){
		const wrapped = VkBufferCreateInfo_to_C(obj.pCreateInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pCreateInfo||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pCreateInfo){
		const wrapped = VkBufferCreateInfo_to_C(obj.pCreateInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pCreateInfo||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceBufferMemoryRequirements_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pCreateInfo: VkBufferCreateInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkDeviceImageMemoryRequirements_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDeviceImageMemoryRequirements_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.pCreateInfo){
		const wrapped = VkImageCreateInfo_to_C(obj.pCreateInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*32), BigInt(obj.pCreateInfo||0), true);
	}
	view.setUint32(24+(i*32), obj.planeAspect, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pCreateInfo){
		const wrapped = VkImageCreateInfo_to_C(obj.pCreateInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pCreateInfo||0), true);
	}
	view.setUint32(24, obj.planeAspect, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceImageMemoryRequirements_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pCreateInfo: VkImageCreateInfo_from_C(read.ptr(ptr)),
		planeAspect: read.u32(ptr, 24)
	};
	return obj;
}

export const VkPresentModeKHR = {
	VK_PRESENT_MODE_IMMEDIATE_KHR: 0,
	VK_PRESENT_MODE_MAILBOX_KHR: 1,
	VK_PRESENT_MODE_FIFO_KHR: 2,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR: 3,
	VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: 1000111000,
	VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: 1000111001,
	VK_PRESENT_MODE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_PRESENT_MODE_IMMEDIATE_KHR",
		"1": "VK_PRESENT_MODE_MAILBOX_KHR",
		"2": "VK_PRESENT_MODE_FIFO_KHR",
		"3": "VK_PRESENT_MODE_FIFO_RELAXED_KHR",
		"1000111000": "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR",
		"1000111001": "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR",
		"2147483647": "VK_PRESENT_MODE_MAX_ENUM_KHR",
}};
export const VkColorSpaceKHR = {
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: 0,
	VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: 1000104001,
	VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: 1000104002,
	VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: 1000104003,
	VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: 1000104004,
	VK_COLOR_SPACE_BT709_LINEAR_EXT: 1000104005,
	VK_COLOR_SPACE_BT709_NONLINEAR_EXT: 1000104006,
	VK_COLOR_SPACE_BT2020_LINEAR_EXT: 1000104007,
	VK_COLOR_SPACE_HDR10_ST2084_EXT: 1000104008,
	VK_COLOR_SPACE_DOLBYVISION_EXT: 1000104009,
	VK_COLOR_SPACE_HDR10_HLG_EXT: 1000104010,
	VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: 1000104011,
	VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: 1000104012,
	VK_COLOR_SPACE_PASS_THROUGH_EXT: 1000104013,
	VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: 1000104014,
	VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: 1000213000,
	VK_COLORSPACE_SRGB_NONLINEAR_KHR: NaN,
	VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: NaN,
	VK_COLOR_SPACE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR",
		"1000104001": "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT",
		"1000104002": "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT",
		"1000104003": "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT",
		"1000104004": "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT",
		"1000104005": "VK_COLOR_SPACE_BT709_LINEAR_EXT",
		"1000104006": "VK_COLOR_SPACE_BT709_NONLINEAR_EXT",
		"1000104007": "VK_COLOR_SPACE_BT2020_LINEAR_EXT",
		"1000104008": "VK_COLOR_SPACE_HDR10_ST2084_EXT",
		"1000104009": "VK_COLOR_SPACE_DOLBYVISION_EXT",
		"1000104010": "VK_COLOR_SPACE_HDR10_HLG_EXT",
		"1000104011": "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT",
		"1000104012": "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT",
		"1000104013": "VK_COLOR_SPACE_PASS_THROUGH_EXT",
		"1000104014": "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT",
		"1000213000": "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD",
		"NaN": "VK_COLORSPACE_SRGB_NONLINEAR_KHR",
		"NaN": "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT",
		"2147483647": "VK_COLOR_SPACE_MAX_ENUM_KHR",
}};
export const VkSurfaceTransformFlagBitsKHR = {
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: 1,
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: 2,
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: 4,
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: 8,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: 16,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: 32,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: 64,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: 128,
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: 256,
	VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR",
		"2": "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR",
		"4": "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR",
		"8": "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR",
		"16": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR",
		"32": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR",
		"64": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR",
		"128": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR",
		"256": "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR",
		"2147483647": "VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR",
}};
export const VkCompositeAlphaFlagBitsKHR = {
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: 1,
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: 2,
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: 4,
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: 8,
	VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR",
		"2": "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR",
		"4": "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR",
		"8": "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR",
		"2147483647": "VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkSurfaceCapabilitiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(52*size);
	return ptr(buffer);
}
export function VkSurfaceCapabilitiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(52*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*52), obj.minImageCount, true);
	view.setUint32(4+(i*52), obj.maxImageCount, true);
	if (obj.currentExtent){
	view.setUint32(8+(i*52), obj.currentExtent.width, true);
	view.setUint32(12+(i*52), obj.currentExtent.height, true);
	}
	if (obj.minImageExtent){
	view.setUint32(16+(i*52), obj.minImageExtent.width, true);
	view.setUint32(20+(i*52), obj.minImageExtent.height, true);
	}
	if (obj.maxImageExtent){
	view.setUint32(24+(i*52), obj.maxImageExtent.width, true);
	view.setUint32(28+(i*52), obj.maxImageExtent.height, true);
	}
	view.setUint32(32+(i*52), obj.maxImageArrayLayers, true);
	view.setUint32(36+(i*52), obj.supportedTransforms, true);
	view.setUint32(40+(i*52), obj.currentTransform, true)
	view.setUint32(44+(i*52), obj.supportedCompositeAlpha, true);
	view.setUint32(48+(i*52), obj.supportedUsageFlags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(52);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.minImageCount, true);
	view.setUint32(4, obj.maxImageCount, true);
	if (obj.currentExtent){
	view.setUint32(8, obj.currentExtent.width, true);
	view.setUint32(12, obj.currentExtent.height, true);
	}
	if (obj.minImageExtent){
	view.setUint32(16, obj.minImageExtent.width, true);
	view.setUint32(20, obj.minImageExtent.height, true);
	}
	if (obj.maxImageExtent){
	view.setUint32(24, obj.maxImageExtent.width, true);
	view.setUint32(28, obj.maxImageExtent.height, true);
	}
	view.setUint32(32, obj.maxImageArrayLayers, true);
	view.setUint32(36, obj.supportedTransforms, true);
	view.setUint32(40, obj.currentTransform, true)
	view.setUint32(44, obj.supportedCompositeAlpha, true);
	view.setUint32(48, obj.supportedUsageFlags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceCapabilitiesKHR_from_C(ptr){
	const obj = {
		minImageCount: read.u32(ptr, 0),
		maxImageCount: read.u32(ptr, 4),
		currentExtent: null,
		minImageExtent: null,
		maxImageExtent: null,
		maxImageArrayLayers: read.u32(ptr, 32),
		supportedTransforms: read.u32(ptr, 36),
		currentTransform: read.u32(ptr, 40),
		supportedCompositeAlpha: read.u32(ptr, 44),
		supportedUsageFlags: read.u32(ptr, 48)
	};
	return obj;
}


export function VkSurfaceFormatKHR_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkSurfaceFormatKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.format, true)
	view.setUint32(4+(i*8), obj.colorSpace, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.format, true)
	view.setUint32(4, obj.colorSpace, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceFormatKHR_from_C(ptr){
	const obj = {
		format: read.u32(ptr, 0),
		colorSpace: read.u32(ptr, 4)
	};
	return obj;
}

export const VkSwapchainCreateFlagBitsKHR = {
	VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: 1,
	VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: 2,
	VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: 4,
	VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
		"2": "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR",
		"4": "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR",
		"2147483647": "VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR",
}};
export const VkDeviceGroupPresentModeFlagBitsKHR = {
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: 1,
	VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: 2,
	VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: 4,
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: 8,
	VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR",
		"2": "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR",
		"4": "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR",
		"8": "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR",
		"2147483647": "VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkSwapchainCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(104*size);
	return ptr(buffer);
}
export function VkSwapchainCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(104*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*104), obj.sType, true)

	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*104), obj.flags, true);

	view.setBigUint64(24+(i*104), BigInt(obj.surface||0), true);
	view.setBigUint64(24+(i*104), BigInt(obj.surface||0), true);

	view.setUint32(32+(i*104), obj.minImageCount, true);
	view.setUint32(36+(i*104), obj.imageFormat, true)
	view.setUint32(40+(i*104), obj.imageColorSpace, true)
	if (obj.imageExtent){
	view.setUint32(44+(i*104), obj.imageExtent.width, true);
	view.setUint32(48+(i*104), obj.imageExtent.height, true);
	}
	view.setUint32(52+(i*104), obj.imageArrayLayers, true);
	view.setUint32(56+(i*104), obj.imageUsage, true);
	view.setUint32(60+(i*104), obj.imageSharingMode, true)
	view.setUint32(64+(i*104), obj.queueFamilyIndexCount, true);

	view.setBigUint64(72+(i*104), BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(72+(i*104), BigInt(obj.pQueueFamilyIndices||0), true);

	view.setUint32(80+(i*104), obj.preTransform, true)
	view.setUint32(84+(i*104), obj.compositeAlpha, true)
	view.setUint32(88+(i*104), obj.presentMode, true)
	view.setUint32(92+(i*104), obj.clipped, true);

	view.setBigUint64(96+(i*104), BigInt(obj.oldSwapchain||0), true);
	view.setBigUint64(96+(i*104), BigInt(obj.oldSwapchain||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(104);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.surface||0), true);
	view.setBigUint64(24, BigInt(obj.surface||0), true);

	view.setUint32(32, obj.minImageCount, true);
	view.setUint32(36, obj.imageFormat, true)
	view.setUint32(40, obj.imageColorSpace, true)
	if (obj.imageExtent){
	view.setUint32(44, obj.imageExtent.width, true);
	view.setUint32(48, obj.imageExtent.height, true);
	}
	view.setUint32(52, obj.imageArrayLayers, true);
	view.setUint32(56, obj.imageUsage, true);
	view.setUint32(60, obj.imageSharingMode, true)
	view.setUint32(64, obj.queueFamilyIndexCount, true);

	view.setBigUint64(72, BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(72, BigInt(obj.pQueueFamilyIndices||0), true);

	view.setUint32(80, obj.preTransform, true)
	view.setUint32(84, obj.compositeAlpha, true)
	view.setUint32(88, obj.presentMode, true)
	view.setUint32(92, obj.clipped, true);

	view.setBigUint64(96, BigInt(obj.oldSwapchain||0), true);
	view.setBigUint64(96, BigInt(obj.oldSwapchain||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSwapchainCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		surface: undefined,
		minImageCount: read.u32(ptr, 32),
		imageFormat: read.u32(ptr, 36),
		imageColorSpace: read.u32(ptr, 40),
		imageExtent: null,
		imageArrayLayers: read.u32(ptr, 52),
		imageUsage: read.u32(ptr, 56),
		imageSharingMode: read.u32(ptr, 60),
		queueFamilyIndexCount: read.u32(ptr, 64),
		pQueueFamilyIndices: undefined,
		preTransform: read.u32(ptr, 80),
		compositeAlpha: read.u32(ptr, 84),
		presentMode: read.u32(ptr, 88),
		clipped: read.u32(ptr, 92),
		oldSwapchain: undefined
	};
	return obj;
}


export function VkPresentInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPresentInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.waitSemaphoreCount, true);

	view.setBigUint64(24+(i*64), BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.pWaitSemaphores||0), true);

	view.setUint32(32+(i*64), obj.swapchainCount, true);

	view.setBigUint64(40+(i*64), BigInt(obj.pSwapchains||0), true);
	view.setBigUint64(40+(i*64), BigInt(obj.pSwapchains||0), true);


	view.setBigUint64(48+(i*64), BigInt(obj.pImageIndices||0), true);
	view.setBigUint64(48+(i*64), BigInt(obj.pImageIndices||0), true);


	view.setBigUint64(56+(i*64), BigInt(obj.pResults||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.pResults||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.waitSemaphoreCount, true);

	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);
	view.setBigUint64(24, BigInt(obj.pWaitSemaphores||0), true);

	view.setUint32(32, obj.swapchainCount, true);

	view.setBigUint64(40, BigInt(obj.pSwapchains||0), true);
	view.setBigUint64(40, BigInt(obj.pSwapchains||0), true);


	view.setBigUint64(48, BigInt(obj.pImageIndices||0), true);
	view.setBigUint64(48, BigInt(obj.pImageIndices||0), true);


	view.setBigUint64(56, BigInt(obj.pResults||0), true);
	view.setBigUint64(56, BigInt(obj.pResults||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		waitSemaphoreCount: read.u32(ptr, 16),
		pWaitSemaphores: read.ptr(ptr),
		swapchainCount: read.u32(ptr, 32),
		pSwapchains: read.ptr(ptr),
		pImageIndices: undefined,
		pResults: undefined
	};
	return obj;
}


export function VkImageSwapchainCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageSwapchainCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.swapchain||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.swapchain||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.swapchain||0), true);
	view.setBigUint64(16, BigInt(obj.swapchain||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSwapchainCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchain: undefined
	};
	return obj;
}


export function VkBindImageMemorySwapchainInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkBindImageMemorySwapchainInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.swapchain||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.swapchain||0), true);

	view.setUint32(24+(i*32), obj.imageIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.swapchain||0), true);
	view.setBigUint64(16, BigInt(obj.swapchain||0), true);

	view.setUint32(24, obj.imageIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindImageMemorySwapchainInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchain: undefined,
		imageIndex: read.u32(ptr, 24)
	};
	return obj;
}


export function VkAcquireNextImageInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkAcquireNextImageInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.swapchain||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.swapchain||0), true);

	view.setUint64(24+(i*56), obj.timeout, true);

	view.setBigUint64(32+(i*56), BigInt(obj.semaphore||0), true);
	view.setBigUint64(32+(i*56), BigInt(obj.semaphore||0), true);


	view.setBigUint64(40+(i*56), BigInt(obj.fence||0), true);
	view.setBigUint64(40+(i*56), BigInt(obj.fence||0), true);

	view.setUint32(48+(i*56), obj.deviceMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.swapchain||0), true);
	view.setBigUint64(16, BigInt(obj.swapchain||0), true);

	view.setUint64(24, obj.timeout, true);

	view.setBigUint64(32, BigInt(obj.semaphore||0), true);
	view.setBigUint64(32, BigInt(obj.semaphore||0), true);


	view.setBigUint64(40, BigInt(obj.fence||0), true);
	view.setBigUint64(40, BigInt(obj.fence||0), true);

	view.setUint32(48, obj.deviceMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAcquireNextImageInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchain: undefined,
		timeout: null,
		semaphore: undefined,
		fence: undefined,
		deviceMask: read.u32(ptr, 48)
	};
	return obj;
}


export function VkDeviceGroupPresentCapabilitiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceGroupPresentCapabilitiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setUint32(20+(i*24), obj.modes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setUint32(20, obj.modes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupPresentCapabilitiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		presentMask: null,
		modes: read.u32(ptr, 20)
	};
	return obj;
}


export function VkDeviceGroupPresentInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDeviceGroupPresentInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.swapchainCount, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pDeviceMasks||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pDeviceMasks||0), true);

	view.setUint32(32+(i*40), obj.mode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.swapchainCount, true);

	view.setBigUint64(24, BigInt(obj.pDeviceMasks||0), true);
	view.setBigUint64(24, BigInt(obj.pDeviceMasks||0), true);

	view.setUint32(32, obj.mode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupPresentInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchainCount: read.u32(ptr, 16),
		pDeviceMasks: undefined,
		mode: read.u32(ptr, 32)
	};
	return obj;
}


export function VkDeviceGroupSwapchainCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceGroupSwapchainCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.modes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.modes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceGroupSwapchainCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		modes: read.u32(ptr, 16)
	};
	return obj;
}

export const VkDisplayPlaneAlphaFlagBitsKHR = {
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: 1,
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: 2,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: 4,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: 8,
	VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR",
		"2": "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR",
		"4": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR",
		"8": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR",
		"2147483647": "VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkDisplayModeParametersKHR_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkDisplayModeParametersKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.visibleRegion){
	view.setUint32(0+(i*12), obj.visibleRegion.width, true);
	view.setUint32(4+(i*12), obj.visibleRegion.height, true);
	}
	view.setUint32(8+(i*12), obj.refreshRate, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.visibleRegion){
	view.setUint32(0, obj.visibleRegion.width, true);
	view.setUint32(4, obj.visibleRegion.height, true);
	}
	view.setUint32(8, obj.refreshRate, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayModeParametersKHR_from_C(ptr){
	const obj = {
		visibleRegion: null,
		refreshRate: read.u32(ptr, 8)
	};
	return obj;
}


export function VkDisplayModeCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDisplayModeCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	if (obj.parameters){
	if (obj.parameters.visibleRegion){
	view.setUint32(24+(i*40), obj.parameters.visibleRegion.width, true);
	view.setUint32(28+(i*40), obj.parameters.visibleRegion.height, true);
	}
	view.setUint32(32+(i*40), obj.parameters.refreshRate, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	if (obj.parameters){
	if (obj.parameters.visibleRegion){
	view.setUint32(24, obj.parameters.visibleRegion.width, true);
	view.setUint32(28, obj.parameters.visibleRegion.height, true);
	}
	view.setUint32(32, obj.parameters.refreshRate, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayModeCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		parameters: null
	};
	return obj;
}


export function VkDisplayModePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDisplayModePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*24), BigInt(obj.displayMode||0), true);
	view.setBigUint64(0+(i*24), BigInt(obj.displayMode||0), true);

	if (obj.parameters){
	if (obj.parameters.visibleRegion){
	view.setUint32(8+(i*24), obj.parameters.visibleRegion.width, true);
	view.setUint32(12+(i*24), obj.parameters.visibleRegion.height, true);
	}
	view.setUint32(16+(i*24), obj.parameters.refreshRate, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.displayMode||0), true);
	view.setBigUint64(0, BigInt(obj.displayMode||0), true);

	if (obj.parameters){
	if (obj.parameters.visibleRegion){
	view.setUint32(8, obj.parameters.visibleRegion.width, true);
	view.setUint32(12, obj.parameters.visibleRegion.height, true);
	}
	view.setUint32(16, obj.parameters.refreshRate, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayModePropertiesKHR_from_C(ptr){
	const obj = {
		displayMode: undefined,
		parameters: null
	};
	return obj;
}


export function VkDisplayPlaneCapabilitiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(68*size);
	return ptr(buffer);
}
export function VkDisplayPlaneCapabilitiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(68*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*68), obj.supportedAlpha, true);
	if (obj.minSrcPosition){
	view.setInt32(4+(i*68), obj.minSrcPosition.x, true);
	view.setInt32(8+(i*68), obj.minSrcPosition.y, true);
	}
	if (obj.maxSrcPosition){
	view.setInt32(12+(i*68), obj.maxSrcPosition.x, true);
	view.setInt32(16+(i*68), obj.maxSrcPosition.y, true);
	}
	if (obj.minSrcExtent){
	view.setUint32(20+(i*68), obj.minSrcExtent.width, true);
	view.setUint32(24+(i*68), obj.minSrcExtent.height, true);
	}
	if (obj.maxSrcExtent){
	view.setUint32(28+(i*68), obj.maxSrcExtent.width, true);
	view.setUint32(32+(i*68), obj.maxSrcExtent.height, true);
	}
	if (obj.minDstPosition){
	view.setInt32(36+(i*68), obj.minDstPosition.x, true);
	view.setInt32(40+(i*68), obj.minDstPosition.y, true);
	}
	if (obj.maxDstPosition){
	view.setInt32(44+(i*68), obj.maxDstPosition.x, true);
	view.setInt32(48+(i*68), obj.maxDstPosition.y, true);
	}
	if (obj.minDstExtent){
	view.setUint32(52+(i*68), obj.minDstExtent.width, true);
	view.setUint32(56+(i*68), obj.minDstExtent.height, true);
	}
	if (obj.maxDstExtent){
	view.setUint32(60+(i*68), obj.maxDstExtent.width, true);
	view.setUint32(64+(i*68), obj.maxDstExtent.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(68);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.supportedAlpha, true);
	if (obj.minSrcPosition){
	view.setInt32(4, obj.minSrcPosition.x, true);
	view.setInt32(8, obj.minSrcPosition.y, true);
	}
	if (obj.maxSrcPosition){
	view.setInt32(12, obj.maxSrcPosition.x, true);
	view.setInt32(16, obj.maxSrcPosition.y, true);
	}
	if (obj.minSrcExtent){
	view.setUint32(20, obj.minSrcExtent.width, true);
	view.setUint32(24, obj.minSrcExtent.height, true);
	}
	if (obj.maxSrcExtent){
	view.setUint32(28, obj.maxSrcExtent.width, true);
	view.setUint32(32, obj.maxSrcExtent.height, true);
	}
	if (obj.minDstPosition){
	view.setInt32(36, obj.minDstPosition.x, true);
	view.setInt32(40, obj.minDstPosition.y, true);
	}
	if (obj.maxDstPosition){
	view.setInt32(44, obj.maxDstPosition.x, true);
	view.setInt32(48, obj.maxDstPosition.y, true);
	}
	if (obj.minDstExtent){
	view.setUint32(52, obj.minDstExtent.width, true);
	view.setUint32(56, obj.minDstExtent.height, true);
	}
	if (obj.maxDstExtent){
	view.setUint32(60, obj.maxDstExtent.width, true);
	view.setUint32(64, obj.maxDstExtent.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPlaneCapabilitiesKHR_from_C(ptr){
	const obj = {
		supportedAlpha: read.u32(ptr, 0),
		minSrcPosition: null,
		maxSrcPosition: null,
		minSrcExtent: null,
		maxSrcExtent: null,
		minDstPosition: null,
		maxDstPosition: null,
		minDstExtent: null,
		maxDstExtent: null
	};
	return obj;
}


export function VkDisplayPlanePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkDisplayPlanePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*16), BigInt(obj.currentDisplay||0), true);
	view.setBigUint64(0+(i*16), BigInt(obj.currentDisplay||0), true);

	view.setUint32(8+(i*16), obj.currentStackIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.currentDisplay||0), true);
	view.setBigUint64(0, BigInt(obj.currentDisplay||0), true);

	view.setUint32(8, obj.currentStackIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPlanePropertiesKHR_from_C(ptr){
	const obj = {
		currentDisplay: undefined,
		currentStackIndex: read.u32(ptr, 8)
	};
	return obj;
}


export function VkDisplayPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkDisplayPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*48), BigInt(obj.display||0), true);
	view.setBigUint64(0+(i*48), BigInt(obj.display||0), true);


	view.setBigUint64(8+(i*48), BigInt(obj.displayName||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.displayName||0), true);

	if (obj.physicalDimensions){
	view.setUint32(16+(i*48), obj.physicalDimensions.width, true);
	view.setUint32(20+(i*48), obj.physicalDimensions.height, true);
	}
	if (obj.physicalResolution){
	view.setUint32(24+(i*48), obj.physicalResolution.width, true);
	view.setUint32(28+(i*48), obj.physicalResolution.height, true);
	}
	view.setUint32(32+(i*48), obj.supportedTransforms, true);
	view.setUint32(36+(i*48), obj.planeReorderPossible, true);
	view.setUint32(40+(i*48), obj.persistentContent, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.display||0), true);
	view.setBigUint64(0, BigInt(obj.display||0), true);


	view.setBigUint64(8, BigInt(obj.displayName||0), true);
	view.setBigUint64(8, BigInt(obj.displayName||0), true);

	if (obj.physicalDimensions){
	view.setUint32(16, obj.physicalDimensions.width, true);
	view.setUint32(20, obj.physicalDimensions.height, true);
	}
	if (obj.physicalResolution){
	view.setUint32(24, obj.physicalResolution.width, true);
	view.setUint32(28, obj.physicalResolution.height, true);
	}
	view.setUint32(32, obj.supportedTransforms, true);
	view.setUint32(36, obj.planeReorderPossible, true);
	view.setUint32(40, obj.persistentContent, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPropertiesKHR_from_C(ptr){
	const obj = {
		display: undefined,
		displayName: read.ptr(ptr),
		physicalDimensions: null,
		physicalResolution: null,
		supportedTransforms: read.u32(ptr, 32),
		planeReorderPossible: read.u32(ptr, 36),
		persistentContent: read.u32(ptr, 40)
	};
	return obj;
}


export function VkDisplaySurfaceCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkDisplaySurfaceCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);

	view.setBigUint64(24+(i*64), BigInt(obj.displayMode||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.displayMode||0), true);

	view.setUint32(32+(i*64), obj.planeIndex, true);
	view.setUint32(36+(i*64), obj.planeStackIndex, true);
	view.setUint32(40+(i*64), obj.transform, true)
	view.setFloat32(44+(i*64), obj.globalAlpha, true);
	view.setUint32(48+(i*64), obj.alphaMode, true)
	if (obj.imageExtent){
	view.setUint32(52+(i*64), obj.imageExtent.width, true);
	view.setUint32(56+(i*64), obj.imageExtent.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.displayMode||0), true);
	view.setBigUint64(24, BigInt(obj.displayMode||0), true);

	view.setUint32(32, obj.planeIndex, true);
	view.setUint32(36, obj.planeStackIndex, true);
	view.setUint32(40, obj.transform, true)
	view.setFloat32(44, obj.globalAlpha, true);
	view.setUint32(48, obj.alphaMode, true)
	if (obj.imageExtent){
	view.setUint32(52, obj.imageExtent.width, true);
	view.setUint32(56, obj.imageExtent.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplaySurfaceCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		displayMode: undefined,
		planeIndex: read.u32(ptr, 32),
		planeStackIndex: read.u32(ptr, 36),
		transform: read.u32(ptr, 40),
		globalAlpha: null,
		alphaMode: read.u32(ptr, 48),
		imageExtent: null
	};
	return obj;
}


export function VkDisplayPresentInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkDisplayPresentInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	if (obj.srcRect){
	if (obj.srcRect.offset){
	view.setInt32(16+(i*56), obj.srcRect.offset.x, true);
	view.setInt32(20+(i*56), obj.srcRect.offset.y, true);
	}
	if (obj.srcRect.extent){
	view.setUint32(24+(i*56), obj.srcRect.extent.width, true);
	view.setUint32(28+(i*56), obj.srcRect.extent.height, true);
	}
	}
	if (obj.dstRect){
	if (obj.dstRect.offset){
	view.setInt32(32+(i*56), obj.dstRect.offset.x, true);
	view.setInt32(36+(i*56), obj.dstRect.offset.y, true);
	}
	if (obj.dstRect.extent){
	view.setUint32(40+(i*56), obj.dstRect.extent.width, true);
	view.setUint32(44+(i*56), obj.dstRect.extent.height, true);
	}
	}
	view.setUint32(48+(i*56), obj.persistent, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.srcRect){
	if (obj.srcRect.offset){
	view.setInt32(16, obj.srcRect.offset.x, true);
	view.setInt32(20, obj.srcRect.offset.y, true);
	}
	if (obj.srcRect.extent){
	view.setUint32(24, obj.srcRect.extent.width, true);
	view.setUint32(28, obj.srcRect.extent.height, true);
	}
	}
	if (obj.dstRect){
	if (obj.dstRect.offset){
	view.setInt32(32, obj.dstRect.offset.x, true);
	view.setInt32(36, obj.dstRect.offset.y, true);
	}
	if (obj.dstRect.extent){
	view.setUint32(40, obj.dstRect.extent.width, true);
	view.setUint32(44, obj.dstRect.extent.height, true);
	}
	}
	view.setUint32(48, obj.persistent, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPresentInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcRect: null,
		dstRect: null,
		persistent: read.u32(ptr, 48)
	};
	return obj;
}


export function VkRenderingFragmentShadingRateAttachmentInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkRenderingFragmentShadingRateAttachmentInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.imageView||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.imageView||0), true);

	view.setUint32(24+(i*40), obj.imageLayout, true)
	if (obj.shadingRateAttachmentTexelSize){
	view.setUint32(28+(i*40), obj.shadingRateAttachmentTexelSize.width, true);
	view.setUint32(32+(i*40), obj.shadingRateAttachmentTexelSize.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.imageView||0), true);
	view.setBigUint64(16, BigInt(obj.imageView||0), true);

	view.setUint32(24, obj.imageLayout, true)
	if (obj.shadingRateAttachmentTexelSize){
	view.setUint32(28, obj.shadingRateAttachmentTexelSize.width, true);
	view.setUint32(32, obj.shadingRateAttachmentTexelSize.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderingFragmentShadingRateAttachmentInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageView: undefined,
		imageLayout: read.u32(ptr, 24),
		shadingRateAttachmentTexelSize: null
	};
	return obj;
}


export function VkRenderingFragmentDensityMapAttachmentInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkRenderingFragmentDensityMapAttachmentInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.imageView||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.imageView||0), true);

	view.setUint32(24+(i*32), obj.imageLayout, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.imageView||0), true);
	view.setBigUint64(16, BigInt(obj.imageView||0), true);

	view.setUint32(24, obj.imageLayout, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderingFragmentDensityMapAttachmentInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageView: undefined,
		imageLayout: read.u32(ptr, 24)
	};
	return obj;
}


export function VkAttachmentSampleCountInfoAMD_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkAttachmentSampleCountInfoAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.colorAttachmentCount, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pColorAttachmentSamples||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pColorAttachmentSamples||0), true);

	view.setUint32(32+(i*40), obj.depthStencilAttachmentSamples, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.colorAttachmentCount, true);

	view.setBigUint64(24, BigInt(obj.pColorAttachmentSamples||0), true);
	view.setBigUint64(24, BigInt(obj.pColorAttachmentSamples||0), true);

	view.setUint32(32, obj.depthStencilAttachmentSamples, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentSampleCountInfoAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		colorAttachmentCount: read.u32(ptr, 16),
		pColorAttachmentSamples: undefined,
		depthStencilAttachmentSamples: read.u32(ptr, 32)
	};
	return obj;
}


export function VkMultiviewPerViewAttributesInfoNVX_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMultiviewPerViewAttributesInfoNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.perViewAttributes, true);
	view.setUint32(20+(i*24), obj.perViewAttributesPositionXOnly, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.perViewAttributes, true);
	view.setUint32(20, obj.perViewAttributesPositionXOnly, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMultiviewPerViewAttributesInfoNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		perViewAttributes: read.u32(ptr, 16),
		perViewAttributesPositionXOnly: read.u32(ptr, 20)
	};
	return obj;
}


export function VkImportMemoryFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImportMemoryFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleType, true)
	view.setInt32(20+(i*24), obj.fd, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleType, true)
	view.setInt32(20, obj.fd, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImportMemoryFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleType: read.u32(ptr, 16),
		fd: null
	};
	return obj;
}


export function VkMemoryFdPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryFdPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.memoryTypeBits, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.memoryTypeBits, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryFdPropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryTypeBits: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMemoryGetFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkMemoryGetFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.memory||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.memory||0), true);

	view.setUint32(24+(i*32), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.memory||0), true);
	view.setBigUint64(16, BigInt(obj.memory||0), true);

	view.setUint32(24, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryGetFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memory: undefined,
		handleType: read.u32(ptr, 24)
	};
	return obj;
}


export function VkImportSemaphoreFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkImportSemaphoreFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.semaphore||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.semaphore||0), true);

	view.setUint32(24+(i*40), obj.flags, true);
	view.setUint32(28+(i*40), obj.handleType, true)
	view.setInt32(32+(i*40), obj.fd, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.semaphore||0), true);
	view.setBigUint64(16, BigInt(obj.semaphore||0), true);

	view.setUint32(24, obj.flags, true);
	view.setUint32(28, obj.handleType, true)
	view.setInt32(32, obj.fd, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImportSemaphoreFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		semaphore: undefined,
		flags: read.u32(ptr, 24),
		handleType: read.u32(ptr, 28),
		fd: null
	};
	return obj;
}


export function VkSemaphoreGetFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSemaphoreGetFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.semaphore||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.semaphore||0), true);

	view.setUint32(24+(i*32), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.semaphore||0), true);
	view.setBigUint64(16, BigInt(obj.semaphore||0), true);

	view.setUint32(24, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSemaphoreGetFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		semaphore: undefined,
		handleType: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDevicePushDescriptorPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePushDescriptorPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxPushDescriptors, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxPushDescriptors, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePushDescriptorPropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxPushDescriptors: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRectLayerKHR_alloc_array(size){
	const buffer = new ArrayBuffer(20*size);
	return ptr(buffer);
}
export function VkRectLayerKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(20*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.offset){
	view.setInt32(0+(i*20), obj.offset.x, true);
	view.setInt32(4+(i*20), obj.offset.y, true);
	}
	if (obj.extent){
	view.setUint32(8+(i*20), obj.extent.width, true);
	view.setUint32(12+(i*20), obj.extent.height, true);
	}
	view.setUint32(16+(i*20), obj.layer, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(20);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.offset){
	view.setInt32(0, obj.offset.x, true);
	view.setInt32(4, obj.offset.y, true);
	}
	if (obj.extent){
	view.setUint32(8, obj.extent.width, true);
	view.setUint32(12, obj.extent.height, true);
	}
	view.setUint32(16, obj.layer, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRectLayerKHR_from_C(ptr){
	const obj = {
		offset: null,
		extent: null,
		layer: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPresentRegionKHR_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkPresentRegionKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.rectangleCount, true);
	if (obj.pRectangles){
		const wrapped = VkRectLayerKHR_to_C(obj.pRectangles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(8+(i*16), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(8+(i*16), BigInt(obj.pRectangles||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.rectangleCount, true);
	if (obj.pRectangles){
		const wrapped = VkRectLayerKHR_to_C(obj.pRectangles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(8, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(8, BigInt(obj.pRectangles||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentRegionKHR_from_C(ptr){
	const obj = {
		rectangleCount: read.u32(ptr, 0),
		pRectangles: VkRectLayerKHR_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPresentRegionsKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPresentRegionsKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.swapchainCount, true);
	if (obj.pRegions){
		const wrapped = VkPresentRegionKHR_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pRegions||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.swapchainCount, true);
	if (obj.pRegions){
		const wrapped = VkPresentRegionKHR_to_C(obj.pRegions, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pRegions||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentRegionsKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchainCount: read.u32(ptr, 16),
		pRegions: VkPresentRegionKHR_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkSharedPresentSurfaceCapabilitiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSharedPresentSurfaceCapabilitiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.sharedPresentSupportedUsageFlags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sharedPresentSupportedUsageFlags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSharedPresentSurfaceCapabilitiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sharedPresentSupportedUsageFlags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImportFenceFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkImportFenceFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.fence||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.fence||0), true);

	view.setUint32(24+(i*40), obj.flags, true);
	view.setUint32(28+(i*40), obj.handleType, true)
	view.setInt32(32+(i*40), obj.fd, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.fence||0), true);
	view.setBigUint64(16, BigInt(obj.fence||0), true);

	view.setUint32(24, obj.flags, true);
	view.setUint32(28, obj.handleType, true)
	view.setInt32(32, obj.fd, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImportFenceFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fence: undefined,
		flags: read.u32(ptr, 24),
		handleType: read.u32(ptr, 28),
		fd: null
	};
	return obj;
}


export function VkFenceGetFdInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkFenceGetFdInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.fence||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.fence||0), true);

	view.setUint32(24+(i*32), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.fence||0), true);
	view.setBigUint64(16, BigInt(obj.fence||0), true);

	view.setUint32(24, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFenceGetFdInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fence: undefined,
		handleType: read.u32(ptr, 24)
	};
	return obj;
}

export const VkPerformanceCounterUnitKHR = {
	VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: 0,
	VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: 1,
	VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: 2,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: 3,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: 4,
	VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: 5,
	VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: 6,
	VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: 7,
	VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: 8,
	VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: 9,
	VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: 10,
	VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR",
		"1": "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR",
		"2": "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR",
		"3": "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR",
		"4": "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR",
		"5": "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR",
		"6": "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR",
		"7": "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR",
		"8": "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR",
		"9": "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR",
		"10": "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR",
		"2147483647": "VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR",
}};
export const VkPerformanceCounterScopeKHR = {
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: 0,
	VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: 1,
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: 2,
	VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: NaN,
	VK_QUERY_SCOPE_RENDER_PASS_KHR: NaN,
	VK_QUERY_SCOPE_COMMAND_KHR: NaN,
	VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR",
		"1": "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR",
		"2": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR",
		"NaN": "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR",
		"NaN": "VK_QUERY_SCOPE_RENDER_PASS_KHR",
		"NaN": "VK_QUERY_SCOPE_COMMAND_KHR",
		"2147483647": "VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR",
}};
export const VkPerformanceCounterStorageKHR = {
	VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: 0,
	VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: 1,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: 2,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: 3,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: 4,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: 5,
	VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR",
		"1": "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR",
		"2": "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR",
		"3": "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR",
		"4": "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR",
		"5": "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR",
		"2147483647": "VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR",
}};
export const VkPerformanceCounterDescriptionFlagBitsKHR = {
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: 1,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: 2,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: NaN,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: NaN,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR",
		"2": "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR",
		"NaN": "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR",
		"NaN": "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR",
		"2147483647": "VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR",
}};
export const VkAcquireProfilingLockFlagBitsKHR = {
	VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"2147483647": "VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkPhysicalDevicePerformanceQueryFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePerformanceQueryFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.performanceCounterQueryPools, true);
	view.setUint32(20+(i*24), obj.performanceCounterMultipleQueryPools, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.performanceCounterQueryPools, true);
	view.setUint32(20, obj.performanceCounterMultipleQueryPools, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePerformanceQueryFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		performanceCounterQueryPools: read.u32(ptr, 16),
		performanceCounterMultipleQueryPools: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDevicePerformanceQueryPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePerformanceQueryPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.allowCommandBufferQueryCopies, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.allowCommandBufferQueryCopies, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePerformanceQueryPropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		allowCommandBufferQueryCopies: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPerformanceCounterKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPerformanceCounterKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.unit, true)
	view.setUint32(20+(i*32), obj.scope, true)
	view.setUint32(24+(i*32), obj.storage, true)

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.unit, true)
	view.setUint32(20, obj.scope, true)
	view.setUint32(24, obj.storage, true)

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceCounterKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		unit: read.u32(ptr, 16),
		scope: read.u32(ptr, 20),
		storage: read.u32(ptr, 24),
		uuid: null
	};
	return obj;
}


export function VkPerformanceCounterDescriptionKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPerformanceCounterDescriptionKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);



	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);



	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceCounterDescriptionKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		name: null,
		category: null,
		description: null
	};
	return obj;
}


export function VkQueryPoolPerformanceCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkQueryPoolPerformanceCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.queueFamilyIndex, true);
	view.setUint32(20+(i*32), obj.counterIndexCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pCounterIndices||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pCounterIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.queueFamilyIndex, true);
	view.setUint32(20, obj.counterIndexCount, true);

	view.setBigUint64(24, BigInt(obj.pCounterIndices||0), true);
	view.setBigUint64(24, BigInt(obj.pCounterIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueryPoolPerformanceCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		queueFamilyIndex: read.u32(ptr, 16),
		counterIndexCount: read.u32(ptr, 20),
		pCounterIndices: undefined
	};
	return obj;
}


export function VkAcquireProfilingLockInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAcquireProfilingLockInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint64(24+(i*32), obj.timeout, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint64(24, obj.timeout, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAcquireProfilingLockInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		timeout: null
	};
	return obj;
}


export function VkPerformanceQuerySubmitInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPerformanceQuerySubmitInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.counterPassIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.counterPassIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceQuerySubmitInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		counterPassIndex: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceSurfaceInfo2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSurfaceInfo2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.surface||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.surface||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.surface||0), true);
	view.setBigUint64(16, BigInt(obj.surface||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSurfaceInfo2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		surface: undefined
	};
	return obj;
}


export function VkSurfaceCapabilities2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkSurfaceCapabilities2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	if (obj.surfaceCapabilities){
	view.setUint32(16+(i*72), obj.surfaceCapabilities.minImageCount, true);
	view.setUint32(20+(i*72), obj.surfaceCapabilities.maxImageCount, true);
	if (obj.surfaceCapabilities.currentExtent){
	view.setUint32(24+(i*72), obj.surfaceCapabilities.currentExtent.width, true);
	view.setUint32(28+(i*72), obj.surfaceCapabilities.currentExtent.height, true);
	}
	if (obj.surfaceCapabilities.minImageExtent){
	view.setUint32(32+(i*72), obj.surfaceCapabilities.minImageExtent.width, true);
	view.setUint32(36+(i*72), obj.surfaceCapabilities.minImageExtent.height, true);
	}
	if (obj.surfaceCapabilities.maxImageExtent){
	view.setUint32(40+(i*72), obj.surfaceCapabilities.maxImageExtent.width, true);
	view.setUint32(44+(i*72), obj.surfaceCapabilities.maxImageExtent.height, true);
	}
	view.setUint32(48+(i*72), obj.surfaceCapabilities.maxImageArrayLayers, true);
	view.setUint32(52+(i*72), obj.surfaceCapabilities.supportedTransforms, true);
	view.setUint32(56+(i*72), obj.surfaceCapabilities.currentTransform, true)
	view.setUint32(60+(i*72), obj.surfaceCapabilities.supportedCompositeAlpha, true);
	view.setUint32(64+(i*72), obj.surfaceCapabilities.supportedUsageFlags, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.surfaceCapabilities){
	view.setUint32(16, obj.surfaceCapabilities.minImageCount, true);
	view.setUint32(20, obj.surfaceCapabilities.maxImageCount, true);
	if (obj.surfaceCapabilities.currentExtent){
	view.setUint32(24, obj.surfaceCapabilities.currentExtent.width, true);
	view.setUint32(28, obj.surfaceCapabilities.currentExtent.height, true);
	}
	if (obj.surfaceCapabilities.minImageExtent){
	view.setUint32(32, obj.surfaceCapabilities.minImageExtent.width, true);
	view.setUint32(36, obj.surfaceCapabilities.minImageExtent.height, true);
	}
	if (obj.surfaceCapabilities.maxImageExtent){
	view.setUint32(40, obj.surfaceCapabilities.maxImageExtent.width, true);
	view.setUint32(44, obj.surfaceCapabilities.maxImageExtent.height, true);
	}
	view.setUint32(48, obj.surfaceCapabilities.maxImageArrayLayers, true);
	view.setUint32(52, obj.surfaceCapabilities.supportedTransforms, true);
	view.setUint32(56, obj.surfaceCapabilities.currentTransform, true)
	view.setUint32(60, obj.surfaceCapabilities.supportedCompositeAlpha, true);
	view.setUint32(64, obj.surfaceCapabilities.supportedUsageFlags, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceCapabilities2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		surfaceCapabilities: null
	};
	return obj;
}


export function VkSurfaceFormat2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSurfaceFormat2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.surfaceFormat){
	view.setUint32(16+(i*24), obj.surfaceFormat.format, true)
	view.setUint32(20+(i*24), obj.surfaceFormat.colorSpace, true)
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.surfaceFormat){
	view.setUint32(16, obj.surfaceFormat.format, true)
	view.setUint32(20, obj.surfaceFormat.colorSpace, true)
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceFormat2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		surfaceFormat: null
	};
	return obj;
}


export function VkDisplayProperties2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkDisplayProperties2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	if (obj.displayProperties){

	view.setBigUint64(16+(i*64), BigInt(obj.displayProperties.display||0), true);
	view.setBigUint64(16+(i*64), BigInt(obj.displayProperties.display||0), true);


	view.setBigUint64(24+(i*64), BigInt(obj.displayProperties.displayName||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.displayProperties.displayName||0), true);

	if (obj.displayProperties.physicalDimensions){
	view.setUint32(32+(i*64), obj.displayProperties.physicalDimensions.width, true);
	view.setUint32(36+(i*64), obj.displayProperties.physicalDimensions.height, true);
	}
	if (obj.displayProperties.physicalResolution){
	view.setUint32(40+(i*64), obj.displayProperties.physicalResolution.width, true);
	view.setUint32(44+(i*64), obj.displayProperties.physicalResolution.height, true);
	}
	view.setUint32(48+(i*64), obj.displayProperties.supportedTransforms, true);
	view.setUint32(52+(i*64), obj.displayProperties.planeReorderPossible, true);
	view.setUint32(56+(i*64), obj.displayProperties.persistentContent, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.displayProperties){

	view.setBigUint64(16, BigInt(obj.displayProperties.display||0), true);
	view.setBigUint64(16, BigInt(obj.displayProperties.display||0), true);


	view.setBigUint64(24, BigInt(obj.displayProperties.displayName||0), true);
	view.setBigUint64(24, BigInt(obj.displayProperties.displayName||0), true);

	if (obj.displayProperties.physicalDimensions){
	view.setUint32(32, obj.displayProperties.physicalDimensions.width, true);
	view.setUint32(36, obj.displayProperties.physicalDimensions.height, true);
	}
	if (obj.displayProperties.physicalResolution){
	view.setUint32(40, obj.displayProperties.physicalResolution.width, true);
	view.setUint32(44, obj.displayProperties.physicalResolution.height, true);
	}
	view.setUint32(48, obj.displayProperties.supportedTransforms, true);
	view.setUint32(52, obj.displayProperties.planeReorderPossible, true);
	view.setUint32(56, obj.displayProperties.persistentContent, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayProperties2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		displayProperties: null
	};
	return obj;
}


export function VkDisplayPlaneProperties2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDisplayPlaneProperties2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.displayPlaneProperties){

	view.setBigUint64(16+(i*32), BigInt(obj.displayPlaneProperties.currentDisplay||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.displayPlaneProperties.currentDisplay||0), true);

	view.setUint32(24+(i*32), obj.displayPlaneProperties.currentStackIndex, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.displayPlaneProperties){

	view.setBigUint64(16, BigInt(obj.displayPlaneProperties.currentDisplay||0), true);
	view.setBigUint64(16, BigInt(obj.displayPlaneProperties.currentDisplay||0), true);

	view.setUint32(24, obj.displayPlaneProperties.currentStackIndex, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPlaneProperties2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		displayPlaneProperties: null
	};
	return obj;
}


export function VkDisplayModeProperties2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkDisplayModeProperties2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	if (obj.displayModeProperties){

	view.setBigUint64(24+(i*48), BigInt(obj.displayModeProperties.displayMode||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.displayModeProperties.displayMode||0), true);

	if (obj.displayModeProperties.parameters){
	if (obj.displayModeProperties.parameters.visibleRegion){
	view.setUint32(32+(i*48), obj.displayModeProperties.parameters.visibleRegion.width, true);
	view.setUint32(36+(i*48), obj.displayModeProperties.parameters.visibleRegion.height, true);
	}
	view.setUint32(40+(i*48), obj.displayModeProperties.parameters.refreshRate, true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.displayModeProperties){

	view.setBigUint64(24, BigInt(obj.displayModeProperties.displayMode||0), true);
	view.setBigUint64(24, BigInt(obj.displayModeProperties.displayMode||0), true);

	if (obj.displayModeProperties.parameters){
	if (obj.displayModeProperties.parameters.visibleRegion){
	view.setUint32(32, obj.displayModeProperties.parameters.visibleRegion.width, true);
	view.setUint32(36, obj.displayModeProperties.parameters.visibleRegion.height, true);
	}
	view.setUint32(40, obj.displayModeProperties.parameters.refreshRate, true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayModeProperties2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		displayModeProperties: null
	};
	return obj;
}


export function VkDisplayPlaneInfo2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDisplayPlaneInfo2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.mode||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.mode||0), true);

	view.setUint32(24+(i*32), obj.planeIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.mode||0), true);
	view.setBigUint64(16, BigInt(obj.mode||0), true);

	view.setUint32(24, obj.planeIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPlaneInfo2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		mode: undefined,
		planeIndex: read.u32(ptr, 24)
	};
	return obj;
}


export function VkDisplayPlaneCapabilities2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkDisplayPlaneCapabilities2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	if (obj.capabilities){
	view.setUint32(16+(i*88), obj.capabilities.supportedAlpha, true);
	if (obj.capabilities.minSrcPosition){
	view.setInt32(20+(i*88), obj.capabilities.minSrcPosition.x, true);
	view.setInt32(24+(i*88), obj.capabilities.minSrcPosition.y, true);
	}
	if (obj.capabilities.maxSrcPosition){
	view.setInt32(28+(i*88), obj.capabilities.maxSrcPosition.x, true);
	view.setInt32(32+(i*88), obj.capabilities.maxSrcPosition.y, true);
	}
	if (obj.capabilities.minSrcExtent){
	view.setUint32(36+(i*88), obj.capabilities.minSrcExtent.width, true);
	view.setUint32(40+(i*88), obj.capabilities.minSrcExtent.height, true);
	}
	if (obj.capabilities.maxSrcExtent){
	view.setUint32(44+(i*88), obj.capabilities.maxSrcExtent.width, true);
	view.setUint32(48+(i*88), obj.capabilities.maxSrcExtent.height, true);
	}
	if (obj.capabilities.minDstPosition){
	view.setInt32(52+(i*88), obj.capabilities.minDstPosition.x, true);
	view.setInt32(56+(i*88), obj.capabilities.minDstPosition.y, true);
	}
	if (obj.capabilities.maxDstPosition){
	view.setInt32(60+(i*88), obj.capabilities.maxDstPosition.x, true);
	view.setInt32(64+(i*88), obj.capabilities.maxDstPosition.y, true);
	}
	if (obj.capabilities.minDstExtent){
	view.setUint32(68+(i*88), obj.capabilities.minDstExtent.width, true);
	view.setUint32(72+(i*88), obj.capabilities.minDstExtent.height, true);
	}
	if (obj.capabilities.maxDstExtent){
	view.setUint32(76+(i*88), obj.capabilities.maxDstExtent.width, true);
	view.setUint32(80+(i*88), obj.capabilities.maxDstExtent.height, true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.capabilities){
	view.setUint32(16, obj.capabilities.supportedAlpha, true);
	if (obj.capabilities.minSrcPosition){
	view.setInt32(20, obj.capabilities.minSrcPosition.x, true);
	view.setInt32(24, obj.capabilities.minSrcPosition.y, true);
	}
	if (obj.capabilities.maxSrcPosition){
	view.setInt32(28, obj.capabilities.maxSrcPosition.x, true);
	view.setInt32(32, obj.capabilities.maxSrcPosition.y, true);
	}
	if (obj.capabilities.minSrcExtent){
	view.setUint32(36, obj.capabilities.minSrcExtent.width, true);
	view.setUint32(40, obj.capabilities.minSrcExtent.height, true);
	}
	if (obj.capabilities.maxSrcExtent){
	view.setUint32(44, obj.capabilities.maxSrcExtent.width, true);
	view.setUint32(48, obj.capabilities.maxSrcExtent.height, true);
	}
	if (obj.capabilities.minDstPosition){
	view.setInt32(52, obj.capabilities.minDstPosition.x, true);
	view.setInt32(56, obj.capabilities.minDstPosition.y, true);
	}
	if (obj.capabilities.maxDstPosition){
	view.setInt32(60, obj.capabilities.maxDstPosition.x, true);
	view.setInt32(64, obj.capabilities.maxDstPosition.y, true);
	}
	if (obj.capabilities.minDstExtent){
	view.setUint32(68, obj.capabilities.minDstExtent.width, true);
	view.setUint32(72, obj.capabilities.minDstExtent.height, true);
	}
	if (obj.capabilities.maxDstExtent){
	view.setUint32(76, obj.capabilities.maxDstExtent.width, true);
	view.setUint32(80, obj.capabilities.maxDstExtent.height, true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPlaneCapabilities2KHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		capabilities: null
	};
	return obj;
}


export function VkPhysicalDeviceShaderClockFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderClockFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderSubgroupClock, true);
	view.setUint32(20+(i*24), obj.shaderDeviceClock, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderSubgroupClock, true);
	view.setUint32(20, obj.shaderDeviceClock, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderClockFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderSubgroupClock: read.u32(ptr, 16),
		shaderDeviceClock: read.u32(ptr, 20)
	};
	return obj;
}

export const VkQueueGlobalPriorityKHR = {
	VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: 128,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: 256,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: 512,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: 1024,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: NaN,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: NaN,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: NaN,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: NaN,
	VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR: 2147483647,
	keys:{
		"128": "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR",
		"256": "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR",
		"512": "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR",
		"1024": "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR",
		"NaN": "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT",
		"NaN": "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT",
		"NaN": "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT",
		"NaN": "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT",
		"2147483647": "VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR",
}};

export function VkDeviceQueueGlobalPriorityCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceQueueGlobalPriorityCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.globalPriority, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.globalPriority, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceQueueGlobalPriorityCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		globalPriority: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.globalPriorityQuery, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.globalPriorityQuery, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		globalPriorityQuery: read.u32(ptr, 16)
	};
	return obj;
}


export function VkQueueFamilyGlobalPriorityPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkQueueFamilyGlobalPriorityPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.priorityCount, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.priorityCount, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueueFamilyGlobalPriorityPropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		priorityCount: read.u32(ptr, 16),
		priorities: null
	};
	return obj;
}

export const VkFragmentShadingRateCombinerOpKHR = {
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: 0,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: 1,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: 2,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: 3,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: 4,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR",
		"1": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR",
		"2": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR",
		"3": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR",
		"4": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR",
		"2147483647": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR",
}};

export function VkFragmentShadingRateAttachmentInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkFragmentShadingRateAttachmentInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.pFragmentShadingRateAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pFragmentShadingRateAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*32), BigInt(obj.pFragmentShadingRateAttachment||0), true);
	}
	if (obj.shadingRateAttachmentTexelSize){
	view.setUint32(24+(i*32), obj.shadingRateAttachmentTexelSize.width, true);
	view.setUint32(28+(i*32), obj.shadingRateAttachmentTexelSize.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pFragmentShadingRateAttachment){
		const wrapped = VkAttachmentReference2_to_C(obj.pFragmentShadingRateAttachment, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pFragmentShadingRateAttachment||0), true);
	}
	if (obj.shadingRateAttachmentTexelSize){
	view.setUint32(24, obj.shadingRateAttachmentTexelSize.width, true);
	view.setUint32(28, obj.shadingRateAttachmentTexelSize.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFragmentShadingRateAttachmentInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pFragmentShadingRateAttachment: VkAttachmentReference2_from_C(read.ptr(ptr)),
		shadingRateAttachmentTexelSize: null
	};
	return obj;
}


export function VkPipelineFragmentShadingRateStateCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineFragmentShadingRateStateCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.fragmentSize){
	view.setUint32(16+(i*32), obj.fragmentSize.width, true);
	view.setUint32(20+(i*32), obj.fragmentSize.height, true);
	}

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.fragmentSize){
	view.setUint32(16, obj.fragmentSize.width, true);
	view.setUint32(20, obj.fragmentSize.height, true);
	}

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineFragmentShadingRateStateCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentSize: null,
		combinerOps: null
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShadingRateFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShadingRateFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.pipelineFragmentShadingRate, true);
	view.setUint32(20+(i*32), obj.primitiveFragmentShadingRate, true);
	view.setUint32(24+(i*32), obj.attachmentFragmentShadingRate, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineFragmentShadingRate, true);
	view.setUint32(20, obj.primitiveFragmentShadingRate, true);
	view.setUint32(24, obj.attachmentFragmentShadingRate, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShadingRateFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineFragmentShadingRate: read.u32(ptr, 16),
		primitiveFragmentShadingRate: read.u32(ptr, 20),
		attachmentFragmentShadingRate: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShadingRatePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShadingRatePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	if (obj.minFragmentShadingRateAttachmentTexelSize){
	view.setUint32(16+(i*96), obj.minFragmentShadingRateAttachmentTexelSize.width, true);
	view.setUint32(20+(i*96), obj.minFragmentShadingRateAttachmentTexelSize.height, true);
	}
	if (obj.maxFragmentShadingRateAttachmentTexelSize){
	view.setUint32(24+(i*96), obj.maxFragmentShadingRateAttachmentTexelSize.width, true);
	view.setUint32(28+(i*96), obj.maxFragmentShadingRateAttachmentTexelSize.height, true);
	}
	view.setUint32(32+(i*96), obj.maxFragmentShadingRateAttachmentTexelSizeAspectRatio, true);
	view.setUint32(36+(i*96), obj.primitiveFragmentShadingRateWithMultipleViewports, true);
	view.setUint32(40+(i*96), obj.layeredShadingRateAttachments, true);
	view.setUint32(44+(i*96), obj.fragmentShadingRateNonTrivialCombinerOps, true);
	if (obj.maxFragmentSize){
	view.setUint32(48+(i*96), obj.maxFragmentSize.width, true);
	view.setUint32(52+(i*96), obj.maxFragmentSize.height, true);
	}
	view.setUint32(56+(i*96), obj.maxFragmentSizeAspectRatio, true);
	view.setUint32(60+(i*96), obj.maxFragmentShadingRateCoverageSamples, true);
	view.setUint32(64+(i*96), obj.maxFragmentShadingRateRasterizationSamples, true)
	view.setUint32(68+(i*96), obj.fragmentShadingRateWithShaderDepthStencilWrites, true);
	view.setUint32(72+(i*96), obj.fragmentShadingRateWithSampleMask, true);
	view.setUint32(76+(i*96), obj.fragmentShadingRateWithShaderSampleMask, true);
	view.setUint32(80+(i*96), obj.fragmentShadingRateWithConservativeRasterization, true);
	view.setUint32(84+(i*96), obj.fragmentShadingRateWithFragmentShaderInterlock, true);
	view.setUint32(88+(i*96), obj.fragmentShadingRateWithCustomSampleLocations, true);
	view.setUint32(92+(i*96), obj.fragmentShadingRateStrictMultiplyCombiner, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.minFragmentShadingRateAttachmentTexelSize){
	view.setUint32(16, obj.minFragmentShadingRateAttachmentTexelSize.width, true);
	view.setUint32(20, obj.minFragmentShadingRateAttachmentTexelSize.height, true);
	}
	if (obj.maxFragmentShadingRateAttachmentTexelSize){
	view.setUint32(24, obj.maxFragmentShadingRateAttachmentTexelSize.width, true);
	view.setUint32(28, obj.maxFragmentShadingRateAttachmentTexelSize.height, true);
	}
	view.setUint32(32, obj.maxFragmentShadingRateAttachmentTexelSizeAspectRatio, true);
	view.setUint32(36, obj.primitiveFragmentShadingRateWithMultipleViewports, true);
	view.setUint32(40, obj.layeredShadingRateAttachments, true);
	view.setUint32(44, obj.fragmentShadingRateNonTrivialCombinerOps, true);
	if (obj.maxFragmentSize){
	view.setUint32(48, obj.maxFragmentSize.width, true);
	view.setUint32(52, obj.maxFragmentSize.height, true);
	}
	view.setUint32(56, obj.maxFragmentSizeAspectRatio, true);
	view.setUint32(60, obj.maxFragmentShadingRateCoverageSamples, true);
	view.setUint32(64, obj.maxFragmentShadingRateRasterizationSamples, true)
	view.setUint32(68, obj.fragmentShadingRateWithShaderDepthStencilWrites, true);
	view.setUint32(72, obj.fragmentShadingRateWithSampleMask, true);
	view.setUint32(76, obj.fragmentShadingRateWithShaderSampleMask, true);
	view.setUint32(80, obj.fragmentShadingRateWithConservativeRasterization, true);
	view.setUint32(84, obj.fragmentShadingRateWithFragmentShaderInterlock, true);
	view.setUint32(88, obj.fragmentShadingRateWithCustomSampleLocations, true);
	view.setUint32(92, obj.fragmentShadingRateStrictMultiplyCombiner, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShadingRatePropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minFragmentShadingRateAttachmentTexelSize: null,
		maxFragmentShadingRateAttachmentTexelSize: null,
		maxFragmentShadingRateAttachmentTexelSizeAspectRatio: read.u32(ptr, 32),
		primitiveFragmentShadingRateWithMultipleViewports: read.u32(ptr, 36),
		layeredShadingRateAttachments: read.u32(ptr, 40),
		fragmentShadingRateNonTrivialCombinerOps: read.u32(ptr, 44),
		maxFragmentSize: null,
		maxFragmentSizeAspectRatio: read.u32(ptr, 56),
		maxFragmentShadingRateCoverageSamples: read.u32(ptr, 60),
		maxFragmentShadingRateRasterizationSamples: read.u32(ptr, 64),
		fragmentShadingRateWithShaderDepthStencilWrites: read.u32(ptr, 68),
		fragmentShadingRateWithSampleMask: read.u32(ptr, 72),
		fragmentShadingRateWithShaderSampleMask: read.u32(ptr, 76),
		fragmentShadingRateWithConservativeRasterization: read.u32(ptr, 80),
		fragmentShadingRateWithFragmentShaderInterlock: read.u32(ptr, 84),
		fragmentShadingRateWithCustomSampleLocations: read.u32(ptr, 88),
		fragmentShadingRateStrictMultiplyCombiner: read.u32(ptr, 92)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShadingRateKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShadingRateKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.sampleCounts, true);
	if (obj.fragmentSize){
	view.setUint32(20+(i*32), obj.fragmentSize.width, true);
	view.setUint32(24+(i*32), obj.fragmentSize.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sampleCounts, true);
	if (obj.fragmentSize){
	view.setUint32(20, obj.fragmentSize.width, true);
	view.setUint32(24, obj.fragmentSize.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShadingRateKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sampleCounts: read.u32(ptr, 16),
		fragmentSize: null
	};
	return obj;
}


export function VkSurfaceProtectedCapabilitiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSurfaceProtectedCapabilitiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.supportsProtected, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.supportsProtected, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceProtectedCapabilitiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		supportsProtected: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePresentWaitFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePresentWaitFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.presentWait, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.presentWait, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePresentWaitFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		presentWait: read.u32(ptr, 16)
	};
	return obj;
}

export const VkPipelineExecutableStatisticFormatKHR = {
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: 0,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: 1,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: 2,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: 3,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR",
		"1": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR",
		"2": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR",
		"3": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR",
		"2147483647": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR",
}};

export function VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pipelineExecutableInfo, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineExecutableInfo, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineExecutableInfo: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.pipeline||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.pipeline||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pipeline||0), true);
	view.setBigUint64(16, BigInt(obj.pipeline||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipeline: undefined
	};
	return obj;
}


export function VkPipelineExecutablePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineExecutablePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.stages, true);


	view.setUint32(40+(i*48), obj.subgroupSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stages, true);


	view.setUint32(40, obj.subgroupSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineExecutablePropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stages: read.u32(ptr, 16),
		name: null,
		description: null,
		subgroupSize: read.u32(ptr, 40)
	};
	return obj;
}


export function VkPipelineExecutableInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineExecutableInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.pipeline||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.pipeline||0), true);

	view.setUint32(24+(i*32), obj.executableIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pipeline||0), true);
	view.setBigUint64(16, BigInt(obj.pipeline||0), true);

	view.setUint32(24, obj.executableIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineExecutableInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipeline: undefined,
		executableIndex: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPipelineExecutableStatisticKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPipelineExecutableStatisticKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);



	view.setUint32(32+(i*48), obj.format, true)

	view.setBigUint64(40+(i*48), BigInt(obj.value||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.value||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);



	view.setUint32(32, obj.format, true)

	view.setBigUint64(40, BigInt(obj.value||0), true);
	view.setBigUint64(40, BigInt(obj.value||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineExecutableStatisticKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		name: null,
		description: null,
		format: read.u32(ptr, 32),
		value: undefined
	};
	return obj;
}


export function VkPipelineExecutableInternalRepresentationKHR_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkPipelineExecutableInternalRepresentationKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);



	view.setUint32(32+(i*56), obj.isText, true);

	view.setBigUint64(40+(i*56), BigInt(obj.dataSize||0), true);
	view.setBigUint64(40+(i*56), BigInt(obj.dataSize||0), true);


	view.setBigUint64(48+(i*56), BigInt(obj.pData||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);



	view.setUint32(32, obj.isText, true);

	view.setBigUint64(40, BigInt(obj.dataSize||0), true);
	view.setBigUint64(40, BigInt(obj.dataSize||0), true);


	view.setBigUint64(48, BigInt(obj.pData||0), true);
	view.setBigUint64(48, BigInt(obj.pData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineExecutableInternalRepresentationKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		name: null,
		description: null,
		isText: read.u32(ptr, 32),
		dataSize: undefined,
		pData: read.ptr(ptr)
	};
	return obj;
}


export function VkPipelineLibraryCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineLibraryCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.libraryCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pLibraries||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pLibraries||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.libraryCount, true);

	view.setBigUint64(24, BigInt(obj.pLibraries||0), true);
	view.setBigUint64(24, BigInt(obj.pLibraries||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineLibraryCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		libraryCount: read.u32(ptr, 16),
		pLibraries: read.ptr(ptr)
	};
	return obj;
}


export function VkPresentIdKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPresentIdKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.swapchainCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pPresentIds||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pPresentIds||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.swapchainCount, true);

	view.setBigUint64(24, BigInt(obj.pPresentIds||0), true);
	view.setBigUint64(24, BigInt(obj.pPresentIds||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentIdKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchainCount: read.u32(ptr, 16),
		pPresentIds: undefined
	};
	return obj;
}


export function VkPhysicalDevicePresentIdFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePresentIdFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.presentId, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.presentId, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePresentIdFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		presentId: read.u32(ptr, 16)
	};
	return obj;
}


export function VkQueueFamilyCheckpointProperties2NV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkQueueFamilyCheckpointProperties2NV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.checkpointExecutionStageMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.checkpointExecutionStageMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueueFamilyCheckpointProperties2NV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		checkpointExecutionStageMask: null
	};
	return obj;
}


export function VkCheckpointData2NV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCheckpointData2NV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*32), obj.stage, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pCheckpointMarker||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pCheckpointMarker||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.stage, true);

	view.setBigUint64(24, BigInt(obj.pCheckpointMarker||0), true);
	view.setBigUint64(24, BigInt(obj.pCheckpointMarker||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCheckpointData2NV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stage: null,
		pCheckpointMarker: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.fragmentShaderBarycentric, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentShaderBarycentric, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentShaderBarycentric: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.triStripVertexOrderIndependentOfProvokingVertex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.triStripVertexOrderIndependentOfProvokingVertex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		triStripVertexOrderIndependentOfProvokingVertex: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderSubgroupUniformControlFlow, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderSubgroupUniformControlFlow, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderSubgroupUniformControlFlow: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.workgroupMemoryExplicitLayout, true);
	view.setUint32(20+(i*32), obj.workgroupMemoryExplicitLayoutScalarBlockLayout, true);
	view.setUint32(24+(i*32), obj.workgroupMemoryExplicitLayout8BitAccess, true);
	view.setUint32(28+(i*32), obj.workgroupMemoryExplicitLayout16BitAccess, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.workgroupMemoryExplicitLayout, true);
	view.setUint32(20, obj.workgroupMemoryExplicitLayoutScalarBlockLayout, true);
	view.setUint32(24, obj.workgroupMemoryExplicitLayout8BitAccess, true);
	view.setUint32(28, obj.workgroupMemoryExplicitLayout16BitAccess, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		workgroupMemoryExplicitLayout: read.u32(ptr, 16),
		workgroupMemoryExplicitLayoutScalarBlockLayout: read.u32(ptr, 20),
		workgroupMemoryExplicitLayout8BitAccess: read.u32(ptr, 24),
		workgroupMemoryExplicitLayout16BitAccess: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.rayTracingMaintenance1, true);
	view.setUint32(20+(i*24), obj.rayTracingPipelineTraceRaysIndirect2, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rayTracingMaintenance1, true);
	view.setUint32(20, obj.rayTracingPipelineTraceRaysIndirect2, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rayTracingMaintenance1: read.u32(ptr, 16),
		rayTracingPipelineTraceRaysIndirect2: read.u32(ptr, 20)
	};
	return obj;
}


export function VkTraceRaysIndirectCommand2KHR_alloc_array(size){
	const buffer = new ArrayBuffer(104*size);
	return ptr(buffer);
}
export function VkTraceRaysIndirectCommand2KHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(104*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*104), obj.raygenShaderRecordAddress, true);
	view.setUint64(8+(i*104), obj.raygenShaderRecordSize, true);
	view.setUint64(16+(i*104), obj.missShaderBindingTableAddress, true);
	view.setUint64(24+(i*104), obj.missShaderBindingTableSize, true);
	view.setUint64(32+(i*104), obj.missShaderBindingTableStride, true);
	view.setUint64(40+(i*104), obj.hitShaderBindingTableAddress, true);
	view.setUint64(48+(i*104), obj.hitShaderBindingTableSize, true);
	view.setUint64(56+(i*104), obj.hitShaderBindingTableStride, true);
	view.setUint64(64+(i*104), obj.callableShaderBindingTableAddress, true);
	view.setUint64(72+(i*104), obj.callableShaderBindingTableSize, true);
	view.setUint64(80+(i*104), obj.callableShaderBindingTableStride, true);
	view.setUint32(88+(i*104), obj.width, true);
	view.setUint32(92+(i*104), obj.height, true);
	view.setUint32(96+(i*104), obj.depth, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(104);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.raygenShaderRecordAddress, true);
	view.setUint64(8, obj.raygenShaderRecordSize, true);
	view.setUint64(16, obj.missShaderBindingTableAddress, true);
	view.setUint64(24, obj.missShaderBindingTableSize, true);
	view.setUint64(32, obj.missShaderBindingTableStride, true);
	view.setUint64(40, obj.hitShaderBindingTableAddress, true);
	view.setUint64(48, obj.hitShaderBindingTableSize, true);
	view.setUint64(56, obj.hitShaderBindingTableStride, true);
	view.setUint64(64, obj.callableShaderBindingTableAddress, true);
	view.setUint64(72, obj.callableShaderBindingTableSize, true);
	view.setUint64(80, obj.callableShaderBindingTableStride, true);
	view.setUint32(88, obj.width, true);
	view.setUint32(92, obj.height, true);
	view.setUint32(96, obj.depth, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTraceRaysIndirectCommand2KHR_from_C(ptr){
	const obj = {
		raygenShaderRecordAddress: null,
		raygenShaderRecordSize: null,
		missShaderBindingTableAddress: null,
		missShaderBindingTableSize: null,
		missShaderBindingTableStride: null,
		hitShaderBindingTableAddress: null,
		hitShaderBindingTableSize: null,
		hitShaderBindingTableStride: null,
		callableShaderBindingTableAddress: null,
		callableShaderBindingTableSize: null,
		callableShaderBindingTableStride: null,
		width: read.u32(ptr, 88),
		height: read.u32(ptr, 92),
		depth: read.u32(ptr, 96)
	};
	return obj;
}

export const VkDebugReportObjectTypeEXT = {
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: 0,
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: 1,
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: 2,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: 3,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: 4,
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: 5,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: 6,
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: 7,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: 8,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: 9,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: 10,
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: 11,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: 12,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: 13,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: 14,
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: 15,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: 16,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: 17,
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: 18,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: 19,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: 20,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: 21,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: 22,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: 23,
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: 24,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: 25,
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: 26,
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: 27,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: 28,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: 29,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: 30,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: 33,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: 1000156000,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: 1000085000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT: 1000029000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT: 1000029001,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: 1000150000,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: 1000165000,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT: 1000366000,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: NaN,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: NaN,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: NaN,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: NaN,
	VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT",
		"1": "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT",
		"2": "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT",
		"3": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT",
		"4": "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT",
		"5": "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT",
		"6": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT",
		"7": "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT",
		"8": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT",
		"9": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT",
		"10": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT",
		"11": "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT",
		"12": "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT",
		"13": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT",
		"14": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT",
		"15": "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT",
		"16": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT",
		"17": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT",
		"18": "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT",
		"19": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT",
		"20": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT",
		"21": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT",
		"22": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT",
		"23": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT",
		"24": "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT",
		"25": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT",
		"26": "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT",
		"27": "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT",
		"28": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT",
		"29": "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT",
		"30": "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT",
		"33": "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT",
		"1000156000": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT",
		"1000085000": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT",
		"1000029000": "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT",
		"1000029001": "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT",
		"1000150000": "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT",
		"1000165000": "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT",
		"1000366000": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT",
		"NaN": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT",
		"NaN": "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT",
		"NaN": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT",
		"NaN": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT",
		"2147483647": "VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT",
}};
export const VkDebugReportFlagBitsEXT = {
	VK_DEBUG_REPORT_INFORMATION_BIT_EXT: 1,
	VK_DEBUG_REPORT_WARNING_BIT_EXT: 2,
	VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: 4,
	VK_DEBUG_REPORT_ERROR_BIT_EXT: 8,
	VK_DEBUG_REPORT_DEBUG_BIT_EXT: 16,
	VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_DEBUG_REPORT_INFORMATION_BIT_EXT",
		"2": "VK_DEBUG_REPORT_WARNING_BIT_EXT",
		"4": "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT",
		"8": "VK_DEBUG_REPORT_ERROR_BIT_EXT",
		"16": "VK_DEBUG_REPORT_DEBUG_BIT_EXT",
		"2147483647": "VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkDebugReportCallbackCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDebugReportCallbackCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pfnCallback||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pfnCallback||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pUserData||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pUserData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.pfnCallback||0), true);
	view.setBigUint64(24, BigInt(obj.pfnCallback||0), true);


	view.setBigUint64(32, BigInt(obj.pUserData||0), true);
	view.setBigUint64(32, BigInt(obj.pUserData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugReportCallbackCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pfnCallback: undefined,
		pUserData: read.ptr(ptr)
	};
	return obj;
}

export const VkRasterizationOrderAMD = {
	VK_RASTERIZATION_ORDER_STRICT_AMD: 0,
	VK_RASTERIZATION_ORDER_RELAXED_AMD: 1,
	VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: 2147483647,
	keys:{
		"0": "VK_RASTERIZATION_ORDER_STRICT_AMD",
		"1": "VK_RASTERIZATION_ORDER_RELAXED_AMD",
		"2147483647": "VK_RASTERIZATION_ORDER_MAX_ENUM_AMD",
}};

export function VkPipelineRasterizationStateRasterizationOrderAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationStateRasterizationOrderAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.rasterizationOrder, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rasterizationOrder, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationStateRasterizationOrderAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rasterizationOrder: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDebugMarkerObjectNameInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDebugMarkerObjectNameInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.objectType, true)
	view.setUint64(24+(i*40), obj.object, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pObjectName||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pObjectName||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.objectType, true)
	view.setUint64(24, obj.object, true);

	view.setBigUint64(32, BigInt(obj.pObjectName||0), true);
	view.setBigUint64(32, BigInt(obj.pObjectName||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugMarkerObjectNameInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		objectType: read.u32(ptr, 16),
		object: null,
		pObjectName: read.ptr(ptr)
	};
	return obj;
}


export function VkDebugMarkerObjectTagInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkDebugMarkerObjectTagInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.objectType, true)
	view.setUint64(24+(i*56), obj.object, true);
	view.setUint64(32+(i*56), obj.tagName, true);

	view.setBigUint64(40+(i*56), BigInt(obj.tagSize||0), true);
	view.setBigUint64(40+(i*56), BigInt(obj.tagSize||0), true);


	view.setBigUint64(48+(i*56), BigInt(obj.pTag||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pTag||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.objectType, true)
	view.setUint64(24, obj.object, true);
	view.setUint64(32, obj.tagName, true);

	view.setBigUint64(40, BigInt(obj.tagSize||0), true);
	view.setBigUint64(40, BigInt(obj.tagSize||0), true);


	view.setBigUint64(48, BigInt(obj.pTag||0), true);
	view.setBigUint64(48, BigInt(obj.pTag||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugMarkerObjectTagInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		objectType: read.u32(ptr, 16),
		object: null,
		tagName: null,
		tagSize: undefined,
		pTag: read.ptr(ptr)
	};
	return obj;
}


export function VkDebugMarkerMarkerInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDebugMarkerMarkerInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.pMarkerName||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.pMarkerName||0), true);


	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pMarkerName||0), true);
	view.setBigUint64(16, BigInt(obj.pMarkerName||0), true);


	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugMarkerMarkerInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pMarkerName: read.ptr(ptr),
		color: null
	};
	return obj;
}


export function VkDedicatedAllocationImageCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDedicatedAllocationImageCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.dedicatedAllocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dedicatedAllocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDedicatedAllocationImageCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dedicatedAllocation: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDedicatedAllocationBufferCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDedicatedAllocationBufferCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.dedicatedAllocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dedicatedAllocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDedicatedAllocationBufferCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dedicatedAllocation: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDedicatedAllocationMemoryAllocateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDedicatedAllocationMemoryAllocateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.image||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.image||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.buffer||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.buffer||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.image||0), true);
	view.setBigUint64(16, BigInt(obj.image||0), true);


	view.setBigUint64(24, BigInt(obj.buffer||0), true);
	view.setBigUint64(24, BigInt(obj.buffer||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDedicatedAllocationMemoryAllocateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image: undefined,
		buffer: undefined
	};
	return obj;
}


export function VkPhysicalDeviceTransformFeedbackFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTransformFeedbackFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.transformFeedback, true);
	view.setUint32(20+(i*24), obj.geometryStreams, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.transformFeedback, true);
	view.setUint32(20, obj.geometryStreams, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTransformFeedbackFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		transformFeedback: read.u32(ptr, 16),
		geometryStreams: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceTransformFeedbackPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTransformFeedbackPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.maxTransformFeedbackStreams, true);
	view.setUint32(20+(i*64), obj.maxTransformFeedbackBuffers, true);
	view.setUint64(24+(i*64), obj.maxTransformFeedbackBufferSize, true);
	view.setUint32(32+(i*64), obj.maxTransformFeedbackStreamDataSize, true);
	view.setUint32(36+(i*64), obj.maxTransformFeedbackBufferDataSize, true);
	view.setUint32(40+(i*64), obj.maxTransformFeedbackBufferDataStride, true);
	view.setUint32(44+(i*64), obj.transformFeedbackQueries, true);
	view.setUint32(48+(i*64), obj.transformFeedbackStreamsLinesTriangles, true);
	view.setUint32(52+(i*64), obj.transformFeedbackRasterizationStreamSelect, true);
	view.setUint32(56+(i*64), obj.transformFeedbackDraw, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxTransformFeedbackStreams, true);
	view.setUint32(20, obj.maxTransformFeedbackBuffers, true);
	view.setUint64(24, obj.maxTransformFeedbackBufferSize, true);
	view.setUint32(32, obj.maxTransformFeedbackStreamDataSize, true);
	view.setUint32(36, obj.maxTransformFeedbackBufferDataSize, true);
	view.setUint32(40, obj.maxTransformFeedbackBufferDataStride, true);
	view.setUint32(44, obj.transformFeedbackQueries, true);
	view.setUint32(48, obj.transformFeedbackStreamsLinesTriangles, true);
	view.setUint32(52, obj.transformFeedbackRasterizationStreamSelect, true);
	view.setUint32(56, obj.transformFeedbackDraw, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTransformFeedbackPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxTransformFeedbackStreams: read.u32(ptr, 16),
		maxTransformFeedbackBuffers: read.u32(ptr, 20),
		maxTransformFeedbackBufferSize: null,
		maxTransformFeedbackStreamDataSize: read.u32(ptr, 32),
		maxTransformFeedbackBufferDataSize: read.u32(ptr, 36),
		maxTransformFeedbackBufferDataStride: read.u32(ptr, 40),
		transformFeedbackQueries: read.u32(ptr, 44),
		transformFeedbackStreamsLinesTriangles: read.u32(ptr, 48),
		transformFeedbackRasterizationStreamSelect: read.u32(ptr, 52),
		transformFeedbackDraw: read.u32(ptr, 56)
	};
	return obj;
}


export function VkPipelineRasterizationStateStreamCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationStateStreamCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.rasterizationStream, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.rasterizationStream, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationStateStreamCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		rasterizationStream: read.u32(ptr, 20)
	};
	return obj;
}


export function VkCuModuleCreateInfoNVX_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCuModuleCreateInfoNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.dataSize||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.dataSize||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.dataSize||0), true);
	view.setBigUint64(16, BigInt(obj.dataSize||0), true);


	view.setBigUint64(24, BigInt(obj.pData||0), true);
	view.setBigUint64(24, BigInt(obj.pData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCuModuleCreateInfoNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dataSize: undefined,
		pData: read.ptr(ptr)
	};
	return obj;
}


export function VkCuFunctionCreateInfoNVX_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCuFunctionCreateInfoNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.module||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.module||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.pName||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pName||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.module||0), true);
	view.setBigUint64(16, BigInt(obj.module||0), true);


	view.setBigUint64(24, BigInt(obj.pName||0), true);
	view.setBigUint64(24, BigInt(obj.pName||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCuFunctionCreateInfoNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		module: undefined,
		pName: read.ptr(ptr)
	};
	return obj;
}


export function VkCuLaunchInfoNVX_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkCuLaunchInfoNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*88), BigInt(obj.function||0), true);
	view.setBigUint64(16+(i*88), BigInt(obj.function||0), true);

	view.setUint32(24+(i*88), obj.gridDimX, true);
	view.setUint32(28+(i*88), obj.gridDimY, true);
	view.setUint32(32+(i*88), obj.gridDimZ, true);
	view.setUint32(36+(i*88), obj.blockDimX, true);
	view.setUint32(40+(i*88), obj.blockDimY, true);
	view.setUint32(44+(i*88), obj.blockDimZ, true);
	view.setUint32(48+(i*88), obj.sharedMemBytes, true);

	view.setBigUint64(56+(i*88), BigInt(obj.paramCount||0), true);
	view.setBigUint64(56+(i*88), BigInt(obj.paramCount||0), true);


	view.setBigUint64(64+(i*88), BigInt(obj.pParams||0), true);
	view.setBigUint64(64+(i*88), BigInt(obj.pParams||0), true);


	view.setBigUint64(72+(i*88), BigInt(obj.extraCount||0), true);
	view.setBigUint64(72+(i*88), BigInt(obj.extraCount||0), true);


	view.setBigUint64(80+(i*88), BigInt(obj.pExtras||0), true);
	view.setBigUint64(80+(i*88), BigInt(obj.pExtras||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.function||0), true);
	view.setBigUint64(16, BigInt(obj.function||0), true);

	view.setUint32(24, obj.gridDimX, true);
	view.setUint32(28, obj.gridDimY, true);
	view.setUint32(32, obj.gridDimZ, true);
	view.setUint32(36, obj.blockDimX, true);
	view.setUint32(40, obj.blockDimY, true);
	view.setUint32(44, obj.blockDimZ, true);
	view.setUint32(48, obj.sharedMemBytes, true);

	view.setBigUint64(56, BigInt(obj.paramCount||0), true);
	view.setBigUint64(56, BigInt(obj.paramCount||0), true);


	view.setBigUint64(64, BigInt(obj.pParams||0), true);
	view.setBigUint64(64, BigInt(obj.pParams||0), true);


	view.setBigUint64(72, BigInt(obj.extraCount||0), true);
	view.setBigUint64(72, BigInt(obj.extraCount||0), true);


	view.setBigUint64(80, BigInt(obj.pExtras||0), true);
	view.setBigUint64(80, BigInt(obj.pExtras||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCuLaunchInfoNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		function: undefined,
		gridDimX: read.u32(ptr, 24),
		gridDimY: read.u32(ptr, 28),
		gridDimZ: read.u32(ptr, 32),
		blockDimX: read.u32(ptr, 36),
		blockDimY: read.u32(ptr, 40),
		blockDimZ: read.u32(ptr, 44),
		sharedMemBytes: read.u32(ptr, 48),
		paramCount: undefined,
		pParams: read.ptr(ptr),
		extraCount: undefined,
		pExtras: read.ptr(ptr)
	};
	return obj;
}


export function VkImageViewHandleInfoNVX_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkImageViewHandleInfoNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.imageView||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.imageView||0), true);

	view.setUint32(24+(i*40), obj.descriptorType, true)

	view.setBigUint64(32+(i*40), BigInt(obj.sampler||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.sampler||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.imageView||0), true);
	view.setBigUint64(16, BigInt(obj.imageView||0), true);

	view.setUint32(24, obj.descriptorType, true)

	view.setBigUint64(32, BigInt(obj.sampler||0), true);
	view.setBigUint64(32, BigInt(obj.sampler||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewHandleInfoNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageView: undefined,
		descriptorType: read.u32(ptr, 24),
		sampler: undefined
	};
	return obj;
}


export function VkImageViewAddressPropertiesNVX_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageViewAddressPropertiesNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*32), obj.deviceAddress, true);
	view.setUint64(24+(i*32), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.deviceAddress, true);
	view.setUint64(24, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewAddressPropertiesNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceAddress: null,
		size: null
	};
	return obj;
}


export function VkTextureLODGatherFormatPropertiesAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkTextureLODGatherFormatPropertiesAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.supportsTextureGatherLODBiasAMD, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.supportsTextureGatherLODBiasAMD, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTextureLODGatherFormatPropertiesAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		supportsTextureGatherLODBiasAMD: read.u32(ptr, 16)
	};
	return obj;
}

export const VkShaderInfoTypeAMD = {
	VK_SHADER_INFO_TYPE_STATISTICS_AMD: 0,
	VK_SHADER_INFO_TYPE_BINARY_AMD: 1,
	VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: 2,
	VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: 2147483647,
	keys:{
		"0": "VK_SHADER_INFO_TYPE_STATISTICS_AMD",
		"1": "VK_SHADER_INFO_TYPE_BINARY_AMD",
		"2": "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD",
		"2147483647": "VK_SHADER_INFO_TYPE_MAX_ENUM_AMD",
}};

export function VkShaderResourceUsageAMD_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkShaderResourceUsageAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.numUsedVgprs, true);
	view.setUint32(4+(i*32), obj.numUsedSgprs, true);
	view.setUint32(8+(i*32), obj.ldsSizePerLocalWorkGroup, true);

	view.setBigUint64(16+(i*32), BigInt(obj.ldsUsageSizeInBytes||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.ldsUsageSizeInBytes||0), true);


	view.setBigUint64(24+(i*32), BigInt(obj.scratchMemUsageInBytes||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.scratchMemUsageInBytes||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.numUsedVgprs, true);
	view.setUint32(4, obj.numUsedSgprs, true);
	view.setUint32(8, obj.ldsSizePerLocalWorkGroup, true);

	view.setBigUint64(16, BigInt(obj.ldsUsageSizeInBytes||0), true);
	view.setBigUint64(16, BigInt(obj.ldsUsageSizeInBytes||0), true);


	view.setBigUint64(24, BigInt(obj.scratchMemUsageInBytes||0), true);
	view.setBigUint64(24, BigInt(obj.scratchMemUsageInBytes||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShaderResourceUsageAMD_from_C(ptr){
	const obj = {
		numUsedVgprs: read.u32(ptr, 0),
		numUsedSgprs: read.u32(ptr, 4),
		ldsSizePerLocalWorkGroup: read.u32(ptr, 8),
		ldsUsageSizeInBytes: undefined,
		scratchMemUsageInBytes: undefined
	};
	return obj;
}


export function VkShaderStatisticsInfoAMD_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkShaderStatisticsInfoAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.shaderStageMask, true);
	if (obj.resourceUsage){
	view.setUint32(8+(i*64), obj.resourceUsage.numUsedVgprs, true);
	view.setUint32(12+(i*64), obj.resourceUsage.numUsedSgprs, true);
	view.setUint32(16+(i*64), obj.resourceUsage.ldsSizePerLocalWorkGroup, true);

	view.setBigUint64(24+(i*64), BigInt(obj.resourceUsage.ldsUsageSizeInBytes||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.resourceUsage.ldsUsageSizeInBytes||0), true);


	view.setBigUint64(32+(i*64), BigInt(obj.resourceUsage.scratchMemUsageInBytes||0), true);
	view.setBigUint64(32+(i*64), BigInt(obj.resourceUsage.scratchMemUsageInBytes||0), true);

	}
	view.setUint32(40+(i*64), obj.numPhysicalVgprs, true);
	view.setUint32(44+(i*64), obj.numPhysicalSgprs, true);
	view.setUint32(48+(i*64), obj.numAvailableVgprs, true);
	view.setUint32(52+(i*64), obj.numAvailableSgprs, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.shaderStageMask, true);
	if (obj.resourceUsage){
	view.setUint32(8, obj.resourceUsage.numUsedVgprs, true);
	view.setUint32(12, obj.resourceUsage.numUsedSgprs, true);
	view.setUint32(16, obj.resourceUsage.ldsSizePerLocalWorkGroup, true);

	view.setBigUint64(24, BigInt(obj.resourceUsage.ldsUsageSizeInBytes||0), true);
	view.setBigUint64(24, BigInt(obj.resourceUsage.ldsUsageSizeInBytes||0), true);


	view.setBigUint64(32, BigInt(obj.resourceUsage.scratchMemUsageInBytes||0), true);
	view.setBigUint64(32, BigInt(obj.resourceUsage.scratchMemUsageInBytes||0), true);

	}
	view.setUint32(40, obj.numPhysicalVgprs, true);
	view.setUint32(44, obj.numPhysicalSgprs, true);
	view.setUint32(48, obj.numAvailableVgprs, true);
	view.setUint32(52, obj.numAvailableSgprs, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShaderStatisticsInfoAMD_from_C(ptr){
	const obj = {
		shaderStageMask: read.u32(ptr, 0),
		resourceUsage: null,
		numPhysicalVgprs: read.u32(ptr, 40),
		numPhysicalSgprs: read.u32(ptr, 44),
		numAvailableVgprs: read.u32(ptr, 48),
		numAvailableSgprs: read.u32(ptr, 52),
		computeWorkGroupSize: null
	};
	return obj;
}


export function VkPhysicalDeviceCornerSampledImageFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCornerSampledImageFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.cornerSampledImage, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.cornerSampledImage, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCornerSampledImageFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		cornerSampledImage: read.u32(ptr, 16)
	};
	return obj;
}

export const VkExternalMemoryHandleTypeFlagBitsNV = {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: 1,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: 2,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: 4,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: 8,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV",
		"2": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV",
		"4": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV",
		"8": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV",
		"2147483647": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV",
}};
export const VkExternalMemoryFeatureFlagBitsNV = {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: 1,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: 2,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: 4,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV",
		"2": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV",
		"4": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV",
		"2147483647": "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV",
}};

export function VkExternalImageFormatPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkExternalImageFormatPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.imageFormatProperties){
	if (obj.imageFormatProperties.maxExtent){
	view.setUint32(0+(i*48), obj.imageFormatProperties.maxExtent.width, true);
	view.setUint32(4+(i*48), obj.imageFormatProperties.maxExtent.height, true);
	view.setUint32(8+(i*48), obj.imageFormatProperties.maxExtent.depth, true);
	}
	view.setUint32(12+(i*48), obj.imageFormatProperties.maxMipLevels, true);
	view.setUint32(16+(i*48), obj.imageFormatProperties.maxArrayLayers, true);
	view.setUint32(20+(i*48), obj.imageFormatProperties.sampleCounts, true);
	view.setUint64(24+(i*48), obj.imageFormatProperties.maxResourceSize, true);
	}
	view.setUint32(32+(i*48), obj.externalMemoryFeatures, true);
	view.setUint32(36+(i*48), obj.exportFromImportedHandleTypes, true);
	view.setUint32(40+(i*48), obj.compatibleHandleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.imageFormatProperties){
	if (obj.imageFormatProperties.maxExtent){
	view.setUint32(0, obj.imageFormatProperties.maxExtent.width, true);
	view.setUint32(4, obj.imageFormatProperties.maxExtent.height, true);
	view.setUint32(8, obj.imageFormatProperties.maxExtent.depth, true);
	}
	view.setUint32(12, obj.imageFormatProperties.maxMipLevels, true);
	view.setUint32(16, obj.imageFormatProperties.maxArrayLayers, true);
	view.setUint32(20, obj.imageFormatProperties.sampleCounts, true);
	view.setUint64(24, obj.imageFormatProperties.maxResourceSize, true);
	}
	view.setUint32(32, obj.externalMemoryFeatures, true);
	view.setUint32(36, obj.exportFromImportedHandleTypes, true);
	view.setUint32(40, obj.compatibleHandleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalImageFormatPropertiesNV_from_C(ptr){
	const obj = {
		imageFormatProperties: null,
		externalMemoryFeatures: read.u32(ptr, 32),
		exportFromImportedHandleTypes: read.u32(ptr, 36),
		compatibleHandleTypes: read.u32(ptr, 40)
	};
	return obj;
}


export function VkExternalMemoryImageCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExternalMemoryImageCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExternalMemoryImageCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}


export function VkExportMemoryAllocateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkExportMemoryAllocateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.handleTypes, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleTypes, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkExportMemoryAllocateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleTypes: read.u32(ptr, 16)
	};
	return obj;
}

export const VkValidationCheckEXT = {
	VK_VALIDATION_CHECK_ALL_EXT: 0,
	VK_VALIDATION_CHECK_SHADERS_EXT: 1,
	VK_VALIDATION_CHECK_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_VALIDATION_CHECK_ALL_EXT",
		"1": "VK_VALIDATION_CHECK_SHADERS_EXT",
		"2147483647": "VK_VALIDATION_CHECK_MAX_ENUM_EXT",
}};

export function VkValidationFlagsEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkValidationFlagsEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.disabledValidationCheckCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pDisabledValidationChecks||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pDisabledValidationChecks||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.disabledValidationCheckCount, true);

	view.setBigUint64(24, BigInt(obj.pDisabledValidationChecks||0), true);
	view.setBigUint64(24, BigInt(obj.pDisabledValidationChecks||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkValidationFlagsEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		disabledValidationCheckCount: read.u32(ptr, 16),
		pDisabledValidationChecks: undefined
	};
	return obj;
}


export function VkImageViewASTCDecodeModeEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageViewASTCDecodeModeEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.decodeMode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.decodeMode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewASTCDecodeModeEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		decodeMode: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceASTCDecodeFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceASTCDecodeFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.decodeModeSharedExponent, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.decodeModeSharedExponent, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceASTCDecodeFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		decodeModeSharedExponent: read.u32(ptr, 16)
	};
	return obj;
}

export const VkPipelineRobustnessBufferBehaviorEXT = {
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT: 0,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT: 1,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT: 2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT: 3,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT",
		"1": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT",
		"2": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT",
		"3": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT",
		"2147483647": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT",
}};
export const VkPipelineRobustnessImageBehaviorEXT = {
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT: 0,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT: 1,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT: 2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT: 3,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT",
		"1": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT",
		"2": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT",
		"3": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT",
		"2147483647": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT",
}};

export function VkPhysicalDevicePipelineRobustnessFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePipelineRobustnessFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pipelineRobustness, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineRobustness, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePipelineRobustnessFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineRobustness: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePipelineRobustnessPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePipelineRobustnessPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.defaultRobustnessStorageBuffers, true)
	view.setUint32(20+(i*32), obj.defaultRobustnessUniformBuffers, true)
	view.setUint32(24+(i*32), obj.defaultRobustnessVertexInputs, true)
	view.setUint32(28+(i*32), obj.defaultRobustnessImages, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.defaultRobustnessStorageBuffers, true)
	view.setUint32(20, obj.defaultRobustnessUniformBuffers, true)
	view.setUint32(24, obj.defaultRobustnessVertexInputs, true)
	view.setUint32(28, obj.defaultRobustnessImages, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePipelineRobustnessPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		defaultRobustnessStorageBuffers: read.u32(ptr, 16),
		defaultRobustnessUniformBuffers: read.u32(ptr, 20),
		defaultRobustnessVertexInputs: read.u32(ptr, 24),
		defaultRobustnessImages: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPipelineRobustnessCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineRobustnessCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.storageBuffers, true)
	view.setUint32(20+(i*32), obj.uniformBuffers, true)
	view.setUint32(24+(i*32), obj.vertexInputs, true)
	view.setUint32(28+(i*32), obj.images, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.storageBuffers, true)
	view.setUint32(20, obj.uniformBuffers, true)
	view.setUint32(24, obj.vertexInputs, true)
	view.setUint32(28, obj.images, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRobustnessCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		storageBuffers: read.u32(ptr, 16),
		uniformBuffers: read.u32(ptr, 20),
		vertexInputs: read.u32(ptr, 24),
		images: read.u32(ptr, 28)
	};
	return obj;
}

export const VkConditionalRenderingFlagBitsEXT = {
	VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: 1,
	VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT",
		"2147483647": "VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkConditionalRenderingBeginInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkConditionalRenderingBeginInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.buffer||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.buffer||0), true);

	view.setUint64(24+(i*40), obj.offset, true);
	view.setUint32(32+(i*40), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.buffer||0), true);
	view.setBigUint64(16, BigInt(obj.buffer||0), true);

	view.setUint64(24, obj.offset, true);
	view.setUint32(32, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkConditionalRenderingBeginInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		buffer: undefined,
		offset: null,
		flags: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDeviceConditionalRenderingFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceConditionalRenderingFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.conditionalRendering, true);
	view.setUint32(20+(i*24), obj.inheritedConditionalRendering, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.conditionalRendering, true);
	view.setUint32(20, obj.inheritedConditionalRendering, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceConditionalRenderingFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		conditionalRendering: read.u32(ptr, 16),
		inheritedConditionalRendering: read.u32(ptr, 20)
	};
	return obj;
}


export function VkCommandBufferInheritanceConditionalRenderingInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkCommandBufferInheritanceConditionalRenderingInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.conditionalRenderingEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.conditionalRenderingEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferInheritanceConditionalRenderingInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		conditionalRenderingEnable: read.u32(ptr, 16)
	};
	return obj;
}


export function VkViewportWScalingNV_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkViewportWScalingNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*8), obj.xcoeff, true);
	view.setFloat32(4+(i*8), obj.ycoeff, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.xcoeff, true);
	view.setFloat32(4, obj.ycoeff, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkViewportWScalingNV_from_C(ptr){
	const obj = {
		xcoeff: null,
		ycoeff: null
	};
	return obj;
}


export function VkPipelineViewportWScalingStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineViewportWScalingStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.viewportWScalingEnable, true);
	view.setUint32(20+(i*32), obj.viewportCount, true);
	if (obj.pViewportWScalings){
		const wrapped = VkViewportWScalingNV_to_C(obj.pViewportWScalings, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pViewportWScalings||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.viewportWScalingEnable, true);
	view.setUint32(20, obj.viewportCount, true);
	if (obj.pViewportWScalings){
		const wrapped = VkViewportWScalingNV_to_C(obj.pViewportWScalings, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pViewportWScalings||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportWScalingStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		viewportWScalingEnable: read.u32(ptr, 16),
		viewportCount: read.u32(ptr, 20),
		pViewportWScalings: VkViewportWScalingNV_from_C(read.ptr(ptr))
	};
	return obj;
}

export const VkSurfaceCounterFlagBitsEXT = {
	VK_SURFACE_COUNTER_VBLANK_BIT_EXT: 1,
	VK_SURFACE_COUNTER_VBLANK_EXT: NaN,
	VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_SURFACE_COUNTER_VBLANK_BIT_EXT",
		"NaN": "VK_SURFACE_COUNTER_VBLANK_EXT",
		"2147483647": "VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkSurfaceCapabilities2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkSurfaceCapabilities2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.minImageCount, true);
	view.setUint32(20+(i*72), obj.maxImageCount, true);
	if (obj.currentExtent){
	view.setUint32(24+(i*72), obj.currentExtent.width, true);
	view.setUint32(28+(i*72), obj.currentExtent.height, true);
	}
	if (obj.minImageExtent){
	view.setUint32(32+(i*72), obj.minImageExtent.width, true);
	view.setUint32(36+(i*72), obj.minImageExtent.height, true);
	}
	if (obj.maxImageExtent){
	view.setUint32(40+(i*72), obj.maxImageExtent.width, true);
	view.setUint32(44+(i*72), obj.maxImageExtent.height, true);
	}
	view.setUint32(48+(i*72), obj.maxImageArrayLayers, true);
	view.setUint32(52+(i*72), obj.supportedTransforms, true);
	view.setUint32(56+(i*72), obj.currentTransform, true)
	view.setUint32(60+(i*72), obj.supportedCompositeAlpha, true);
	view.setUint32(64+(i*72), obj.supportedUsageFlags, true);
	view.setUint32(68+(i*72), obj.supportedSurfaceCounters, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.minImageCount, true);
	view.setUint32(20, obj.maxImageCount, true);
	if (obj.currentExtent){
	view.setUint32(24, obj.currentExtent.width, true);
	view.setUint32(28, obj.currentExtent.height, true);
	}
	if (obj.minImageExtent){
	view.setUint32(32, obj.minImageExtent.width, true);
	view.setUint32(36, obj.minImageExtent.height, true);
	}
	if (obj.maxImageExtent){
	view.setUint32(40, obj.maxImageExtent.width, true);
	view.setUint32(44, obj.maxImageExtent.height, true);
	}
	view.setUint32(48, obj.maxImageArrayLayers, true);
	view.setUint32(52, obj.supportedTransforms, true);
	view.setUint32(56, obj.currentTransform, true)
	view.setUint32(60, obj.supportedCompositeAlpha, true);
	view.setUint32(64, obj.supportedUsageFlags, true);
	view.setUint32(68, obj.supportedSurfaceCounters, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSurfaceCapabilities2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minImageCount: read.u32(ptr, 16),
		maxImageCount: read.u32(ptr, 20),
		currentExtent: null,
		minImageExtent: null,
		maxImageExtent: null,
		maxImageArrayLayers: read.u32(ptr, 48),
		supportedTransforms: read.u32(ptr, 52),
		currentTransform: read.u32(ptr, 56),
		supportedCompositeAlpha: read.u32(ptr, 60),
		supportedUsageFlags: read.u32(ptr, 64),
		supportedSurfaceCounters: read.u32(ptr, 68)
	};
	return obj;
}

export const VkDisplayPowerStateEXT = {
	VK_DISPLAY_POWER_STATE_OFF_EXT: 0,
	VK_DISPLAY_POWER_STATE_SUSPEND_EXT: 1,
	VK_DISPLAY_POWER_STATE_ON_EXT: 2,
	VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DISPLAY_POWER_STATE_OFF_EXT",
		"1": "VK_DISPLAY_POWER_STATE_SUSPEND_EXT",
		"2": "VK_DISPLAY_POWER_STATE_ON_EXT",
		"2147483647": "VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT",
}};
export const VkDeviceEventTypeEXT = {
	VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: 0,
	VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT",
		"2147483647": "VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT",
}};
export const VkDisplayEventTypeEXT = {
	VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: 0,
	VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT",
		"2147483647": "VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT",
}};

export function VkDisplayPowerInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDisplayPowerInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.powerState, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.powerState, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayPowerInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		powerState: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDeviceEventInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceEventInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.deviceEvent, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceEvent, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceEventInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceEvent: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDisplayEventInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDisplayEventInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.displayEvent, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.displayEvent, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayEventInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		displayEvent: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSwapchainCounterCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSwapchainCounterCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.surfaceCounters, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.surfaceCounters, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSwapchainCounterCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		surfaceCounters: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRefreshCycleDurationGOOGLE_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkRefreshCycleDurationGOOGLE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*8), obj.refreshDuration, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.refreshDuration, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRefreshCycleDurationGOOGLE_from_C(ptr){
	const obj = {
		refreshDuration: null
	};
	return obj;
}


export function VkPastPresentationTimingGOOGLE_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPastPresentationTimingGOOGLE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.presentID, true);
	view.setUint64(8+(i*40), obj.desiredPresentTime, true);
	view.setUint64(16+(i*40), obj.actualPresentTime, true);
	view.setUint64(24+(i*40), obj.earliestPresentTime, true);
	view.setUint64(32+(i*40), obj.presentMargin, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.presentID, true);
	view.setUint64(8, obj.desiredPresentTime, true);
	view.setUint64(16, obj.actualPresentTime, true);
	view.setUint64(24, obj.earliestPresentTime, true);
	view.setUint64(32, obj.presentMargin, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPastPresentationTimingGOOGLE_from_C(ptr){
	const obj = {
		presentID: read.u32(ptr, 0),
		desiredPresentTime: null,
		actualPresentTime: null,
		earliestPresentTime: null,
		presentMargin: null
	};
	return obj;
}


export function VkPresentTimeGOOGLE_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkPresentTimeGOOGLE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.presentID, true);
	view.setUint64(8+(i*16), obj.desiredPresentTime, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.presentID, true);
	view.setUint64(8, obj.desiredPresentTime, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentTimeGOOGLE_from_C(ptr){
	const obj = {
		presentID: read.u32(ptr, 0),
		desiredPresentTime: null
	};
	return obj;
}


export function VkPresentTimesInfoGOOGLE_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPresentTimesInfoGOOGLE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.swapchainCount, true);
	if (obj.pTimes){
		const wrapped = VkPresentTimeGOOGLE_to_C(obj.pTimes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pTimes||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.swapchainCount, true);
	if (obj.pTimes){
		const wrapped = VkPresentTimeGOOGLE_to_C(obj.pTimes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pTimes||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPresentTimesInfoGOOGLE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		swapchainCount: read.u32(ptr, 16),
		pTimes: VkPresentTimeGOOGLE_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.perViewPositionAllComponents, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.perViewPositionAllComponents, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		perViewPositionAllComponents: read.u32(ptr, 16)
	};
	return obj;
}

export const VkViewportCoordinateSwizzleNV = {
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: 0,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: 1,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: 2,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: 3,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: 4,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: 5,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: 6,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: 7,
	VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV",
		"1": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV",
		"2": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV",
		"3": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV",
		"4": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV",
		"5": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV",
		"6": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV",
		"7": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV",
		"2147483647": "VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV",
}};

export function VkViewportSwizzleNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkViewportSwizzleNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.x, true)
	view.setUint32(4+(i*16), obj.y, true)
	view.setUint32(8+(i*16), obj.z, true)
	view.setUint32(12+(i*16), obj.w, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.x, true)
	view.setUint32(4, obj.y, true)
	view.setUint32(8, obj.z, true)
	view.setUint32(12, obj.w, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkViewportSwizzleNV_from_C(ptr){
	const obj = {
		x: read.u32(ptr, 0),
		y: read.u32(ptr, 4),
		z: read.u32(ptr, 8),
		w: read.u32(ptr, 12)
	};
	return obj;
}


export function VkPipelineViewportSwizzleStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineViewportSwizzleStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.viewportCount, true);
	if (obj.pViewportSwizzles){
		const wrapped = VkViewportSwizzleNV_to_C(obj.pViewportSwizzles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pViewportSwizzles||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.viewportCount, true);
	if (obj.pViewportSwizzles){
		const wrapped = VkViewportSwizzleNV_to_C(obj.pViewportSwizzles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pViewportSwizzles||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportSwizzleStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		viewportCount: read.u32(ptr, 20),
		pViewportSwizzles: VkViewportSwizzleNV_from_C(read.ptr(ptr))
	};
	return obj;
}

export const VkDiscardRectangleModeEXT = {
	VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: 0,
	VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: 1,
	VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT",
		"1": "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT",
		"2147483647": "VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceDiscardRectanglePropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDiscardRectanglePropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxDiscardRectangles, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxDiscardRectangles, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDiscardRectanglePropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxDiscardRectangles: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineDiscardRectangleStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPipelineDiscardRectangleStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	view.setUint32(20+(i*40), obj.discardRectangleMode, true)
	view.setUint32(24+(i*40), obj.discardRectangleCount, true);
	if (obj.pDiscardRectangles){
		const wrapped = VkRect2D_to_C(obj.pDiscardRectangles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pDiscardRectangles||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.discardRectangleMode, true)
	view.setUint32(24, obj.discardRectangleCount, true);
	if (obj.pDiscardRectangles){
		const wrapped = VkRect2D_to_C(obj.pDiscardRectangles, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pDiscardRectangles||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineDiscardRectangleStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		discardRectangleMode: read.u32(ptr, 20),
		discardRectangleCount: read.u32(ptr, 24),
		pDiscardRectangles: VkRect2D_from_C(read.ptr(ptr))
	};
	return obj;
}

export const VkConservativeRasterizationModeEXT = {
	VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: 0,
	VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: 1,
	VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: 2,
	VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT",
		"1": "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT",
		"2": "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT",
		"2147483647": "VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceConservativeRasterizationPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceConservativeRasterizationPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setFloat32(16+(i*56), obj.primitiveOverestimationSize, true);
	view.setFloat32(20+(i*56), obj.maxExtraPrimitiveOverestimationSize, true);
	view.setFloat32(24+(i*56), obj.extraPrimitiveOverestimationSizeGranularity, true);
	view.setUint32(28+(i*56), obj.primitiveUnderestimation, true);
	view.setUint32(32+(i*56), obj.conservativePointAndLineRasterization, true);
	view.setUint32(36+(i*56), obj.degenerateTrianglesRasterized, true);
	view.setUint32(40+(i*56), obj.degenerateLinesRasterized, true);
	view.setUint32(44+(i*56), obj.fullyCoveredFragmentShaderInputVariable, true);
	view.setUint32(48+(i*56), obj.conservativeRasterizationPostDepthCoverage, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setFloat32(16, obj.primitiveOverestimationSize, true);
	view.setFloat32(20, obj.maxExtraPrimitiveOverestimationSize, true);
	view.setFloat32(24, obj.extraPrimitiveOverestimationSizeGranularity, true);
	view.setUint32(28, obj.primitiveUnderestimation, true);
	view.setUint32(32, obj.conservativePointAndLineRasterization, true);
	view.setUint32(36, obj.degenerateTrianglesRasterized, true);
	view.setUint32(40, obj.degenerateLinesRasterized, true);
	view.setUint32(44, obj.fullyCoveredFragmentShaderInputVariable, true);
	view.setUint32(48, obj.conservativeRasterizationPostDepthCoverage, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceConservativeRasterizationPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		primitiveOverestimationSize: null,
		maxExtraPrimitiveOverestimationSize: null,
		extraPrimitiveOverestimationSizeGranularity: null,
		primitiveUnderestimation: read.u32(ptr, 28),
		conservativePointAndLineRasterization: read.u32(ptr, 32),
		degenerateTrianglesRasterized: read.u32(ptr, 36),
		degenerateLinesRasterized: read.u32(ptr, 40),
		fullyCoveredFragmentShaderInputVariable: read.u32(ptr, 44),
		conservativeRasterizationPostDepthCoverage: read.u32(ptr, 48)
	};
	return obj;
}


export function VkPipelineRasterizationConservativeStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationConservativeStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.conservativeRasterizationMode, true)
	view.setFloat32(24+(i*32), obj.extraPrimitiveOverestimationSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.conservativeRasterizationMode, true)
	view.setFloat32(24, obj.extraPrimitiveOverestimationSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationConservativeStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		conservativeRasterizationMode: read.u32(ptr, 20),
		extraPrimitiveOverestimationSize: null
	};
	return obj;
}


export function VkPhysicalDeviceDepthClipEnableFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDepthClipEnableFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.depthClipEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.depthClipEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDepthClipEnableFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		depthClipEnable: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineRasterizationDepthClipStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationDepthClipStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.depthClipEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.depthClipEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationDepthClipStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		depthClipEnable: read.u32(ptr, 20)
	};
	return obj;
}


export function VkXYColorEXT_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkXYColorEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*8), obj.x, true);
	view.setFloat32(4+(i*8), obj.y, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.x, true);
	view.setFloat32(4, obj.y, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkXYColorEXT_from_C(ptr){
	const obj = {
		x: null,
		y: null
	};
	return obj;
}


export function VkHdrMetadataEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkHdrMetadataEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	if (obj.displayPrimaryRed){
	view.setFloat32(16+(i*64), obj.displayPrimaryRed.x, true);
	view.setFloat32(20+(i*64), obj.displayPrimaryRed.y, true);
	}
	if (obj.displayPrimaryGreen){
	view.setFloat32(24+(i*64), obj.displayPrimaryGreen.x, true);
	view.setFloat32(28+(i*64), obj.displayPrimaryGreen.y, true);
	}
	if (obj.displayPrimaryBlue){
	view.setFloat32(32+(i*64), obj.displayPrimaryBlue.x, true);
	view.setFloat32(36+(i*64), obj.displayPrimaryBlue.y, true);
	}
	if (obj.whitePoint){
	view.setFloat32(40+(i*64), obj.whitePoint.x, true);
	view.setFloat32(44+(i*64), obj.whitePoint.y, true);
	}
	view.setFloat32(48+(i*64), obj.maxLuminance, true);
	view.setFloat32(52+(i*64), obj.minLuminance, true);
	view.setFloat32(56+(i*64), obj.maxContentLightLevel, true);
	view.setFloat32(60+(i*64), obj.maxFrameAverageLightLevel, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.displayPrimaryRed){
	view.setFloat32(16, obj.displayPrimaryRed.x, true);
	view.setFloat32(20, obj.displayPrimaryRed.y, true);
	}
	if (obj.displayPrimaryGreen){
	view.setFloat32(24, obj.displayPrimaryGreen.x, true);
	view.setFloat32(28, obj.displayPrimaryGreen.y, true);
	}
	if (obj.displayPrimaryBlue){
	view.setFloat32(32, obj.displayPrimaryBlue.x, true);
	view.setFloat32(36, obj.displayPrimaryBlue.y, true);
	}
	if (obj.whitePoint){
	view.setFloat32(40, obj.whitePoint.x, true);
	view.setFloat32(44, obj.whitePoint.y, true);
	}
	view.setFloat32(48, obj.maxLuminance, true);
	view.setFloat32(52, obj.minLuminance, true);
	view.setFloat32(56, obj.maxContentLightLevel, true);
	view.setFloat32(60, obj.maxFrameAverageLightLevel, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkHdrMetadataEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		displayPrimaryRed: null,
		displayPrimaryGreen: null,
		displayPrimaryBlue: null,
		whitePoint: null,
		maxLuminance: null,
		minLuminance: null,
		maxContentLightLevel: null,
		maxFrameAverageLightLevel: null
	};
	return obj;
}

export const VkDebugUtilsMessageSeverityFlagBitsEXT = {
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: 1,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: 16,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: 256,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: 4096,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT",
		"16": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT",
		"256": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT",
		"4096": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT",
		"2147483647": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT",
}};
export const VkDebugUtilsMessageTypeFlagBitsEXT = {
	VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: 1,
	VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: 2,
	VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: 4,
	VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT",
		"2": "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT",
		"4": "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT",
		"2147483647": "VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkDebugUtilsLabelEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDebugUtilsLabelEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.pLabelName||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.pLabelName||0), true);


	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pLabelName||0), true);
	view.setBigUint64(16, BigInt(obj.pLabelName||0), true);


	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugUtilsLabelEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pLabelName: read.ptr(ptr),
		color: null
	};
	return obj;
}


export function VkDebugUtilsObjectNameInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDebugUtilsObjectNameInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.objectType, true)
	view.setUint64(24+(i*40), obj.objectHandle, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pObjectName||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pObjectName||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.objectType, true)
	view.setUint64(24, obj.objectHandle, true);

	view.setBigUint64(32, BigInt(obj.pObjectName||0), true);
	view.setBigUint64(32, BigInt(obj.pObjectName||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugUtilsObjectNameInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		objectType: read.u32(ptr, 16),
		objectHandle: null,
		pObjectName: read.ptr(ptr)
	};
	return obj;
}


export function VkDebugUtilsMessengerCallbackDataEXT_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkDebugUtilsMessengerCallbackDataEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*96), obj.flags, true);

	view.setBigUint64(24+(i*96), BigInt(obj.pMessageIdName||0), true);
	view.setBigUint64(24+(i*96), BigInt(obj.pMessageIdName||0), true);

	view.setInt32(32+(i*96), obj.messageIdNumber, true);

	view.setBigUint64(40+(i*96), BigInt(obj.pMessage||0), true);
	view.setBigUint64(40+(i*96), BigInt(obj.pMessage||0), true);

	view.setUint32(48+(i*96), obj.queueLabelCount, true);
	if (obj.pQueueLabels){
		const wrapped = VkDebugUtilsLabelEXT_to_C(obj.pQueueLabels, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*96), BigInt(obj.pQueueLabels||0), true);
	}
	view.setUint32(64+(i*96), obj.cmdBufLabelCount, true);
	if (obj.pCmdBufLabels){
		const wrapped = VkDebugUtilsLabelEXT_to_C(obj.pCmdBufLabels, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72+(i*96), BigInt(obj.pCmdBufLabels||0), true);
	}
	view.setUint32(80+(i*96), obj.objectCount, true);
	if (obj.pObjects){
		const wrapped = VkDebugUtilsObjectNameInfoEXT_to_C(obj.pObjects, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(88+(i*96), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(88+(i*96), BigInt(obj.pObjects||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.pMessageIdName||0), true);
	view.setBigUint64(24, BigInt(obj.pMessageIdName||0), true);

	view.setInt32(32, obj.messageIdNumber, true);

	view.setBigUint64(40, BigInt(obj.pMessage||0), true);
	view.setBigUint64(40, BigInt(obj.pMessage||0), true);

	view.setUint32(48, obj.queueLabelCount, true);
	if (obj.pQueueLabels){
		const wrapped = VkDebugUtilsLabelEXT_to_C(obj.pQueueLabels, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pQueueLabels||0), true);
	}
	view.setUint32(64, obj.cmdBufLabelCount, true);
	if (obj.pCmdBufLabels){
		const wrapped = VkDebugUtilsLabelEXT_to_C(obj.pCmdBufLabels, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72, BigInt(obj.pCmdBufLabels||0), true);
	}
	view.setUint32(80, obj.objectCount, true);
	if (obj.pObjects){
		const wrapped = VkDebugUtilsObjectNameInfoEXT_to_C(obj.pObjects, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(88, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(88, BigInt(obj.pObjects||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugUtilsMessengerCallbackDataEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pMessageIdName: read.ptr(ptr),
		messageIdNumber: null,
		pMessage: read.ptr(ptr),
		queueLabelCount: read.u32(ptr, 48),
		pQueueLabels: VkDebugUtilsLabelEXT_from_C(read.ptr(ptr)),
		cmdBufLabelCount: read.u32(ptr, 64),
		pCmdBufLabels: VkDebugUtilsLabelEXT_from_C(read.ptr(ptr)),
		objectCount: read.u32(ptr, 80),
		pObjects: VkDebugUtilsObjectNameInfoEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkDebugUtilsMessengerCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkDebugUtilsMessengerCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.flags, true);
	view.setUint32(20+(i*48), obj.messageSeverity, true);
	view.setUint32(24+(i*48), obj.messageType, true);

	view.setBigUint64(32+(i*48), BigInt(obj.pfnUserCallback||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.pfnUserCallback||0), true);


	view.setBigUint64(40+(i*48), BigInt(obj.pUserData||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pUserData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.messageSeverity, true);
	view.setUint32(24, obj.messageType, true);

	view.setBigUint64(32, BigInt(obj.pfnUserCallback||0), true);
	view.setBigUint64(32, BigInt(obj.pfnUserCallback||0), true);


	view.setBigUint64(40, BigInt(obj.pUserData||0), true);
	view.setBigUint64(40, BigInt(obj.pUserData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugUtilsMessengerCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		messageSeverity: read.u32(ptr, 20),
		messageType: read.u32(ptr, 24),
		pfnUserCallback: undefined,
		pUserData: read.ptr(ptr)
	};
	return obj;
}


export function VkDebugUtilsObjectTagInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkDebugUtilsObjectTagInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.objectType, true)
	view.setUint64(24+(i*56), obj.objectHandle, true);
	view.setUint64(32+(i*56), obj.tagName, true);

	view.setBigUint64(40+(i*56), BigInt(obj.tagSize||0), true);
	view.setBigUint64(40+(i*56), BigInt(obj.tagSize||0), true);


	view.setBigUint64(48+(i*56), BigInt(obj.pTag||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pTag||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.objectType, true)
	view.setUint64(24, obj.objectHandle, true);
	view.setUint64(32, obj.tagName, true);

	view.setBigUint64(40, BigInt(obj.tagSize||0), true);
	view.setBigUint64(40, BigInt(obj.tagSize||0), true);


	view.setBigUint64(48, BigInt(obj.pTag||0), true);
	view.setBigUint64(48, BigInt(obj.pTag||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDebugUtilsObjectTagInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		objectType: read.u32(ptr, 16),
		objectHandle: null,
		tagName: null,
		tagSize: undefined,
		pTag: read.ptr(ptr)
	};
	return obj;
}


export function VkSampleLocationEXT_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkSampleLocationEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*8), obj.x, true);
	view.setFloat32(4+(i*8), obj.y, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.x, true);
	view.setFloat32(4, obj.y, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSampleLocationEXT_from_C(ptr){
	const obj = {
		x: null,
		y: null
	};
	return obj;
}


export function VkSampleLocationsInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkSampleLocationsInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.sampleLocationsPerPixel, true)
	if (obj.sampleLocationGridSize){
	view.setUint32(20+(i*40), obj.sampleLocationGridSize.width, true);
	view.setUint32(24+(i*40), obj.sampleLocationGridSize.height, true);
	}
	view.setUint32(28+(i*40), obj.sampleLocationsCount, true);
	if (obj.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pSampleLocations||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sampleLocationsPerPixel, true)
	if (obj.sampleLocationGridSize){
	view.setUint32(20, obj.sampleLocationGridSize.width, true);
	view.setUint32(24, obj.sampleLocationGridSize.height, true);
	}
	view.setUint32(28, obj.sampleLocationsCount, true);
	if (obj.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pSampleLocations||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSampleLocationsInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sampleLocationsPerPixel: read.u32(ptr, 16),
		sampleLocationGridSize: null,
		sampleLocationsCount: read.u32(ptr, 28),
		pSampleLocations: VkSampleLocationEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkAttachmentSampleLocationsEXT_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkAttachmentSampleLocationsEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.attachmentIndex, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(8+(i*48), obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(16+(i*48), BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(24+(i*48), obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(28+(i*48), obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(32+(i*48), obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(36+(i*48), obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.attachmentIndex, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(8, obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(16, BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(16, BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(24, obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(28, obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(32, obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(36, obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAttachmentSampleLocationsEXT_from_C(ptr){
	const obj = {
		attachmentIndex: read.u32(ptr, 0),
		sampleLocationsInfo: null
	};
	return obj;
}


export function VkSubpassSampleLocationsEXT_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkSubpassSampleLocationsEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.subpassIndex, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(8+(i*48), obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(16+(i*48), BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(16+(i*48), BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(24+(i*48), obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(28+(i*48), obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(32+(i*48), obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(36+(i*48), obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.subpassIndex, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(8, obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(16, BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(16, BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(24, obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(28, obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(32, obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(36, obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassSampleLocationsEXT_from_C(ptr){
	const obj = {
		subpassIndex: read.u32(ptr, 0),
		sampleLocationsInfo: null
	};
	return obj;
}


export function VkRenderPassSampleLocationsBeginInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkRenderPassSampleLocationsBeginInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.attachmentInitialSampleLocationsCount, true);
	if (obj.pAttachmentInitialSampleLocations){
		const wrapped = VkAttachmentSampleLocationsEXT_to_C(obj.pAttachmentInitialSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*48), BigInt(obj.pAttachmentInitialSampleLocations||0), true);
	}
	view.setUint32(32+(i*48), obj.postSubpassSampleLocationsCount, true);
	if (obj.pPostSubpassSampleLocations){
		const wrapped = VkSubpassSampleLocationsEXT_to_C(obj.pPostSubpassSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pPostSubpassSampleLocations||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachmentInitialSampleLocationsCount, true);
	if (obj.pAttachmentInitialSampleLocations){
		const wrapped = VkAttachmentSampleLocationsEXT_to_C(obj.pAttachmentInitialSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pAttachmentInitialSampleLocations||0), true);
	}
	view.setUint32(32, obj.postSubpassSampleLocationsCount, true);
	if (obj.pPostSubpassSampleLocations){
		const wrapped = VkSubpassSampleLocationsEXT_to_C(obj.pPostSubpassSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pPostSubpassSampleLocations||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassSampleLocationsBeginInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachmentInitialSampleLocationsCount: read.u32(ptr, 16),
		pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT_from_C(read.ptr(ptr)),
		postSubpassSampleLocationsCount: read.u32(ptr, 32),
		pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPipelineSampleLocationsStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPipelineSampleLocationsStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.sampleLocationsEnable, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(24+(i*64), obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(32+(i*64), BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(32+(i*64), BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(40+(i*64), obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(44+(i*64), obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(48+(i*64), obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(52+(i*64), obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*64), BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sampleLocationsEnable, true);
	if (obj.sampleLocationsInfo){
	view.setUint32(24, obj.sampleLocationsInfo.sType, true)

	view.setBigUint64(32, BigInt(obj.sampleLocationsInfo.pNext||0), true);
	view.setBigUint64(32, BigInt(obj.sampleLocationsInfo.pNext||0), true);

	view.setUint32(40, obj.sampleLocationsInfo.sampleLocationsPerPixel, true)
	if (obj.sampleLocationsInfo.sampleLocationGridSize){
	view.setUint32(44, obj.sampleLocationsInfo.sampleLocationGridSize.width, true);
	view.setUint32(48, obj.sampleLocationsInfo.sampleLocationGridSize.height, true);
	}
	view.setUint32(52, obj.sampleLocationsInfo.sampleLocationsCount, true);
	if (obj.sampleLocationsInfo.pSampleLocations){
		const wrapped = VkSampleLocationEXT_to_C(obj.sampleLocationsInfo.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.sampleLocationsInfo.pSampleLocations||0), true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineSampleLocationsStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sampleLocationsEnable: read.u32(ptr, 16),
		sampleLocationsInfo: null
	};
	return obj;
}


export function VkPhysicalDeviceSampleLocationsPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSampleLocationsPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.sampleLocationSampleCounts, true);
	if (obj.maxSampleLocationGridSize){
	view.setUint32(20+(i*40), obj.maxSampleLocationGridSize.width, true);
	view.setUint32(24+(i*40), obj.maxSampleLocationGridSize.height, true);
	}

	view.setUint32(32+(i*40), obj.sampleLocationSubPixelBits, true);
	view.setUint32(36+(i*40), obj.variableSampleLocations, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sampleLocationSampleCounts, true);
	if (obj.maxSampleLocationGridSize){
	view.setUint32(20, obj.maxSampleLocationGridSize.width, true);
	view.setUint32(24, obj.maxSampleLocationGridSize.height, true);
	}

	view.setUint32(32, obj.sampleLocationSubPixelBits, true);
	view.setUint32(36, obj.variableSampleLocations, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSampleLocationsPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sampleLocationSampleCounts: read.u32(ptr, 16),
		maxSampleLocationGridSize: null,
		sampleLocationCoordinateRange: null,
		sampleLocationSubPixelBits: read.u32(ptr, 32),
		variableSampleLocations: read.u32(ptr, 36)
	};
	return obj;
}


export function VkMultisamplePropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMultisamplePropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.maxSampleLocationGridSize){
	view.setUint32(16+(i*24), obj.maxSampleLocationGridSize.width, true);
	view.setUint32(20+(i*24), obj.maxSampleLocationGridSize.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.maxSampleLocationGridSize){
	view.setUint32(16, obj.maxSampleLocationGridSize.width, true);
	view.setUint32(20, obj.maxSampleLocationGridSize.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMultisamplePropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxSampleLocationGridSize: null
	};
	return obj;
}

export const VkBlendOverlapEXT = {
	VK_BLEND_OVERLAP_UNCORRELATED_EXT: 0,
	VK_BLEND_OVERLAP_DISJOINT_EXT: 1,
	VK_BLEND_OVERLAP_CONJOINT_EXT: 2,
	VK_BLEND_OVERLAP_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_BLEND_OVERLAP_UNCORRELATED_EXT",
		"1": "VK_BLEND_OVERLAP_DISJOINT_EXT",
		"2": "VK_BLEND_OVERLAP_CONJOINT_EXT",
		"2147483647": "VK_BLEND_OVERLAP_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.advancedBlendCoherentOperations, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.advancedBlendCoherentOperations, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		advancedBlendCoherentOperations: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.advancedBlendMaxColorAttachments, true);
	view.setUint32(20+(i*40), obj.advancedBlendIndependentBlend, true);
	view.setUint32(24+(i*40), obj.advancedBlendNonPremultipliedSrcColor, true);
	view.setUint32(28+(i*40), obj.advancedBlendNonPremultipliedDstColor, true);
	view.setUint32(32+(i*40), obj.advancedBlendCorrelatedOverlap, true);
	view.setUint32(36+(i*40), obj.advancedBlendAllOperations, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.advancedBlendMaxColorAttachments, true);
	view.setUint32(20, obj.advancedBlendIndependentBlend, true);
	view.setUint32(24, obj.advancedBlendNonPremultipliedSrcColor, true);
	view.setUint32(28, obj.advancedBlendNonPremultipliedDstColor, true);
	view.setUint32(32, obj.advancedBlendCorrelatedOverlap, true);
	view.setUint32(36, obj.advancedBlendAllOperations, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		advancedBlendMaxColorAttachments: read.u32(ptr, 16),
		advancedBlendIndependentBlend: read.u32(ptr, 20),
		advancedBlendNonPremultipliedSrcColor: read.u32(ptr, 24),
		advancedBlendNonPremultipliedDstColor: read.u32(ptr, 28),
		advancedBlendCorrelatedOverlap: read.u32(ptr, 32),
		advancedBlendAllOperations: read.u32(ptr, 36)
	};
	return obj;
}


export function VkPipelineColorBlendAdvancedStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineColorBlendAdvancedStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.srcPremultiplied, true);
	view.setUint32(20+(i*32), obj.dstPremultiplied, true);
	view.setUint32(24+(i*32), obj.blendOverlap, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.srcPremultiplied, true);
	view.setUint32(20, obj.dstPremultiplied, true);
	view.setUint32(24, obj.blendOverlap, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineColorBlendAdvancedStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		srcPremultiplied: read.u32(ptr, 16),
		dstPremultiplied: read.u32(ptr, 20),
		blendOverlap: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPipelineCoverageToColorStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineCoverageToColorStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.coverageToColorEnable, true);
	view.setUint32(24+(i*32), obj.coverageToColorLocation, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.coverageToColorEnable, true);
	view.setUint32(24, obj.coverageToColorLocation, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCoverageToColorStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		coverageToColorEnable: read.u32(ptr, 20),
		coverageToColorLocation: read.u32(ptr, 24)
	};
	return obj;
}

export const VkCoverageModulationModeNV = {
	VK_COVERAGE_MODULATION_MODE_NONE_NV: 0,
	VK_COVERAGE_MODULATION_MODE_RGB_NV: 1,
	VK_COVERAGE_MODULATION_MODE_ALPHA_NV: 2,
	VK_COVERAGE_MODULATION_MODE_RGBA_NV: 3,
	VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_COVERAGE_MODULATION_MODE_NONE_NV",
		"1": "VK_COVERAGE_MODULATION_MODE_RGB_NV",
		"2": "VK_COVERAGE_MODULATION_MODE_ALPHA_NV",
		"3": "VK_COVERAGE_MODULATION_MODE_RGBA_NV",
		"2147483647": "VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV",
}};

export function VkPipelineCoverageModulationStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPipelineCoverageModulationStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);
	view.setUint32(20+(i*40), obj.coverageModulationMode, true)
	view.setUint32(24+(i*40), obj.coverageModulationTableEnable, true);
	view.setUint32(28+(i*40), obj.coverageModulationTableCount, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pCoverageModulationTable||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pCoverageModulationTable||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.coverageModulationMode, true)
	view.setUint32(24, obj.coverageModulationTableEnable, true);
	view.setUint32(28, obj.coverageModulationTableCount, true);

	view.setBigUint64(32, BigInt(obj.pCoverageModulationTable||0), true);
	view.setBigUint64(32, BigInt(obj.pCoverageModulationTable||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCoverageModulationStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		coverageModulationMode: read.u32(ptr, 20),
		coverageModulationTableEnable: read.u32(ptr, 24),
		coverageModulationTableCount: read.u32(ptr, 28),
		pCoverageModulationTable: undefined
	};
	return obj;
}


export function VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderSMCount, true);
	view.setUint32(20+(i*24), obj.shaderWarpsPerSM, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderSMCount, true);
	view.setUint32(20, obj.shaderWarpsPerSM, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderSMBuiltinsPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderSMCount: read.u32(ptr, 16),
		shaderWarpsPerSM: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderSMBuiltins, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderSMBuiltins, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderSMBuiltinsFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderSMBuiltins: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDrmFormatModifierPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkDrmFormatModifierPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*16), obj.drmFormatModifier, true);
	view.setUint32(8+(i*16), obj.drmFormatModifierPlaneCount, true);
	view.setUint32(12+(i*16), obj.drmFormatModifierTilingFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.drmFormatModifier, true);
	view.setUint32(8, obj.drmFormatModifierPlaneCount, true);
	view.setUint32(12, obj.drmFormatModifierTilingFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrmFormatModifierPropertiesEXT_from_C(ptr){
	const obj = {
		drmFormatModifier: null,
		drmFormatModifierPlaneCount: read.u32(ptr, 8),
		drmFormatModifierTilingFeatures: read.u32(ptr, 12)
	};
	return obj;
}


export function VkDrmFormatModifierPropertiesListEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDrmFormatModifierPropertiesListEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.drmFormatModifierCount, true);
	if (obj.pDrmFormatModifierProperties){
		const wrapped = VkDrmFormatModifierPropertiesEXT_to_C(obj.pDrmFormatModifierProperties, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pDrmFormatModifierProperties||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.drmFormatModifierCount, true);
	if (obj.pDrmFormatModifierProperties){
		const wrapped = VkDrmFormatModifierPropertiesEXT_to_C(obj.pDrmFormatModifierProperties, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pDrmFormatModifierProperties||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrmFormatModifierPropertiesListEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifierCount: read.u32(ptr, 16),
		pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceImageDrmFormatModifierInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageDrmFormatModifierInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*40), obj.drmFormatModifier, true);
	view.setUint32(24+(i*40), obj.sharingMode, true)
	view.setUint32(28+(i*40), obj.queueFamilyIndexCount, true);

	view.setBigUint64(32+(i*40), BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pQueueFamilyIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.drmFormatModifier, true);
	view.setUint32(24, obj.sharingMode, true)
	view.setUint32(28, obj.queueFamilyIndexCount, true);

	view.setBigUint64(32, BigInt(obj.pQueueFamilyIndices||0), true);
	view.setBigUint64(32, BigInt(obj.pQueueFamilyIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageDrmFormatModifierInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifier: null,
		sharingMode: read.u32(ptr, 24),
		queueFamilyIndexCount: read.u32(ptr, 28),
		pQueueFamilyIndices: undefined
	};
	return obj;
}


export function VkImageDrmFormatModifierListCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageDrmFormatModifierListCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.drmFormatModifierCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pDrmFormatModifiers||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pDrmFormatModifiers||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.drmFormatModifierCount, true);

	view.setBigUint64(24, BigInt(obj.pDrmFormatModifiers||0), true);
	view.setBigUint64(24, BigInt(obj.pDrmFormatModifiers||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageDrmFormatModifierListCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifierCount: read.u32(ptr, 16),
		pDrmFormatModifiers: undefined
	};
	return obj;
}


export function VkImageDrmFormatModifierExplicitCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkImageDrmFormatModifierExplicitCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*40), obj.drmFormatModifier, true);
	view.setUint32(24+(i*40), obj.drmFormatModifierPlaneCount, true);
	if (obj.pPlaneLayouts){
		const wrapped = VkSubresourceLayout_to_C(obj.pPlaneLayouts, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pPlaneLayouts||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.drmFormatModifier, true);
	view.setUint32(24, obj.drmFormatModifierPlaneCount, true);
	if (obj.pPlaneLayouts){
		const wrapped = VkSubresourceLayout_to_C(obj.pPlaneLayouts, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pPlaneLayouts||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageDrmFormatModifierExplicitCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifier: null,
		drmFormatModifierPlaneCount: read.u32(ptr, 24),
		pPlaneLayouts: VkSubresourceLayout_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkImageDrmFormatModifierPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageDrmFormatModifierPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.drmFormatModifier, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.drmFormatModifier, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageDrmFormatModifierPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifier: null
	};
	return obj;
}


export function VkDrmFormatModifierProperties2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDrmFormatModifierProperties2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*24), obj.drmFormatModifier, true);
	view.setUint32(8+(i*24), obj.drmFormatModifierPlaneCount, true);
	view.setUint64(16+(i*24), obj.drmFormatModifierTilingFeatures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.drmFormatModifier, true);
	view.setUint32(8, obj.drmFormatModifierPlaneCount, true);
	view.setUint64(16, obj.drmFormatModifierTilingFeatures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrmFormatModifierProperties2EXT_from_C(ptr){
	const obj = {
		drmFormatModifier: null,
		drmFormatModifierPlaneCount: read.u32(ptr, 8),
		drmFormatModifierTilingFeatures: null
	};
	return obj;
}


export function VkDrmFormatModifierPropertiesList2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDrmFormatModifierPropertiesList2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.drmFormatModifierCount, true);
	if (obj.pDrmFormatModifierProperties){
		const wrapped = VkDrmFormatModifierProperties2EXT_to_C(obj.pDrmFormatModifierProperties, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pDrmFormatModifierProperties||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.drmFormatModifierCount, true);
	if (obj.pDrmFormatModifierProperties){
		const wrapped = VkDrmFormatModifierProperties2EXT_to_C(obj.pDrmFormatModifierProperties, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pDrmFormatModifierProperties||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrmFormatModifierPropertiesList2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		drmFormatModifierCount: read.u32(ptr, 16),
		pDrmFormatModifierProperties: VkDrmFormatModifierProperties2EXT_from_C(read.ptr(ptr))
	};
	return obj;
}

export const VkValidationCacheHeaderVersionEXT = {
	VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: 1,
	VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT",
		"2147483647": "VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT",
}};

export function VkValidationCacheCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkValidationCacheCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);

	view.setBigUint64(24+(i*40), BigInt(obj.initialDataSize||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.initialDataSize||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pInitialData||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pInitialData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.initialDataSize||0), true);
	view.setBigUint64(24, BigInt(obj.initialDataSize||0), true);


	view.setBigUint64(32, BigInt(obj.pInitialData||0), true);
	view.setBigUint64(32, BigInt(obj.pInitialData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkValidationCacheCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		initialDataSize: undefined,
		pInitialData: read.ptr(ptr)
	};
	return obj;
}


export function VkShaderModuleValidationCacheCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkShaderModuleValidationCacheCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.validationCache||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.validationCache||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.validationCache||0), true);
	view.setBigUint64(16, BigInt(obj.validationCache||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShaderModuleValidationCacheCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		validationCache: undefined
	};
	return obj;
}

export const VkShadingRatePaletteEntryNV = {
	VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: 0,
	VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: 1,
	VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: 2,
	VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: 3,
	VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: 4,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: 5,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: 6,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: 7,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: 8,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: 9,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: 10,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: 11,
	VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV",
		"1": "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV",
		"2": "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV",
		"3": "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV",
		"4": "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV",
		"5": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV",
		"6": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV",
		"7": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV",
		"8": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV",
		"9": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV",
		"10": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV",
		"11": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV",
		"2147483647": "VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV",
}};
export const VkCoarseSampleOrderTypeNV = {
	VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: 0,
	VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: 1,
	VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: 2,
	VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: 3,
	VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV",
		"1": "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV",
		"2": "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV",
		"3": "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV",
		"2147483647": "VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV",
}};

export function VkShadingRatePaletteNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkShadingRatePaletteNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.shadingRatePaletteEntryCount, true);

	view.setBigUint64(8+(i*16), BigInt(obj.pShadingRatePaletteEntries||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.pShadingRatePaletteEntries||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.shadingRatePaletteEntryCount, true);

	view.setBigUint64(8, BigInt(obj.pShadingRatePaletteEntries||0), true);
	view.setBigUint64(8, BigInt(obj.pShadingRatePaletteEntries||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShadingRatePaletteNV_from_C(ptr){
	const obj = {
		shadingRatePaletteEntryCount: read.u32(ptr, 0),
		pShadingRatePaletteEntries: undefined
	};
	return obj;
}


export function VkPipelineViewportShadingRateImageStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineViewportShadingRateImageStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.shadingRateImageEnable, true);
	view.setUint32(20+(i*32), obj.viewportCount, true);
	if (obj.pShadingRatePalettes){
		const wrapped = VkShadingRatePaletteNV_to_C(obj.pShadingRatePalettes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pShadingRatePalettes||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shadingRateImageEnable, true);
	view.setUint32(20, obj.viewportCount, true);
	if (obj.pShadingRatePalettes){
		const wrapped = VkShadingRatePaletteNV_to_C(obj.pShadingRatePalettes, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pShadingRatePalettes||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportShadingRateImageStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shadingRateImageEnable: read.u32(ptr, 16),
		viewportCount: read.u32(ptr, 20),
		pShadingRatePalettes: VkShadingRatePaletteNV_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceShadingRateImageFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShadingRateImageFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shadingRateImage, true);
	view.setUint32(20+(i*24), obj.shadingRateCoarseSampleOrder, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shadingRateImage, true);
	view.setUint32(20, obj.shadingRateCoarseSampleOrder, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShadingRateImageFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shadingRateImage: read.u32(ptr, 16),
		shadingRateCoarseSampleOrder: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceShadingRateImagePropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShadingRateImagePropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.shadingRateTexelSize){
	view.setUint32(16+(i*32), obj.shadingRateTexelSize.width, true);
	view.setUint32(20+(i*32), obj.shadingRateTexelSize.height, true);
	}
	view.setUint32(24+(i*32), obj.shadingRatePaletteSize, true);
	view.setUint32(28+(i*32), obj.shadingRateMaxCoarseSamples, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.shadingRateTexelSize){
	view.setUint32(16, obj.shadingRateTexelSize.width, true);
	view.setUint32(20, obj.shadingRateTexelSize.height, true);
	}
	view.setUint32(24, obj.shadingRatePaletteSize, true);
	view.setUint32(28, obj.shadingRateMaxCoarseSamples, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShadingRateImagePropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shadingRateTexelSize: null,
		shadingRatePaletteSize: read.u32(ptr, 24),
		shadingRateMaxCoarseSamples: read.u32(ptr, 28)
	};
	return obj;
}


export function VkCoarseSampleLocationNV_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkCoarseSampleLocationNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.pixelX, true);
	view.setUint32(4+(i*12), obj.pixelY, true);
	view.setUint32(8+(i*12), obj.sample, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.pixelX, true);
	view.setUint32(4, obj.pixelY, true);
	view.setUint32(8, obj.sample, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCoarseSampleLocationNV_from_C(ptr){
	const obj = {
		pixelX: read.u32(ptr, 0),
		pixelY: read.u32(ptr, 4),
		sample: read.u32(ptr, 8)
	};
	return obj;
}


export function VkCoarseSampleOrderCustomNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkCoarseSampleOrderCustomNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.shadingRate, true)
	view.setUint32(4+(i*24), obj.sampleCount, true);
	view.setUint32(8+(i*24), obj.sampleLocationCount, true);
	if (obj.pSampleLocations){
		const wrapped = VkCoarseSampleLocationNV_to_C(obj.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pSampleLocations||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.shadingRate, true)
	view.setUint32(4, obj.sampleCount, true);
	view.setUint32(8, obj.sampleLocationCount, true);
	if (obj.pSampleLocations){
		const wrapped = VkCoarseSampleLocationNV_to_C(obj.pSampleLocations, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pSampleLocations||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCoarseSampleOrderCustomNV_from_C(ptr){
	const obj = {
		shadingRate: read.u32(ptr, 0),
		sampleCount: read.u32(ptr, 4),
		sampleLocationCount: read.u32(ptr, 8),
		pSampleLocations: VkCoarseSampleLocationNV_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.sampleOrderType, true)
	view.setUint32(20+(i*32), obj.customSampleOrderCount, true);
	if (obj.pCustomSampleOrders){
		const wrapped = VkCoarseSampleOrderCustomNV_to_C(obj.pCustomSampleOrders, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pCustomSampleOrders||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.sampleOrderType, true)
	view.setUint32(20, obj.customSampleOrderCount, true);
	if (obj.pCustomSampleOrders){
		const wrapped = VkCoarseSampleOrderCustomNV_to_C(obj.pCustomSampleOrders, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pCustomSampleOrders||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportCoarseSampleOrderStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		sampleOrderType: read.u32(ptr, 16),
		customSampleOrderCount: read.u32(ptr, 20),
		pCustomSampleOrders: VkCoarseSampleOrderCustomNV_from_C(read.ptr(ptr))
	};
	return obj;
}

export const VkRayTracingShaderGroupTypeKHR = {
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: 0,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: 1,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: 2,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: NaN,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: NaN,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: NaN,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR",
		"1": "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR",
		"2": "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR",
		"NaN": "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV",
		"NaN": "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV",
		"NaN": "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV",
		"2147483647": "VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR",
}};
export const VkGeometryTypeKHR = {
	VK_GEOMETRY_TYPE_TRIANGLES_KHR: 0,
	VK_GEOMETRY_TYPE_AABBS_KHR: 1,
	VK_GEOMETRY_TYPE_INSTANCES_KHR: 2,
	VK_GEOMETRY_TYPE_TRIANGLES_NV: NaN,
	VK_GEOMETRY_TYPE_AABBS_NV: NaN,
	VK_GEOMETRY_TYPE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_GEOMETRY_TYPE_TRIANGLES_KHR",
		"1": "VK_GEOMETRY_TYPE_AABBS_KHR",
		"2": "VK_GEOMETRY_TYPE_INSTANCES_KHR",
		"NaN": "VK_GEOMETRY_TYPE_TRIANGLES_NV",
		"NaN": "VK_GEOMETRY_TYPE_AABBS_NV",
		"2147483647": "VK_GEOMETRY_TYPE_MAX_ENUM_KHR",
}};
export const VkAccelerationStructureTypeKHR = {
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: 0,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: 1,
	VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: 2,
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: NaN,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: NaN,
	VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR",
		"1": "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR",
		"2": "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR",
		"NaN": "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV",
		"NaN": "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV",
		"2147483647": "VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR",
}};
export const VkCopyAccelerationStructureModeKHR = {
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: 0,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: 1,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: 2,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: 3,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: NaN,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: NaN,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR",
		"1": "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR",
		"2": "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR",
		"3": "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR",
		"NaN": "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV",
		"NaN": "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV",
		"2147483647": "VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR",
}};
export const VkAccelerationStructureMemoryRequirementsTypeNV = {
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: 0,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: 1,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: 2,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV",
		"1": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV",
		"2": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV",
		"2147483647": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV",
}};
export const VkGeometryFlagBitsKHR = {
	VK_GEOMETRY_OPAQUE_BIT_KHR: 1,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: 2,
	VK_GEOMETRY_OPAQUE_BIT_NV: NaN,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: NaN,
	VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_GEOMETRY_OPAQUE_BIT_KHR",
		"2": "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR",
		"NaN": "VK_GEOMETRY_OPAQUE_BIT_NV",
		"NaN": "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV",
		"2147483647": "VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR",
}};
export const VkGeometryInstanceFlagBitsKHR = {
	VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: 1,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR: 2,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: 4,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: 8,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: NaN,
	VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: NaN,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: NaN,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: NaN,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: NaN,
	VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR",
		"2": "VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR",
		"4": "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR",
		"8": "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR",
		"NaN": "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR",
		"NaN": "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV",
		"NaN": "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV",
		"NaN": "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV",
		"NaN": "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV",
		"2147483647": "VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR",
}};
export const VkBuildAccelerationStructureFlagBitsKHR = {
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: 1,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: 2,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: 4,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: 8,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: 16,
	VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV: 32,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: NaN,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: NaN,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: NaN,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: NaN,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: NaN,
	VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR",
		"2": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR",
		"4": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR",
		"8": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR",
		"16": "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR",
		"32": "VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV",
		"NaN": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV",
		"NaN": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV",
		"NaN": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV",
		"NaN": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV",
		"NaN": "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV",
		"2147483647": "VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkRayTracingShaderGroupCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkRayTracingShaderGroupCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.type, true)
	view.setUint32(20+(i*40), obj.generalShader, true);
	view.setUint32(24+(i*40), obj.closestHitShader, true);
	view.setUint32(28+(i*40), obj.anyHitShader, true);
	view.setUint32(32+(i*40), obj.intersectionShader, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	view.setUint32(20, obj.generalShader, true);
	view.setUint32(24, obj.closestHitShader, true);
	view.setUint32(28, obj.anyHitShader, true);
	view.setUint32(32, obj.intersectionShader, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRayTracingShaderGroupCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		generalShader: read.u32(ptr, 20),
		closestHitShader: read.u32(ptr, 24),
		anyHitShader: read.u32(ptr, 28),
		intersectionShader: read.u32(ptr, 32)
	};
	return obj;
}


export function VkRayTracingPipelineCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkRayTracingPipelineCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.flags, true);
	view.setUint32(20+(i*80), obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*80), BigInt(obj.pStages||0), true);
	}
	view.setUint32(32+(i*80), obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkRayTracingShaderGroupCreateInfoNV_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*80), BigInt(obj.pGroups||0), true);
	}
	view.setUint32(48+(i*80), obj.maxRecursionDepth, true);

	view.setBigUint64(56+(i*80), BigInt(obj.layout||0), true);
	view.setBigUint64(56+(i*80), BigInt(obj.layout||0), true);


	view.setBigUint64(64+(i*80), BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(64+(i*80), BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(72+(i*80), obj.basePipelineIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pStages||0), true);
	}
	view.setUint32(32, obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkRayTracingShaderGroupCreateInfoNV_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pGroups||0), true);
	}
	view.setUint32(48, obj.maxRecursionDepth, true);

	view.setBigUint64(56, BigInt(obj.layout||0), true);
	view.setBigUint64(56, BigInt(obj.layout||0), true);


	view.setBigUint64(64, BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(64, BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(72, obj.basePipelineIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRayTracingPipelineCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		stageCount: read.u32(ptr, 20),
		pStages: VkPipelineShaderStageCreateInfo_from_C(read.ptr(ptr)),
		groupCount: read.u32(ptr, 32),
		pGroups: VkRayTracingShaderGroupCreateInfoNV_from_C(read.ptr(ptr)),
		maxRecursionDepth: read.u32(ptr, 48),
		layout: undefined,
		basePipelineHandle: undefined,
		basePipelineIndex: null
	};
	return obj;
}


export function VkGeometryTrianglesNV_alloc_array(size){
	const buffer = new ArrayBuffer(96*size);
	return ptr(buffer);
}
export function VkGeometryTrianglesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(96*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*96), obj.sType, true)

	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*96), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*96), BigInt(obj.vertexData||0), true);
	view.setBigUint64(16+(i*96), BigInt(obj.vertexData||0), true);

	view.setUint64(24+(i*96), obj.vertexOffset, true);
	view.setUint32(32+(i*96), obj.vertexCount, true);
	view.setUint64(40+(i*96), obj.vertexStride, true);
	view.setUint32(48+(i*96), obj.vertexFormat, true)

	view.setBigUint64(56+(i*96), BigInt(obj.indexData||0), true);
	view.setBigUint64(56+(i*96), BigInt(obj.indexData||0), true);

	view.setUint64(64+(i*96), obj.indexOffset, true);
	view.setUint32(72+(i*96), obj.indexCount, true);
	view.setUint32(76+(i*96), obj.indexType, true)

	view.setBigUint64(80+(i*96), BigInt(obj.transformData||0), true);
	view.setBigUint64(80+(i*96), BigInt(obj.transformData||0), true);

	view.setUint64(88+(i*96), obj.transformOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(96);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.vertexData||0), true);
	view.setBigUint64(16, BigInt(obj.vertexData||0), true);

	view.setUint64(24, obj.vertexOffset, true);
	view.setUint32(32, obj.vertexCount, true);
	view.setUint64(40, obj.vertexStride, true);
	view.setUint32(48, obj.vertexFormat, true)

	view.setBigUint64(56, BigInt(obj.indexData||0), true);
	view.setBigUint64(56, BigInt(obj.indexData||0), true);

	view.setUint64(64, obj.indexOffset, true);
	view.setUint32(72, obj.indexCount, true);
	view.setUint32(76, obj.indexType, true)

	view.setBigUint64(80, BigInt(obj.transformData||0), true);
	view.setBigUint64(80, BigInt(obj.transformData||0), true);

	view.setUint64(88, obj.transformOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeometryTrianglesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexData: undefined,
		vertexOffset: null,
		vertexCount: read.u32(ptr, 32),
		vertexStride: null,
		vertexFormat: read.u32(ptr, 48),
		indexData: undefined,
		indexOffset: null,
		indexCount: read.u32(ptr, 72),
		indexType: read.u32(ptr, 76),
		transformData: undefined,
		transformOffset: null
	};
	return obj;
}


export function VkGeometryAABBNV_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkGeometryAABBNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.aabbData||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.aabbData||0), true);

	view.setUint32(24+(i*40), obj.numAABBs, true);
	view.setUint32(28+(i*40), obj.stride, true);
	view.setUint64(32+(i*40), obj.offset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.aabbData||0), true);
	view.setBigUint64(16, BigInt(obj.aabbData||0), true);

	view.setUint32(24, obj.numAABBs, true);
	view.setUint32(28, obj.stride, true);
	view.setUint64(32, obj.offset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeometryAABBNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		aabbData: undefined,
		numAABBs: read.u32(ptr, 24),
		stride: read.u32(ptr, 28),
		offset: null
	};
	return obj;
}


export function VkGeometryDataNV_alloc_array(size){
	const buffer = new ArrayBuffer(136*size);
	return ptr(buffer);
}
export function VkGeometryDataNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(136*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.triangles){
	view.setUint32(0+(i*136), obj.triangles.sType, true)

	view.setBigUint64(8+(i*136), BigInt(obj.triangles.pNext||0), true);
	view.setBigUint64(8+(i*136), BigInt(obj.triangles.pNext||0), true);


	view.setBigUint64(16+(i*136), BigInt(obj.triangles.vertexData||0), true);
	view.setBigUint64(16+(i*136), BigInt(obj.triangles.vertexData||0), true);

	view.setUint64(24+(i*136), obj.triangles.vertexOffset, true);
	view.setUint32(32+(i*136), obj.triangles.vertexCount, true);
	view.setUint64(40+(i*136), obj.triangles.vertexStride, true);
	view.setUint32(48+(i*136), obj.triangles.vertexFormat, true)

	view.setBigUint64(56+(i*136), BigInt(obj.triangles.indexData||0), true);
	view.setBigUint64(56+(i*136), BigInt(obj.triangles.indexData||0), true);

	view.setUint64(64+(i*136), obj.triangles.indexOffset, true);
	view.setUint32(72+(i*136), obj.triangles.indexCount, true);
	view.setUint32(76+(i*136), obj.triangles.indexType, true)

	view.setBigUint64(80+(i*136), BigInt(obj.triangles.transformData||0), true);
	view.setBigUint64(80+(i*136), BigInt(obj.triangles.transformData||0), true);

	view.setUint64(88+(i*136), obj.triangles.transformOffset, true);
	}
	if (obj.aabbs){
	view.setUint32(96+(i*136), obj.aabbs.sType, true)

	view.setBigUint64(104+(i*136), BigInt(obj.aabbs.pNext||0), true);
	view.setBigUint64(104+(i*136), BigInt(obj.aabbs.pNext||0), true);


	view.setBigUint64(112+(i*136), BigInt(obj.aabbs.aabbData||0), true);
	view.setBigUint64(112+(i*136), BigInt(obj.aabbs.aabbData||0), true);

	view.setUint32(120+(i*136), obj.aabbs.numAABBs, true);
	view.setUint32(124+(i*136), obj.aabbs.stride, true);
	view.setUint64(128+(i*136), obj.aabbs.offset, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(136);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.triangles){
	view.setUint32(0, obj.triangles.sType, true)

	view.setBigUint64(8, BigInt(obj.triangles.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.triangles.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.triangles.vertexData||0), true);
	view.setBigUint64(16, BigInt(obj.triangles.vertexData||0), true);

	view.setUint64(24, obj.triangles.vertexOffset, true);
	view.setUint32(32, obj.triangles.vertexCount, true);
	view.setUint64(40, obj.triangles.vertexStride, true);
	view.setUint32(48, obj.triangles.vertexFormat, true)

	view.setBigUint64(56, BigInt(obj.triangles.indexData||0), true);
	view.setBigUint64(56, BigInt(obj.triangles.indexData||0), true);

	view.setUint64(64, obj.triangles.indexOffset, true);
	view.setUint32(72, obj.triangles.indexCount, true);
	view.setUint32(76, obj.triangles.indexType, true)

	view.setBigUint64(80, BigInt(obj.triangles.transformData||0), true);
	view.setBigUint64(80, BigInt(obj.triangles.transformData||0), true);

	view.setUint64(88, obj.triangles.transformOffset, true);
	}
	if (obj.aabbs){
	view.setUint32(96, obj.aabbs.sType, true)

	view.setBigUint64(104, BigInt(obj.aabbs.pNext||0), true);
	view.setBigUint64(104, BigInt(obj.aabbs.pNext||0), true);


	view.setBigUint64(112, BigInt(obj.aabbs.aabbData||0), true);
	view.setBigUint64(112, BigInt(obj.aabbs.aabbData||0), true);

	view.setUint32(120, obj.aabbs.numAABBs, true);
	view.setUint32(124, obj.aabbs.stride, true);
	view.setUint64(128, obj.aabbs.offset, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeometryDataNV_from_C(ptr){
	const obj = {
		triangles: null,
		aabbs: null
	};
	return obj;
}


export function VkGeometryNV_alloc_array(size){
	const buffer = new ArrayBuffer(288*size);
	return ptr(buffer);
}
export function VkGeometryNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(288*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*288), obj.sType, true)

	view.setBigUint64(8+(i*288), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*288), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*288), obj.geometryType, true)
	if (obj.geometry){
	if (obj.geometry.triangles){
	view.setUint32(96+(i*288), obj.geometry.triangles.sType, true)

	view.setBigUint64(104+(i*288), BigInt(obj.geometry.triangles.pNext||0), true);
	view.setBigUint64(104+(i*288), BigInt(obj.geometry.triangles.pNext||0), true);


	view.setBigUint64(112+(i*288), BigInt(obj.geometry.triangles.vertexData||0), true);
	view.setBigUint64(112+(i*288), BigInt(obj.geometry.triangles.vertexData||0), true);

	view.setUint64(120+(i*288), obj.geometry.triangles.vertexOffset, true);
	view.setUint32(128+(i*288), obj.geometry.triangles.vertexCount, true);
	view.setUint64(136+(i*288), obj.geometry.triangles.vertexStride, true);
	view.setUint32(144+(i*288), obj.geometry.triangles.vertexFormat, true)

	view.setBigUint64(152+(i*288), BigInt(obj.geometry.triangles.indexData||0), true);
	view.setBigUint64(152+(i*288), BigInt(obj.geometry.triangles.indexData||0), true);

	view.setUint64(160+(i*288), obj.geometry.triangles.indexOffset, true);
	view.setUint32(168+(i*288), obj.geometry.triangles.indexCount, true);
	view.setUint32(172+(i*288), obj.geometry.triangles.indexType, true)

	view.setBigUint64(176+(i*288), BigInt(obj.geometry.triangles.transformData||0), true);
	view.setBigUint64(176+(i*288), BigInt(obj.geometry.triangles.transformData||0), true);

	view.setUint64(184+(i*288), obj.geometry.triangles.transformOffset, true);
	}
	if (obj.geometry.aabbs){
	view.setUint32(192+(i*288), obj.geometry.aabbs.sType, true)

	view.setBigUint64(200+(i*288), BigInt(obj.geometry.aabbs.pNext||0), true);
	view.setBigUint64(200+(i*288), BigInt(obj.geometry.aabbs.pNext||0), true);


	view.setBigUint64(208+(i*288), BigInt(obj.geometry.aabbs.aabbData||0), true);
	view.setBigUint64(208+(i*288), BigInt(obj.geometry.aabbs.aabbData||0), true);

	view.setUint32(216+(i*288), obj.geometry.aabbs.numAABBs, true);
	view.setUint32(220+(i*288), obj.geometry.aabbs.stride, true);
	view.setUint64(224+(i*288), obj.geometry.aabbs.offset, true);
	}
	}
	view.setUint32(232+(i*288), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(288);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.geometryType, true)
	if (obj.geometry){
	if (obj.geometry.triangles){
	view.setUint32(96, obj.geometry.triangles.sType, true)

	view.setBigUint64(104, BigInt(obj.geometry.triangles.pNext||0), true);
	view.setBigUint64(104, BigInt(obj.geometry.triangles.pNext||0), true);


	view.setBigUint64(112, BigInt(obj.geometry.triangles.vertexData||0), true);
	view.setBigUint64(112, BigInt(obj.geometry.triangles.vertexData||0), true);

	view.setUint64(120, obj.geometry.triangles.vertexOffset, true);
	view.setUint32(128, obj.geometry.triangles.vertexCount, true);
	view.setUint64(136, obj.geometry.triangles.vertexStride, true);
	view.setUint32(144, obj.geometry.triangles.vertexFormat, true)

	view.setBigUint64(152, BigInt(obj.geometry.triangles.indexData||0), true);
	view.setBigUint64(152, BigInt(obj.geometry.triangles.indexData||0), true);

	view.setUint64(160, obj.geometry.triangles.indexOffset, true);
	view.setUint32(168, obj.geometry.triangles.indexCount, true);
	view.setUint32(172, obj.geometry.triangles.indexType, true)

	view.setBigUint64(176, BigInt(obj.geometry.triangles.transformData||0), true);
	view.setBigUint64(176, BigInt(obj.geometry.triangles.transformData||0), true);

	view.setUint64(184, obj.geometry.triangles.transformOffset, true);
	}
	if (obj.geometry.aabbs){
	view.setUint32(192, obj.geometry.aabbs.sType, true)

	view.setBigUint64(200, BigInt(obj.geometry.aabbs.pNext||0), true);
	view.setBigUint64(200, BigInt(obj.geometry.aabbs.pNext||0), true);


	view.setBigUint64(208, BigInt(obj.geometry.aabbs.aabbData||0), true);
	view.setBigUint64(208, BigInt(obj.geometry.aabbs.aabbData||0), true);

	view.setUint32(216, obj.geometry.aabbs.numAABBs, true);
	view.setUint32(220, obj.geometry.aabbs.stride, true);
	view.setUint64(224, obj.geometry.aabbs.offset, true);
	}
	}
	view.setUint32(232, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeometryNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		geometryType: read.u32(ptr, 16),
		geometry: null,
		flags: read.u32(ptr, 232)
	};
	return obj;
}


export function VkAccelerationStructureInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkAccelerationStructureInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.type, true)
	view.setUint32(20+(i*40), obj.flags, true);
	view.setUint32(24+(i*40), obj.instanceCount, true);
	view.setUint32(28+(i*40), obj.geometryCount, true);
	if (obj.pGeometries){
		const wrapped = VkGeometryNV_to_C(obj.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*40), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*40), BigInt(obj.pGeometries||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	view.setUint32(20, obj.flags, true);
	view.setUint32(24, obj.instanceCount, true);
	view.setUint32(28, obj.geometryCount, true);
	if (obj.pGeometries){
		const wrapped = VkGeometryNV_to_C(obj.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pGeometries||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		flags: read.u32(ptr, 20),
		instanceCount: read.u32(ptr, 24),
		geometryCount: read.u32(ptr, 28),
		pGeometries: VkGeometryNV_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkAccelerationStructureCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkAccelerationStructureCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*64), obj.compactedSize, true);
	if (obj.info){
	view.setUint32(24+(i*64), obj.info.sType, true)

	view.setBigUint64(32+(i*64), BigInt(obj.info.pNext||0), true);
	view.setBigUint64(32+(i*64), BigInt(obj.info.pNext||0), true);

	view.setUint32(40+(i*64), obj.info.type, true)
	view.setUint32(44+(i*64), obj.info.flags, true);
	view.setUint32(48+(i*64), obj.info.instanceCount, true);
	view.setUint32(52+(i*64), obj.info.geometryCount, true);
	if (obj.info.pGeometries){
		const wrapped = VkGeometryNV_to_C(obj.info.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*64), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*64), BigInt(obj.info.pGeometries||0), true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.compactedSize, true);
	if (obj.info){
	view.setUint32(24, obj.info.sType, true)

	view.setBigUint64(32, BigInt(obj.info.pNext||0), true);
	view.setBigUint64(32, BigInt(obj.info.pNext||0), true);

	view.setUint32(40, obj.info.type, true)
	view.setUint32(44, obj.info.flags, true);
	view.setUint32(48, obj.info.instanceCount, true);
	view.setUint32(52, obj.info.geometryCount, true);
	if (obj.info.pGeometries){
		const wrapped = VkGeometryNV_to_C(obj.info.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.info.pGeometries||0), true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		compactedSize: null,
		info: null
	};
	return obj;
}


export function VkBindAccelerationStructureMemoryInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkBindAccelerationStructureMemoryInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*56), BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(16+(i*56), BigInt(obj.accelerationStructure||0), true);


	view.setBigUint64(24+(i*56), BigInt(obj.memory||0), true);
	view.setBigUint64(24+(i*56), BigInt(obj.memory||0), true);

	view.setUint64(32+(i*56), obj.memoryOffset, true);
	view.setUint32(40+(i*56), obj.deviceIndexCount, true);

	view.setBigUint64(48+(i*56), BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pDeviceIndices||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(16, BigInt(obj.accelerationStructure||0), true);


	view.setBigUint64(24, BigInt(obj.memory||0), true);
	view.setBigUint64(24, BigInt(obj.memory||0), true);

	view.setUint64(32, obj.memoryOffset, true);
	view.setUint32(40, obj.deviceIndexCount, true);

	view.setBigUint64(48, BigInt(obj.pDeviceIndices||0), true);
	view.setBigUint64(48, BigInt(obj.pDeviceIndices||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindAccelerationStructureMemoryInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructure: undefined,
		memory: undefined,
		memoryOffset: null,
		deviceIndexCount: read.u32(ptr, 40),
		pDeviceIndices: undefined
	};
	return obj;
}


export function VkWriteDescriptorSetAccelerationStructureNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkWriteDescriptorSetAccelerationStructureNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.accelerationStructureCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pAccelerationStructures||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pAccelerationStructures||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.accelerationStructureCount, true);

	view.setBigUint64(24, BigInt(obj.pAccelerationStructures||0), true);
	view.setBigUint64(24, BigInt(obj.pAccelerationStructures||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkWriteDescriptorSetAccelerationStructureNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructureCount: read.u32(ptr, 16),
		pAccelerationStructures: read.ptr(ptr)
	};
	return obj;
}


export function VkAccelerationStructureMemoryRequirementsInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAccelerationStructureMemoryRequirementsInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.type, true)

	view.setBigUint64(24+(i*32), BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.accelerationStructure||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)

	view.setBigUint64(24, BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(24, BigInt(obj.accelerationStructure||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureMemoryRequirementsInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		accelerationStructure: undefined
	};
	return obj;
}


export function VkPhysicalDeviceRayTracingPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayTracingPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.shaderGroupHandleSize, true);
	view.setUint32(20+(i*64), obj.maxRecursionDepth, true);
	view.setUint32(24+(i*64), obj.maxShaderGroupStride, true);
	view.setUint32(28+(i*64), obj.shaderGroupBaseAlignment, true);
	view.setUint64(32+(i*64), obj.maxGeometryCount, true);
	view.setUint64(40+(i*64), obj.maxInstanceCount, true);
	view.setUint64(48+(i*64), obj.maxTriangleCount, true);
	view.setUint32(56+(i*64), obj.maxDescriptorSetAccelerationStructures, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderGroupHandleSize, true);
	view.setUint32(20, obj.maxRecursionDepth, true);
	view.setUint32(24, obj.maxShaderGroupStride, true);
	view.setUint32(28, obj.shaderGroupBaseAlignment, true);
	view.setUint64(32, obj.maxGeometryCount, true);
	view.setUint64(40, obj.maxInstanceCount, true);
	view.setUint64(48, obj.maxTriangleCount, true);
	view.setUint32(56, obj.maxDescriptorSetAccelerationStructures, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayTracingPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderGroupHandleSize: read.u32(ptr, 16),
		maxRecursionDepth: read.u32(ptr, 20),
		maxShaderGroupStride: read.u32(ptr, 24),
		shaderGroupBaseAlignment: read.u32(ptr, 28),
		maxGeometryCount: null,
		maxInstanceCount: null,
		maxTriangleCount: null,
		maxDescriptorSetAccelerationStructures: read.u32(ptr, 56)
	};
	return obj;
}


export function VkTransformMatrixKHR_alloc_array(size){
	const buffer = new ArrayBuffer(NaN*size);
	return ptr(buffer);
}
export function VkTransformMatrixKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(NaN*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(NaN);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTransformMatrixKHR_from_C(ptr){
	const obj = {
		matrix: null
	};
	return obj;
}


export function VkAabbPositionsKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAabbPositionsKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*24), obj.minX, true);
	view.setFloat32(4+(i*24), obj.minY, true);
	view.setFloat32(8+(i*24), obj.minZ, true);
	view.setFloat32(12+(i*24), obj.maxX, true);
	view.setFloat32(16+(i*24), obj.maxY, true);
	view.setFloat32(20+(i*24), obj.maxZ, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.minX, true);
	view.setFloat32(4, obj.minY, true);
	view.setFloat32(8, obj.minZ, true);
	view.setFloat32(12, obj.maxX, true);
	view.setFloat32(16, obj.maxY, true);
	view.setFloat32(20, obj.maxZ, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAabbPositionsKHR_from_C(ptr){
	const obj = {
		minX: null,
		minY: null,
		minZ: null,
		maxX: null,
		maxY: null,
		maxZ: null
	};
	return obj;
}


export function VkAccelerationStructureInstanceKHR_alloc_array(size){
	const buffer = new ArrayBuffer(NaN*size);
	return ptr(buffer);
}
export function VkAccelerationStructureInstanceKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(NaN*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.transform){

	}
	view.setUint32(NaN+(i*NaN), obj.instanceCustomIndex, true);
	view.setUint32(NaN+(i*NaN), obj.mask, true);
	view.setUint32(NaN+(i*NaN), obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(NaN+(i*NaN), obj.flags, true);
	view.setUint64(NaN+(i*NaN), obj.accelerationStructureReference, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(NaN);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.transform){

	}
	view.setUint32(NaN, obj.instanceCustomIndex, true);
	view.setUint32(NaN, obj.mask, true);
	view.setUint32(NaN, obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(NaN, obj.flags, true);
	view.setUint64(NaN, obj.accelerationStructureReference, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureInstanceKHR_from_C(ptr){
	const obj = {
		transform: null,
		instanceCustomIndex: read.u32(ptr, NaN),
		mask: read.u32(ptr, NaN),
		instanceShaderBindingTableRecordOffset: read.u32(ptr, NaN),
		flags: read.u32(ptr, NaN),
		accelerationStructureReference: null
	};
	return obj;
}


export function VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.representativeFragmentTest, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.representativeFragmentTest, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		representativeFragmentTest: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineRepresentativeFragmentTestStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineRepresentativeFragmentTestStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.representativeFragmentTestEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.representativeFragmentTestEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRepresentativeFragmentTestStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		representativeFragmentTestEnable: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceImageViewImageFormatInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageViewImageFormatInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imageViewType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imageViewType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageViewImageFormatInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageViewType: read.u32(ptr, 16)
	};
	return obj;
}


export function VkFilterCubicImageViewImageFormatPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkFilterCubicImageViewImageFormatPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.filterCubic, true);
	view.setUint32(20+(i*24), obj.filterCubicMinmax, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.filterCubic, true);
	view.setUint32(20, obj.filterCubicMinmax, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFilterCubicImageViewImageFormatPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		filterCubic: read.u32(ptr, 16),
		filterCubicMinmax: read.u32(ptr, 20)
	};
	return obj;
}


export function VkImportMemoryHostPointerInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImportMemoryHostPointerInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.handleType, true)

	view.setBigUint64(24+(i*32), BigInt(obj.pHostPointer||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pHostPointer||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.handleType, true)

	view.setBigUint64(24, BigInt(obj.pHostPointer||0), true);
	view.setBigUint64(24, BigInt(obj.pHostPointer||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImportMemoryHostPointerInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		handleType: read.u32(ptr, 16),
		pHostPointer: read.ptr(ptr)
	};
	return obj;
}


export function VkMemoryHostPointerPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryHostPointerPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.memoryTypeBits, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.memoryTypeBits, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryHostPointerPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryTypeBits: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceExternalMemoryHostPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalMemoryHostPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.minImportedHostPointerAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.minImportedHostPointerAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalMemoryHostPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minImportedHostPointerAlignment: null
	};
	return obj;
}

export const VkPipelineCompilerControlFlagBitsAMD = {
	VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD: 2147483647,
	keys:{
		"2147483647": "VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD",
}};

export function VkPipelineCompilerControlCreateInfoAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineCompilerControlCreateInfoAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.compilerControlFlags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.compilerControlFlags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCompilerControlCreateInfoAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		compilerControlFlags: read.u32(ptr, 16)
	};
	return obj;
}

export const VkTimeDomainEXT = {
	VK_TIME_DOMAIN_DEVICE_EXT: 0,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: 1,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: 2,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: 3,
	VK_TIME_DOMAIN_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_TIME_DOMAIN_DEVICE_EXT",
		"1": "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT",
		"2": "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT",
		"3": "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT",
		"2147483647": "VK_TIME_DOMAIN_MAX_ENUM_EXT",
}};

export function VkCalibratedTimestampInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkCalibratedTimestampInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.timeDomain, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.timeDomain, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCalibratedTimestampInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		timeDomain: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderCorePropertiesAMD_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderCorePropertiesAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.shaderEngineCount, true);
	view.setUint32(20+(i*72), obj.shaderArraysPerEngineCount, true);
	view.setUint32(24+(i*72), obj.computeUnitsPerShaderArray, true);
	view.setUint32(28+(i*72), obj.simdPerComputeUnit, true);
	view.setUint32(32+(i*72), obj.wavefrontsPerSimd, true);
	view.setUint32(36+(i*72), obj.wavefrontSize, true);
	view.setUint32(40+(i*72), obj.sgprsPerSimd, true);
	view.setUint32(44+(i*72), obj.minSgprAllocation, true);
	view.setUint32(48+(i*72), obj.maxSgprAllocation, true);
	view.setUint32(52+(i*72), obj.sgprAllocationGranularity, true);
	view.setUint32(56+(i*72), obj.vgprsPerSimd, true);
	view.setUint32(60+(i*72), obj.minVgprAllocation, true);
	view.setUint32(64+(i*72), obj.maxVgprAllocation, true);
	view.setUint32(68+(i*72), obj.vgprAllocationGranularity, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderEngineCount, true);
	view.setUint32(20, obj.shaderArraysPerEngineCount, true);
	view.setUint32(24, obj.computeUnitsPerShaderArray, true);
	view.setUint32(28, obj.simdPerComputeUnit, true);
	view.setUint32(32, obj.wavefrontsPerSimd, true);
	view.setUint32(36, obj.wavefrontSize, true);
	view.setUint32(40, obj.sgprsPerSimd, true);
	view.setUint32(44, obj.minSgprAllocation, true);
	view.setUint32(48, obj.maxSgprAllocation, true);
	view.setUint32(52, obj.sgprAllocationGranularity, true);
	view.setUint32(56, obj.vgprsPerSimd, true);
	view.setUint32(60, obj.minVgprAllocation, true);
	view.setUint32(64, obj.maxVgprAllocation, true);
	view.setUint32(68, obj.vgprAllocationGranularity, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderCorePropertiesAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderEngineCount: read.u32(ptr, 16),
		shaderArraysPerEngineCount: read.u32(ptr, 20),
		computeUnitsPerShaderArray: read.u32(ptr, 24),
		simdPerComputeUnit: read.u32(ptr, 28),
		wavefrontsPerSimd: read.u32(ptr, 32),
		wavefrontSize: read.u32(ptr, 36),
		sgprsPerSimd: read.u32(ptr, 40),
		minSgprAllocation: read.u32(ptr, 44),
		maxSgprAllocation: read.u32(ptr, 48),
		sgprAllocationGranularity: read.u32(ptr, 52),
		vgprsPerSimd: read.u32(ptr, 56),
		minVgprAllocation: read.u32(ptr, 60),
		maxVgprAllocation: read.u32(ptr, 64),
		vgprAllocationGranularity: read.u32(ptr, 68)
	};
	return obj;
}

export const VkMemoryOverallocationBehaviorAMD = {
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: 0,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: 1,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: 2,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD: 2147483647,
	keys:{
		"0": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD",
		"1": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD",
		"2": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD",
		"2147483647": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD",
}};

export function VkDeviceMemoryOverallocationCreateInfoAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceMemoryOverallocationCreateInfoAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.overallocationBehavior, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.overallocationBehavior, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceMemoryOverallocationCreateInfoAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		overallocationBehavior: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxVertexAttribDivisor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxVertexAttribDivisor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxVertexAttribDivisor: read.u32(ptr, 16)
	};
	return obj;
}


export function VkVertexInputBindingDivisorDescriptionEXT_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkVertexInputBindingDivisorDescriptionEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.binding, true);
	view.setUint32(4+(i*8), obj.divisor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.binding, true);
	view.setUint32(4, obj.divisor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkVertexInputBindingDivisorDescriptionEXT_from_C(ptr){
	const obj = {
		binding: read.u32(ptr, 0),
		divisor: read.u32(ptr, 4)
	};
	return obj;
}


export function VkPipelineVertexInputDivisorStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineVertexInputDivisorStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.vertexBindingDivisorCount, true);
	if (obj.pVertexBindingDivisors){
		const wrapped = VkVertexInputBindingDivisorDescriptionEXT_to_C(obj.pVertexBindingDivisors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pVertexBindingDivisors||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.vertexBindingDivisorCount, true);
	if (obj.pVertexBindingDivisors){
		const wrapped = VkVertexInputBindingDivisorDescriptionEXT_to_C(obj.pVertexBindingDivisors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pVertexBindingDivisors||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineVertexInputDivisorStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexBindingDivisorCount: read.u32(ptr, 16),
		pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.vertexAttributeInstanceRateDivisor, true);
	view.setUint32(20+(i*24), obj.vertexAttributeInstanceRateZeroDivisor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.vertexAttributeInstanceRateDivisor, true);
	view.setUint32(20, obj.vertexAttributeInstanceRateZeroDivisor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexAttributeInstanceRateDivisor: read.u32(ptr, 16),
		vertexAttributeInstanceRateZeroDivisor: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.computeDerivativeGroupQuads, true);
	view.setUint32(20+(i*24), obj.computeDerivativeGroupLinear, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.computeDerivativeGroupQuads, true);
	view.setUint32(20, obj.computeDerivativeGroupLinear, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceComputeShaderDerivativesFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		computeDerivativeGroupQuads: read.u32(ptr, 16),
		computeDerivativeGroupLinear: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceMeshShaderFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMeshShaderFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.taskShader, true);
	view.setUint32(20+(i*24), obj.meshShader, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.taskShader, true);
	view.setUint32(20, obj.meshShader, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMeshShaderFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		taskShader: read.u32(ptr, 16),
		meshShader: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceMeshShaderPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(72*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMeshShaderPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(72*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*72), obj.sType, true)

	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*72), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*72), obj.maxDrawMeshTasksCount, true);
	view.setUint32(20+(i*72), obj.maxTaskWorkGroupInvocations, true);

	view.setUint32(28+(i*72), obj.maxTaskTotalMemorySize, true);
	view.setUint32(32+(i*72), obj.maxTaskOutputCount, true);
	view.setUint32(36+(i*72), obj.maxMeshWorkGroupInvocations, true);

	view.setUint32(44+(i*72), obj.maxMeshTotalMemorySize, true);
	view.setUint32(48+(i*72), obj.maxMeshOutputVertices, true);
	view.setUint32(52+(i*72), obj.maxMeshOutputPrimitives, true);
	view.setUint32(56+(i*72), obj.maxMeshMultiviewViewCount, true);
	view.setUint32(60+(i*72), obj.meshOutputPerVertexGranularity, true);
	view.setUint32(64+(i*72), obj.meshOutputPerPrimitiveGranularity, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(72);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxDrawMeshTasksCount, true);
	view.setUint32(20, obj.maxTaskWorkGroupInvocations, true);

	view.setUint32(28, obj.maxTaskTotalMemorySize, true);
	view.setUint32(32, obj.maxTaskOutputCount, true);
	view.setUint32(36, obj.maxMeshWorkGroupInvocations, true);

	view.setUint32(44, obj.maxMeshTotalMemorySize, true);
	view.setUint32(48, obj.maxMeshOutputVertices, true);
	view.setUint32(52, obj.maxMeshOutputPrimitives, true);
	view.setUint32(56, obj.maxMeshMultiviewViewCount, true);
	view.setUint32(60, obj.meshOutputPerVertexGranularity, true);
	view.setUint32(64, obj.meshOutputPerPrimitiveGranularity, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMeshShaderPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxDrawMeshTasksCount: read.u32(ptr, 16),
		maxTaskWorkGroupInvocations: read.u32(ptr, 20),
		maxTaskWorkGroupSize: null,
		maxTaskTotalMemorySize: read.u32(ptr, 28),
		maxTaskOutputCount: read.u32(ptr, 32),
		maxMeshWorkGroupInvocations: read.u32(ptr, 36),
		maxMeshWorkGroupSize: null,
		maxMeshTotalMemorySize: read.u32(ptr, 44),
		maxMeshOutputVertices: read.u32(ptr, 48),
		maxMeshOutputPrimitives: read.u32(ptr, 52),
		maxMeshMultiviewViewCount: read.u32(ptr, 56),
		meshOutputPerVertexGranularity: read.u32(ptr, 60),
		meshOutputPerPrimitiveGranularity: read.u32(ptr, 64)
	};
	return obj;
}


export function VkDrawMeshTasksIndirectCommandNV_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkDrawMeshTasksIndirectCommandNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.taskCount, true);
	view.setUint32(4+(i*8), obj.firstTask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.taskCount, true);
	view.setUint32(4, obj.firstTask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDrawMeshTasksIndirectCommandNV_from_C(ptr){
	const obj = {
		taskCount: read.u32(ptr, 0),
		firstTask: read.u32(ptr, 4)
	};
	return obj;
}


export function VkPhysicalDeviceShaderImageFootprintFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderImageFootprintFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imageFootprint, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imageFootprint, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderImageFootprintFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageFootprint: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineViewportExclusiveScissorStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineViewportExclusiveScissorStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.exclusiveScissorCount, true);
	if (obj.pExclusiveScissors){
		const wrapped = VkRect2D_to_C(obj.pExclusiveScissors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pExclusiveScissors||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.exclusiveScissorCount, true);
	if (obj.pExclusiveScissors){
		const wrapped = VkRect2D_to_C(obj.pExclusiveScissors, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pExclusiveScissors||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportExclusiveScissorStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		exclusiveScissorCount: read.u32(ptr, 16),
		pExclusiveScissors: VkRect2D_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceExclusiveScissorFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExclusiveScissorFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.exclusiveScissor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.exclusiveScissor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExclusiveScissorFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		exclusiveScissor: read.u32(ptr, 16)
	};
	return obj;
}


export function VkQueueFamilyCheckpointPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkQueueFamilyCheckpointPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.checkpointExecutionStageMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.checkpointExecutionStageMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueueFamilyCheckpointPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		checkpointExecutionStageMask: read.u32(ptr, 16)
	};
	return obj;
}


export function VkCheckpointDataNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCheckpointDataNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.stage, true)

	view.setBigUint64(24+(i*32), BigInt(obj.pCheckpointMarker||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pCheckpointMarker||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stage, true)

	view.setBigUint64(24, BigInt(obj.pCheckpointMarker||0), true);
	view.setBigUint64(24, BigInt(obj.pCheckpointMarker||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCheckpointDataNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stage: read.u32(ptr, 16),
		pCheckpointMarker: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderIntegerFunctions2, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderIntegerFunctions2, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderIntegerFunctions2: read.u32(ptr, 16)
	};
	return obj;
}

export const VkPerformanceConfigurationTypeINTEL = {
	VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: 0,
	VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL",
		"2147483647": "VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL",
}};
export const VkQueryPoolSamplingModeINTEL = {
	VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: 0,
	VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL: 2147483647,
	keys:{
		"0": "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL",
		"2147483647": "VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL",
}};
export const VkPerformanceOverrideTypeINTEL = {
	VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: 0,
	VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: 1,
	VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL",
		"1": "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL",
		"2147483647": "VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL",
}};
export const VkPerformanceParameterTypeINTEL = {
	VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: 0,
	VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: 1,
	VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL",
		"1": "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL",
		"2147483647": "VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL",
}};
export const VkPerformanceValueTypeINTEL = {
	VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: 0,
	VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: 1,
	VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: 2,
	VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: 3,
	VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: 4,
	VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL: 2147483647,
	keys:{
		"0": "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL",
		"1": "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL",
		"2": "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL",
		"3": "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL",
		"4": "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL",
		"2147483647": "VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL",
}};

export function VkPerformanceValueINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkPerformanceValueINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.type, true)

	view.setBigUint64(8+(i*16), BigInt(obj.data||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.data||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.type, true)

	view.setBigUint64(8, BigInt(obj.data||0), true);
	view.setBigUint64(8, BigInt(obj.data||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceValueINTEL_from_C(ptr){
	const obj = {
		type: read.u32(ptr, 0),
		data: undefined
	};
	return obj;
}


export function VkInitializePerformanceApiInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkInitializePerformanceApiInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.pUserData||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.pUserData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pUserData||0), true);
	view.setBigUint64(16, BigInt(obj.pUserData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkInitializePerformanceApiInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pUserData: read.ptr(ptr)
	};
	return obj;
}


export function VkQueryPoolPerformanceQueryCreateInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkQueryPoolPerformanceQueryCreateInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.performanceCountersSampling, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.performanceCountersSampling, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkQueryPoolPerformanceQueryCreateInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		performanceCountersSampling: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPerformanceMarkerInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPerformanceMarkerInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.marker, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.marker, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceMarkerInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		marker: null
	};
	return obj;
}


export function VkPerformanceStreamMarkerInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPerformanceStreamMarkerInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.marker, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.marker, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceStreamMarkerInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		marker: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPerformanceOverrideInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPerformanceOverrideInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.type, true)
	view.setUint32(20+(i*32), obj.enable, true);
	view.setUint64(24+(i*32), obj.parameter, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	view.setUint32(20, obj.enable, true);
	view.setUint64(24, obj.parameter, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceOverrideInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		enable: read.u32(ptr, 20),
		parameter: null
	};
	return obj;
}


export function VkPerformanceConfigurationAcquireInfoINTEL_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPerformanceConfigurationAcquireInfoINTEL_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.type, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPerformanceConfigurationAcquireInfoINTEL_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePCIBusInfoPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePCIBusInfoPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.pciDomain, true);
	view.setUint32(20+(i*32), obj.pciBus, true);
	view.setUint32(24+(i*32), obj.pciDevice, true);
	view.setUint32(28+(i*32), obj.pciFunction, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pciDomain, true);
	view.setUint32(20, obj.pciBus, true);
	view.setUint32(24, obj.pciDevice, true);
	view.setUint32(28, obj.pciFunction, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePCIBusInfoPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pciDomain: read.u32(ptr, 16),
		pciBus: read.u32(ptr, 20),
		pciDevice: read.u32(ptr, 24),
		pciFunction: read.u32(ptr, 28)
	};
	return obj;
}


export function VkDisplayNativeHdrSurfaceCapabilitiesAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDisplayNativeHdrSurfaceCapabilitiesAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.localDimmingSupport, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.localDimmingSupport, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDisplayNativeHdrSurfaceCapabilitiesAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		localDimmingSupport: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSwapchainDisplayNativeHdrCreateInfoAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSwapchainDisplayNativeHdrCreateInfoAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.localDimmingEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.localDimmingEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSwapchainDisplayNativeHdrCreateInfoAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		localDimmingEnable: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMapFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMapFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.fragmentDensityMap, true);
	view.setUint32(20+(i*32), obj.fragmentDensityMapDynamic, true);
	view.setUint32(24+(i*32), obj.fragmentDensityMapNonSubsampledImages, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentDensityMap, true);
	view.setUint32(20, obj.fragmentDensityMapDynamic, true);
	view.setUint32(24, obj.fragmentDensityMapNonSubsampledImages, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMapFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityMap: read.u32(ptr, 16),
		fragmentDensityMapDynamic: read.u32(ptr, 20),
		fragmentDensityMapNonSubsampledImages: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMapPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMapPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	if (obj.minFragmentDensityTexelSize){
	view.setUint32(16+(i*40), obj.minFragmentDensityTexelSize.width, true);
	view.setUint32(20+(i*40), obj.minFragmentDensityTexelSize.height, true);
	}
	if (obj.maxFragmentDensityTexelSize){
	view.setUint32(24+(i*40), obj.maxFragmentDensityTexelSize.width, true);
	view.setUint32(28+(i*40), obj.maxFragmentDensityTexelSize.height, true);
	}
	view.setUint32(32+(i*40), obj.fragmentDensityInvocations, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.minFragmentDensityTexelSize){
	view.setUint32(16, obj.minFragmentDensityTexelSize.width, true);
	view.setUint32(20, obj.minFragmentDensityTexelSize.height, true);
	}
	if (obj.maxFragmentDensityTexelSize){
	view.setUint32(24, obj.maxFragmentDensityTexelSize.width, true);
	view.setUint32(28, obj.maxFragmentDensityTexelSize.height, true);
	}
	view.setUint32(32, obj.fragmentDensityInvocations, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMapPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minFragmentDensityTexelSize: null,
		maxFragmentDensityTexelSize: null,
		fragmentDensityInvocations: read.u32(ptr, 32)
	};
	return obj;
}


export function VkRenderPassFragmentDensityMapCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassFragmentDensityMapCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.fragmentDensityMapAttachment){
	view.setUint32(16+(i*24), obj.fragmentDensityMapAttachment.attachment, true);
	view.setUint32(20+(i*24), obj.fragmentDensityMapAttachment.layout, true)
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.fragmentDensityMapAttachment){
	view.setUint32(16, obj.fragmentDensityMapAttachment.attachment, true);
	view.setUint32(20, obj.fragmentDensityMapAttachment.layout, true)
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassFragmentDensityMapCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityMapAttachment: null
	};
	return obj;
}

export const VkShaderCorePropertiesFlagBitsAMD = {
	VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD: 2147483647,
	keys:{
		"2147483647": "VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD",
}};

export function VkPhysicalDeviceShaderCoreProperties2AMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderCoreProperties2AMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderCoreFeatures, true);
	view.setUint32(20+(i*24), obj.activeComputeUnitCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderCoreFeatures, true);
	view.setUint32(20, obj.activeComputeUnitCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderCoreProperties2AMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderCoreFeatures: read.u32(ptr, 16),
		activeComputeUnitCount: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceCoherentMemoryFeaturesAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCoherentMemoryFeaturesAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.deviceCoherentMemory, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceCoherentMemory, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCoherentMemoryFeaturesAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceCoherentMemory: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderImageInt64Atomics, true);
	view.setUint32(20+(i*24), obj.sparseImageInt64Atomics, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderImageInt64Atomics, true);
	view.setUint32(20, obj.sparseImageInt64Atomics, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderImageInt64Atomics: read.u32(ptr, 16),
		sparseImageInt64Atomics: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceMemoryBudgetPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMemoryBudgetPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);



	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);



	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMemoryBudgetPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		heapBudget: null,
		heapUsage: null
	};
	return obj;
}


export function VkPhysicalDeviceMemoryPriorityFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMemoryPriorityFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.memoryPriority, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.memoryPriority, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMemoryPriorityFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memoryPriority: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMemoryPriorityAllocateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMemoryPriorityAllocateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setFloat32(16+(i*24), obj.priority, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setFloat32(16, obj.priority, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryPriorityAllocateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		priority: null
	};
	return obj;
}


export function VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.dedicatedAllocationImageAliasing, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.dedicatedAllocationImageAliasing, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		dedicatedAllocationImageAliasing: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.bufferDeviceAddress, true);
	view.setUint32(20+(i*32), obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(24+(i*32), obj.bufferDeviceAddressMultiDevice, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.bufferDeviceAddress, true);
	view.setUint32(20, obj.bufferDeviceAddressCaptureReplay, true);
	view.setUint32(24, obj.bufferDeviceAddressMultiDevice, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceBufferDeviceAddressFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		bufferDeviceAddress: read.u32(ptr, 16),
		bufferDeviceAddressCaptureReplay: read.u32(ptr, 20),
		bufferDeviceAddressMultiDevice: read.u32(ptr, 24)
	};
	return obj;
}


export function VkBufferDeviceAddressCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkBufferDeviceAddressCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*24), obj.deviceAddress, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.deviceAddress, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBufferDeviceAddressCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceAddress: null
	};
	return obj;
}

export const VkValidationFeatureEnableEXT = {
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: 0,
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: 1,
	VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: 2,
	VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: 3,
	VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: 4,
	VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT",
		"1": "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT",
		"2": "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT",
		"3": "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT",
		"4": "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT",
		"2147483647": "VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT",
}};
export const VkValidationFeatureDisableEXT = {
	VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: 0,
	VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: 1,
	VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: 2,
	VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: 3,
	VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: 4,
	VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: 5,
	VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: 6,
	VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT: 7,
	VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT",
		"1": "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT",
		"2": "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT",
		"3": "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT",
		"4": "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT",
		"5": "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT",
		"6": "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT",
		"7": "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT",
		"2147483647": "VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT",
}};

export function VkValidationFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkValidationFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.enabledValidationFeatureCount, true);

	view.setBigUint64(24+(i*48), BigInt(obj.pEnabledValidationFeatures||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pEnabledValidationFeatures||0), true);

	view.setUint32(32+(i*48), obj.disabledValidationFeatureCount, true);

	view.setBigUint64(40+(i*48), BigInt(obj.pDisabledValidationFeatures||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pDisabledValidationFeatures||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.enabledValidationFeatureCount, true);

	view.setBigUint64(24, BigInt(obj.pEnabledValidationFeatures||0), true);
	view.setBigUint64(24, BigInt(obj.pEnabledValidationFeatures||0), true);

	view.setUint32(32, obj.disabledValidationFeatureCount, true);

	view.setBigUint64(40, BigInt(obj.pDisabledValidationFeatures||0), true);
	view.setBigUint64(40, BigInt(obj.pDisabledValidationFeatures||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkValidationFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		enabledValidationFeatureCount: read.u32(ptr, 16),
		pEnabledValidationFeatures: undefined,
		disabledValidationFeatureCount: read.u32(ptr, 32),
		pDisabledValidationFeatures: undefined
	};
	return obj;
}

export const VkComponentTypeNV = {
	VK_COMPONENT_TYPE_FLOAT16_NV: 0,
	VK_COMPONENT_TYPE_FLOAT32_NV: 1,
	VK_COMPONENT_TYPE_FLOAT64_NV: 2,
	VK_COMPONENT_TYPE_SINT8_NV: 3,
	VK_COMPONENT_TYPE_SINT16_NV: 4,
	VK_COMPONENT_TYPE_SINT32_NV: 5,
	VK_COMPONENT_TYPE_SINT64_NV: 6,
	VK_COMPONENT_TYPE_UINT8_NV: 7,
	VK_COMPONENT_TYPE_UINT16_NV: 8,
	VK_COMPONENT_TYPE_UINT32_NV: 9,
	VK_COMPONENT_TYPE_UINT64_NV: 10,
	VK_COMPONENT_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_COMPONENT_TYPE_FLOAT16_NV",
		"1": "VK_COMPONENT_TYPE_FLOAT32_NV",
		"2": "VK_COMPONENT_TYPE_FLOAT64_NV",
		"3": "VK_COMPONENT_TYPE_SINT8_NV",
		"4": "VK_COMPONENT_TYPE_SINT16_NV",
		"5": "VK_COMPONENT_TYPE_SINT32_NV",
		"6": "VK_COMPONENT_TYPE_SINT64_NV",
		"7": "VK_COMPONENT_TYPE_UINT8_NV",
		"8": "VK_COMPONENT_TYPE_UINT16_NV",
		"9": "VK_COMPONENT_TYPE_UINT32_NV",
		"10": "VK_COMPONENT_TYPE_UINT64_NV",
		"2147483647": "VK_COMPONENT_TYPE_MAX_ENUM_NV",
}};
export const VkScopeNV = {
	VK_SCOPE_DEVICE_NV: 1,
	VK_SCOPE_WORKGROUP_NV: 2,
	VK_SCOPE_SUBGROUP_NV: 3,
	VK_SCOPE_QUEUE_FAMILY_NV: 5,
	VK_SCOPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_SCOPE_DEVICE_NV",
		"2": "VK_SCOPE_WORKGROUP_NV",
		"3": "VK_SCOPE_SUBGROUP_NV",
		"5": "VK_SCOPE_QUEUE_FAMILY_NV",
		"2147483647": "VK_SCOPE_MAX_ENUM_NV",
}};

export function VkCooperativeMatrixPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkCooperativeMatrixPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.MSize, true);
	view.setUint32(20+(i*48), obj.NSize, true);
	view.setUint32(24+(i*48), obj.KSize, true);
	view.setUint32(28+(i*48), obj.AType, true)
	view.setUint32(32+(i*48), obj.BType, true)
	view.setUint32(36+(i*48), obj.CType, true)
	view.setUint32(40+(i*48), obj.DType, true)
	view.setUint32(44+(i*48), obj.scope, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.MSize, true);
	view.setUint32(20, obj.NSize, true);
	view.setUint32(24, obj.KSize, true);
	view.setUint32(28, obj.AType, true)
	view.setUint32(32, obj.BType, true)
	view.setUint32(36, obj.CType, true)
	view.setUint32(40, obj.DType, true)
	view.setUint32(44, obj.scope, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCooperativeMatrixPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		MSize: read.u32(ptr, 16),
		NSize: read.u32(ptr, 20),
		KSize: read.u32(ptr, 24),
		AType: read.u32(ptr, 28),
		BType: read.u32(ptr, 32),
		CType: read.u32(ptr, 36),
		DType: read.u32(ptr, 40),
		scope: read.u32(ptr, 44)
	};
	return obj;
}


export function VkPhysicalDeviceCooperativeMatrixFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCooperativeMatrixFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.cooperativeMatrix, true);
	view.setUint32(20+(i*24), obj.cooperativeMatrixRobustBufferAccess, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.cooperativeMatrix, true);
	view.setUint32(20, obj.cooperativeMatrixRobustBufferAccess, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCooperativeMatrixFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		cooperativeMatrix: read.u32(ptr, 16),
		cooperativeMatrixRobustBufferAccess: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceCooperativeMatrixPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCooperativeMatrixPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.cooperativeMatrixSupportedStages, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.cooperativeMatrixSupportedStages, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCooperativeMatrixPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		cooperativeMatrixSupportedStages: read.u32(ptr, 16)
	};
	return obj;
}

export const VkCoverageReductionModeNV = {
	VK_COVERAGE_REDUCTION_MODE_MERGE_NV: 0,
	VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: 1,
	VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_COVERAGE_REDUCTION_MODE_MERGE_NV",
		"1": "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV",
		"2147483647": "VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV",
}};

export function VkPhysicalDeviceCoverageReductionModeFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCoverageReductionModeFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.coverageReductionMode, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.coverageReductionMode, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCoverageReductionModeFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		coverageReductionMode: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineCoverageReductionStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineCoverageReductionStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	view.setUint32(20+(i*24), obj.coverageReductionMode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.coverageReductionMode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineCoverageReductionStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		coverageReductionMode: read.u32(ptr, 20)
	};
	return obj;
}


export function VkFramebufferMixedSamplesCombinationNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkFramebufferMixedSamplesCombinationNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.coverageReductionMode, true)
	view.setUint32(20+(i*32), obj.rasterizationSamples, true)
	view.setUint32(24+(i*32), obj.depthStencilSamples, true);
	view.setUint32(28+(i*32), obj.colorSamples, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.coverageReductionMode, true)
	view.setUint32(20, obj.rasterizationSamples, true)
	view.setUint32(24, obj.depthStencilSamples, true);
	view.setUint32(28, obj.colorSamples, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkFramebufferMixedSamplesCombinationNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		coverageReductionMode: read.u32(ptr, 16),
		rasterizationSamples: read.u32(ptr, 20),
		depthStencilSamples: read.u32(ptr, 24),
		colorSamples: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.fragmentShaderSampleInterlock, true);
	view.setUint32(20+(i*32), obj.fragmentShaderPixelInterlock, true);
	view.setUint32(24+(i*32), obj.fragmentShaderShadingRateInterlock, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentShaderSampleInterlock, true);
	view.setUint32(20, obj.fragmentShaderPixelInterlock, true);
	view.setUint32(24, obj.fragmentShaderShadingRateInterlock, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentShaderSampleInterlock: read.u32(ptr, 16),
		fragmentShaderPixelInterlock: read.u32(ptr, 20),
		fragmentShaderShadingRateInterlock: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.ycbcrImageArrays, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.ycbcrImageArrays, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceYcbcrImageArraysFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		ycbcrImageArrays: read.u32(ptr, 16)
	};
	return obj;
}

export const VkProvokingVertexModeEXT = {
	VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT: 0,
	VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT: 1,
	VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT",
		"1": "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT",
		"2147483647": "VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceProvokingVertexFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProvokingVertexFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.provokingVertexLast, true);
	view.setUint32(20+(i*24), obj.transformFeedbackPreservesProvokingVertex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.provokingVertexLast, true);
	view.setUint32(20, obj.transformFeedbackPreservesProvokingVertex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProvokingVertexFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		provokingVertexLast: read.u32(ptr, 16),
		transformFeedbackPreservesProvokingVertex: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceProvokingVertexPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceProvokingVertexPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.provokingVertexModePerPipeline, true);
	view.setUint32(20+(i*24), obj.transformFeedbackPreservesTriangleFanProvokingVertex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.provokingVertexModePerPipeline, true);
	view.setUint32(20, obj.transformFeedbackPreservesTriangleFanProvokingVertex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceProvokingVertexPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		provokingVertexModePerPipeline: read.u32(ptr, 16),
		transformFeedbackPreservesTriangleFanProvokingVertex: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.provokingVertexMode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.provokingVertexMode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationProvokingVertexStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		provokingVertexMode: read.u32(ptr, 16)
	};
	return obj;
}


export function VkHeadlessSurfaceCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkHeadlessSurfaceCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkHeadlessSurfaceCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}

export const VkLineRasterizationModeEXT = {
	VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: 0,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: 1,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: 2,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: 3,
	VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT",
		"1": "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT",
		"2": "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT",
		"3": "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT",
		"2147483647": "VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceLineRasterizationFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceLineRasterizationFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.rectangularLines, true);
	view.setUint32(20+(i*40), obj.bresenhamLines, true);
	view.setUint32(24+(i*40), obj.smoothLines, true);
	view.setUint32(28+(i*40), obj.stippledRectangularLines, true);
	view.setUint32(32+(i*40), obj.stippledBresenhamLines, true);
	view.setUint32(36+(i*40), obj.stippledSmoothLines, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rectangularLines, true);
	view.setUint32(20, obj.bresenhamLines, true);
	view.setUint32(24, obj.smoothLines, true);
	view.setUint32(28, obj.stippledRectangularLines, true);
	view.setUint32(32, obj.stippledBresenhamLines, true);
	view.setUint32(36, obj.stippledSmoothLines, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceLineRasterizationFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rectangularLines: read.u32(ptr, 16),
		bresenhamLines: read.u32(ptr, 20),
		smoothLines: read.u32(ptr, 24),
		stippledRectangularLines: read.u32(ptr, 28),
		stippledBresenhamLines: read.u32(ptr, 32),
		stippledSmoothLines: read.u32(ptr, 36)
	};
	return obj;
}


export function VkPhysicalDeviceLineRasterizationPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceLineRasterizationPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.lineSubPixelPrecisionBits, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.lineSubPixelPrecisionBits, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceLineRasterizationPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		lineSubPixelPrecisionBits: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineRasterizationLineStateCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineRasterizationLineStateCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.lineRasterizationMode, true)
	view.setUint32(20+(i*32), obj.stippledLineEnable, true);
	view.setUint32(24+(i*32), obj.lineStippleFactor, true);
	view.setUint16(28+(i*32), obj.lineStipplePattern, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.lineRasterizationMode, true)
	view.setUint32(20, obj.stippledLineEnable, true);
	view.setUint32(24, obj.lineStippleFactor, true);
	view.setUint16(28, obj.lineStipplePattern, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineRasterizationLineStateCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		lineRasterizationMode: read.u32(ptr, 16),
		stippledLineEnable: read.u32(ptr, 20),
		lineStippleFactor: read.u32(ptr, 24),
		lineStipplePattern: null
	};
	return obj;
}


export function VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.shaderBufferFloat32Atomics, true);
	view.setUint32(20+(i*64), obj.shaderBufferFloat32AtomicAdd, true);
	view.setUint32(24+(i*64), obj.shaderBufferFloat64Atomics, true);
	view.setUint32(28+(i*64), obj.shaderBufferFloat64AtomicAdd, true);
	view.setUint32(32+(i*64), obj.shaderSharedFloat32Atomics, true);
	view.setUint32(36+(i*64), obj.shaderSharedFloat32AtomicAdd, true);
	view.setUint32(40+(i*64), obj.shaderSharedFloat64Atomics, true);
	view.setUint32(44+(i*64), obj.shaderSharedFloat64AtomicAdd, true);
	view.setUint32(48+(i*64), obj.shaderImageFloat32Atomics, true);
	view.setUint32(52+(i*64), obj.shaderImageFloat32AtomicAdd, true);
	view.setUint32(56+(i*64), obj.sparseImageFloat32Atomics, true);
	view.setUint32(60+(i*64), obj.sparseImageFloat32AtomicAdd, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderBufferFloat32Atomics, true);
	view.setUint32(20, obj.shaderBufferFloat32AtomicAdd, true);
	view.setUint32(24, obj.shaderBufferFloat64Atomics, true);
	view.setUint32(28, obj.shaderBufferFloat64AtomicAdd, true);
	view.setUint32(32, obj.shaderSharedFloat32Atomics, true);
	view.setUint32(36, obj.shaderSharedFloat32AtomicAdd, true);
	view.setUint32(40, obj.shaderSharedFloat64Atomics, true);
	view.setUint32(44, obj.shaderSharedFloat64AtomicAdd, true);
	view.setUint32(48, obj.shaderImageFloat32Atomics, true);
	view.setUint32(52, obj.shaderImageFloat32AtomicAdd, true);
	view.setUint32(56, obj.sparseImageFloat32Atomics, true);
	view.setUint32(60, obj.sparseImageFloat32AtomicAdd, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderAtomicFloatFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderBufferFloat32Atomics: read.u32(ptr, 16),
		shaderBufferFloat32AtomicAdd: read.u32(ptr, 20),
		shaderBufferFloat64Atomics: read.u32(ptr, 24),
		shaderBufferFloat64AtomicAdd: read.u32(ptr, 28),
		shaderSharedFloat32Atomics: read.u32(ptr, 32),
		shaderSharedFloat32AtomicAdd: read.u32(ptr, 36),
		shaderSharedFloat64Atomics: read.u32(ptr, 40),
		shaderSharedFloat64AtomicAdd: read.u32(ptr, 44),
		shaderImageFloat32Atomics: read.u32(ptr, 48),
		shaderImageFloat32AtomicAdd: read.u32(ptr, 52),
		sparseImageFloat32Atomics: read.u32(ptr, 56),
		sparseImageFloat32AtomicAdd: read.u32(ptr, 60)
	};
	return obj;
}


export function VkPhysicalDeviceIndexTypeUint8FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceIndexTypeUint8FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.indexTypeUint8, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.indexTypeUint8, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceIndexTypeUint8FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		indexTypeUint8: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.extendedDynamicState, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.extendedDynamicState, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExtendedDynamicStateFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		extendedDynamicState: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.shaderBufferFloat16Atomics, true);
	view.setUint32(20+(i*64), obj.shaderBufferFloat16AtomicAdd, true);
	view.setUint32(24+(i*64), obj.shaderBufferFloat16AtomicMinMax, true);
	view.setUint32(28+(i*64), obj.shaderBufferFloat32AtomicMinMax, true);
	view.setUint32(32+(i*64), obj.shaderBufferFloat64AtomicMinMax, true);
	view.setUint32(36+(i*64), obj.shaderSharedFloat16Atomics, true);
	view.setUint32(40+(i*64), obj.shaderSharedFloat16AtomicAdd, true);
	view.setUint32(44+(i*64), obj.shaderSharedFloat16AtomicMinMax, true);
	view.setUint32(48+(i*64), obj.shaderSharedFloat32AtomicMinMax, true);
	view.setUint32(52+(i*64), obj.shaderSharedFloat64AtomicMinMax, true);
	view.setUint32(56+(i*64), obj.shaderImageFloat32AtomicMinMax, true);
	view.setUint32(60+(i*64), obj.sparseImageFloat32AtomicMinMax, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderBufferFloat16Atomics, true);
	view.setUint32(20, obj.shaderBufferFloat16AtomicAdd, true);
	view.setUint32(24, obj.shaderBufferFloat16AtomicMinMax, true);
	view.setUint32(28, obj.shaderBufferFloat32AtomicMinMax, true);
	view.setUint32(32, obj.shaderBufferFloat64AtomicMinMax, true);
	view.setUint32(36, obj.shaderSharedFloat16Atomics, true);
	view.setUint32(40, obj.shaderSharedFloat16AtomicAdd, true);
	view.setUint32(44, obj.shaderSharedFloat16AtomicMinMax, true);
	view.setUint32(48, obj.shaderSharedFloat32AtomicMinMax, true);
	view.setUint32(52, obj.shaderSharedFloat64AtomicMinMax, true);
	view.setUint32(56, obj.shaderImageFloat32AtomicMinMax, true);
	view.setUint32(60, obj.sparseImageFloat32AtomicMinMax, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderBufferFloat16Atomics: read.u32(ptr, 16),
		shaderBufferFloat16AtomicAdd: read.u32(ptr, 20),
		shaderBufferFloat16AtomicMinMax: read.u32(ptr, 24),
		shaderBufferFloat32AtomicMinMax: read.u32(ptr, 28),
		shaderBufferFloat64AtomicMinMax: read.u32(ptr, 32),
		shaderSharedFloat16Atomics: read.u32(ptr, 36),
		shaderSharedFloat16AtomicAdd: read.u32(ptr, 40),
		shaderSharedFloat16AtomicMinMax: read.u32(ptr, 44),
		shaderSharedFloat32AtomicMinMax: read.u32(ptr, 48),
		shaderSharedFloat64AtomicMinMax: read.u32(ptr, 52),
		shaderImageFloat32AtomicMinMax: read.u32(ptr, 56),
		sparseImageFloat32AtomicMinMax: read.u32(ptr, 60)
	};
	return obj;
}

export const VkIndirectCommandsTokenTypeNV = {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: 0,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: 1,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: 2,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: 3,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: 4,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: 5,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: 6,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: 7,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV",
		"1": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV",
		"2": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV",
		"3": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV",
		"4": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV",
		"5": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV",
		"6": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV",
		"7": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV",
		"2147483647": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV",
}};
export const VkIndirectStateFlagBitsNV = {
	VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: 1,
	VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV",
		"2147483647": "VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV",
}};
export const VkIndirectCommandsLayoutUsageFlagBitsNV = {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: 1,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: 2,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: 4,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV",
		"2": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV",
		"4": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV",
		"2147483647": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV",
}};

export function VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.maxGraphicsShaderGroupCount, true);
	view.setUint32(20+(i*56), obj.maxIndirectSequenceCount, true);
	view.setUint32(24+(i*56), obj.maxIndirectCommandsTokenCount, true);
	view.setUint32(28+(i*56), obj.maxIndirectCommandsStreamCount, true);
	view.setUint32(32+(i*56), obj.maxIndirectCommandsTokenOffset, true);
	view.setUint32(36+(i*56), obj.maxIndirectCommandsStreamStride, true);
	view.setUint32(40+(i*56), obj.minSequencesCountBufferOffsetAlignment, true);
	view.setUint32(44+(i*56), obj.minSequencesIndexBufferOffsetAlignment, true);
	view.setUint32(48+(i*56), obj.minIndirectCommandsBufferOffsetAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxGraphicsShaderGroupCount, true);
	view.setUint32(20, obj.maxIndirectSequenceCount, true);
	view.setUint32(24, obj.maxIndirectCommandsTokenCount, true);
	view.setUint32(28, obj.maxIndirectCommandsStreamCount, true);
	view.setUint32(32, obj.maxIndirectCommandsTokenOffset, true);
	view.setUint32(36, obj.maxIndirectCommandsStreamStride, true);
	view.setUint32(40, obj.minSequencesCountBufferOffsetAlignment, true);
	view.setUint32(44, obj.minSequencesIndexBufferOffsetAlignment, true);
	view.setUint32(48, obj.minIndirectCommandsBufferOffsetAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxGraphicsShaderGroupCount: read.u32(ptr, 16),
		maxIndirectSequenceCount: read.u32(ptr, 20),
		maxIndirectCommandsTokenCount: read.u32(ptr, 24),
		maxIndirectCommandsStreamCount: read.u32(ptr, 28),
		maxIndirectCommandsTokenOffset: read.u32(ptr, 32),
		maxIndirectCommandsStreamStride: read.u32(ptr, 36),
		minSequencesCountBufferOffsetAlignment: read.u32(ptr, 40),
		minSequencesIndexBufferOffsetAlignment: read.u32(ptr, 44),
		minIndirectCommandsBufferOffsetAlignment: read.u32(ptr, 48)
	};
	return obj;
}


export function VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.deviceGeneratedCommands, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceGeneratedCommands, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceGeneratedCommands: read.u32(ptr, 16)
	};
	return obj;
}


export function VkGraphicsShaderGroupCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkGraphicsShaderGroupCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*48), BigInt(obj.pStages||0), true);
	}
	if (obj.pVertexInputState){
		const wrapped = VkPipelineVertexInputStateCreateInfo_to_C(obj.pVertexInputState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*48), BigInt(obj.pVertexInputState||0), true);
	}
	if (obj.pTessellationState){
		const wrapped = VkPipelineTessellationStateCreateInfo_to_C(obj.pTessellationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*48), BigInt(obj.pTessellationState||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pStages||0), true);
	}
	if (obj.pVertexInputState){
		const wrapped = VkPipelineVertexInputStateCreateInfo_to_C(obj.pVertexInputState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pVertexInputState||0), true);
	}
	if (obj.pTessellationState){
		const wrapped = VkPipelineTessellationStateCreateInfo_to_C(obj.pTessellationState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pTessellationState||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGraphicsShaderGroupCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		stageCount: read.u32(ptr, 16),
		pStages: VkPipelineShaderStageCreateInfo_from_C(read.ptr(ptr)),
		pVertexInputState: VkPipelineVertexInputStateCreateInfo_from_C(read.ptr(ptr)),
		pTessellationState: VkPipelineTessellationStateCreateInfo_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkGraphicsPipelineShaderGroupsCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkGraphicsPipelineShaderGroupsCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkGraphicsShaderGroupCreateInfoNV_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*48), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*48), BigInt(obj.pGroups||0), true);
	}
	view.setUint32(32+(i*48), obj.pipelineCount, true);

	view.setBigUint64(40+(i*48), BigInt(obj.pPipelines||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pPipelines||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkGraphicsShaderGroupCreateInfoNV_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pGroups||0), true);
	}
	view.setUint32(32, obj.pipelineCount, true);

	view.setBigUint64(40, BigInt(obj.pPipelines||0), true);
	view.setBigUint64(40, BigInt(obj.pPipelines||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGraphicsPipelineShaderGroupsCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		groupCount: read.u32(ptr, 16),
		pGroups: VkGraphicsShaderGroupCreateInfoNV_from_C(read.ptr(ptr)),
		pipelineCount: read.u32(ptr, 32),
		pPipelines: read.ptr(ptr)
	};
	return obj;
}


export function VkBindShaderGroupIndirectCommandNV_alloc_array(size){
	const buffer = new ArrayBuffer(4*size);
	return ptr(buffer);
}
export function VkBindShaderGroupIndirectCommandNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(4*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*4), obj.groupIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(4);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.groupIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindShaderGroupIndirectCommandNV_from_C(ptr){
	const obj = {
		groupIndex: read.u32(ptr, 0)
	};
	return obj;
}


export function VkBindIndexBufferIndirectCommandNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkBindIndexBufferIndirectCommandNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*16), obj.bufferAddress, true);
	view.setUint32(8+(i*16), obj.size, true);
	view.setUint32(12+(i*16), obj.indexType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.bufferAddress, true);
	view.setUint32(8, obj.size, true);
	view.setUint32(12, obj.indexType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindIndexBufferIndirectCommandNV_from_C(ptr){
	const obj = {
		bufferAddress: null,
		size: read.u32(ptr, 8),
		indexType: read.u32(ptr, 12)
	};
	return obj;
}


export function VkBindVertexBufferIndirectCommandNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkBindVertexBufferIndirectCommandNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*16), obj.bufferAddress, true);
	view.setUint32(8+(i*16), obj.size, true);
	view.setUint32(12+(i*16), obj.stride, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.bufferAddress, true);
	view.setUint32(8, obj.size, true);
	view.setUint32(12, obj.stride, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkBindVertexBufferIndirectCommandNV_from_C(ptr){
	const obj = {
		bufferAddress: null,
		size: read.u32(ptr, 8),
		stride: read.u32(ptr, 12)
	};
	return obj;
}


export function VkSetStateFlagsIndirectCommandNV_alloc_array(size){
	const buffer = new ArrayBuffer(4*size);
	return ptr(buffer);
}
export function VkSetStateFlagsIndirectCommandNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(4*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*4), obj.data, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(4);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.data, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSetStateFlagsIndirectCommandNV_from_C(ptr){
	const obj = {
		data: read.u32(ptr, 0)
	};
	return obj;
}


export function VkIndirectCommandsStreamNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkIndirectCommandsStreamNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{

	view.setBigUint64(0+(i*16), BigInt(obj.buffer||0), true);
	view.setBigUint64(0+(i*16), BigInt(obj.buffer||0), true);

	view.setUint64(8+(i*16), obj.offset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);

	view.setBigUint64(0, BigInt(obj.buffer||0), true);
	view.setBigUint64(0, BigInt(obj.buffer||0), true);

	view.setUint64(8, obj.offset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkIndirectCommandsStreamNV_from_C(ptr){
	const obj = {
		buffer: undefined,
		offset: null
	};
	return obj;
}


export function VkIndirectCommandsLayoutTokenNV_alloc_array(size){
	const buffer = new ArrayBuffer(88*size);
	return ptr(buffer);
}
export function VkIndirectCommandsLayoutTokenNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(88*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*88), obj.sType, true)

	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*88), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*88), obj.tokenType, true)
	view.setUint32(20+(i*88), obj.stream, true);
	view.setUint32(24+(i*88), obj.offset, true);
	view.setUint32(28+(i*88), obj.vertexBindingUnit, true);
	view.setUint32(32+(i*88), obj.vertexDynamicStride, true);

	view.setBigUint64(40+(i*88), BigInt(obj.pushconstantPipelineLayout||0), true);
	view.setBigUint64(40+(i*88), BigInt(obj.pushconstantPipelineLayout||0), true);

	view.setUint32(48+(i*88), obj.pushconstantShaderStageFlags, true);
	view.setUint32(52+(i*88), obj.pushconstantOffset, true);
	view.setUint32(56+(i*88), obj.pushconstantSize, true);
	view.setUint32(60+(i*88), obj.indirectStateFlags, true);
	view.setUint32(64+(i*88), obj.indexTypeCount, true);

	view.setBigUint64(72+(i*88), BigInt(obj.pIndexTypes||0), true);
	view.setBigUint64(72+(i*88), BigInt(obj.pIndexTypes||0), true);


	view.setBigUint64(80+(i*88), BigInt(obj.pIndexTypeValues||0), true);
	view.setBigUint64(80+(i*88), BigInt(obj.pIndexTypeValues||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(88);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.tokenType, true)
	view.setUint32(20, obj.stream, true);
	view.setUint32(24, obj.offset, true);
	view.setUint32(28, obj.vertexBindingUnit, true);
	view.setUint32(32, obj.vertexDynamicStride, true);

	view.setBigUint64(40, BigInt(obj.pushconstantPipelineLayout||0), true);
	view.setBigUint64(40, BigInt(obj.pushconstantPipelineLayout||0), true);

	view.setUint32(48, obj.pushconstantShaderStageFlags, true);
	view.setUint32(52, obj.pushconstantOffset, true);
	view.setUint32(56, obj.pushconstantSize, true);
	view.setUint32(60, obj.indirectStateFlags, true);
	view.setUint32(64, obj.indexTypeCount, true);

	view.setBigUint64(72, BigInt(obj.pIndexTypes||0), true);
	view.setBigUint64(72, BigInt(obj.pIndexTypes||0), true);


	view.setBigUint64(80, BigInt(obj.pIndexTypeValues||0), true);
	view.setBigUint64(80, BigInt(obj.pIndexTypeValues||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkIndirectCommandsLayoutTokenNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		tokenType: read.u32(ptr, 16),
		stream: read.u32(ptr, 20),
		offset: read.u32(ptr, 24),
		vertexBindingUnit: read.u32(ptr, 28),
		vertexDynamicStride: read.u32(ptr, 32),
		pushconstantPipelineLayout: undefined,
		pushconstantShaderStageFlags: read.u32(ptr, 48),
		pushconstantOffset: read.u32(ptr, 52),
		pushconstantSize: read.u32(ptr, 56),
		indirectStateFlags: read.u32(ptr, 60),
		indexTypeCount: read.u32(ptr, 64),
		pIndexTypes: undefined,
		pIndexTypeValues: undefined
	};
	return obj;
}


export function VkIndirectCommandsLayoutCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkIndirectCommandsLayoutCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.flags, true);
	view.setUint32(20+(i*56), obj.pipelineBindPoint, true)
	view.setUint32(24+(i*56), obj.tokenCount, true);
	if (obj.pTokens){
		const wrapped = VkIndirectCommandsLayoutTokenNV_to_C(obj.pTokens, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32+(i*56), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32+(i*56), BigInt(obj.pTokens||0), true);
	}
	view.setUint32(40+(i*56), obj.streamCount, true);

	view.setBigUint64(48+(i*56), BigInt(obj.pStreamStrides||0), true);
	view.setBigUint64(48+(i*56), BigInt(obj.pStreamStrides||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.pipelineBindPoint, true)
	view.setUint32(24, obj.tokenCount, true);
	if (obj.pTokens){
		const wrapped = VkIndirectCommandsLayoutTokenNV_to_C(obj.pTokens, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(32, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(32, BigInt(obj.pTokens||0), true);
	}
	view.setUint32(40, obj.streamCount, true);

	view.setBigUint64(48, BigInt(obj.pStreamStrides||0), true);
	view.setBigUint64(48, BigInt(obj.pStreamStrides||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkIndirectCommandsLayoutCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pipelineBindPoint: read.u32(ptr, 20),
		tokenCount: read.u32(ptr, 24),
		pTokens: VkIndirectCommandsLayoutTokenNV_from_C(read.ptr(ptr)),
		streamCount: read.u32(ptr, 40),
		pStreamStrides: undefined
	};
	return obj;
}


export function VkGeneratedCommandsInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(120*size);
	return ptr(buffer);
}
export function VkGeneratedCommandsInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(120*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*120), obj.sType, true)

	view.setBigUint64(8+(i*120), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*120), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*120), obj.pipelineBindPoint, true)

	view.setBigUint64(24+(i*120), BigInt(obj.pipeline||0), true);
	view.setBigUint64(24+(i*120), BigInt(obj.pipeline||0), true);


	view.setBigUint64(32+(i*120), BigInt(obj.indirectCommandsLayout||0), true);
	view.setBigUint64(32+(i*120), BigInt(obj.indirectCommandsLayout||0), true);

	view.setUint32(40+(i*120), obj.streamCount, true);
	if (obj.pStreams){
		const wrapped = VkIndirectCommandsStreamNV_to_C(obj.pStreams, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48+(i*120), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48+(i*120), BigInt(obj.pStreams||0), true);
	}
	view.setUint32(56+(i*120), obj.sequencesCount, true);

	view.setBigUint64(64+(i*120), BigInt(obj.preprocessBuffer||0), true);
	view.setBigUint64(64+(i*120), BigInt(obj.preprocessBuffer||0), true);

	view.setUint64(72+(i*120), obj.preprocessOffset, true);
	view.setUint64(80+(i*120), obj.preprocessSize, true);

	view.setBigUint64(88+(i*120), BigInt(obj.sequencesCountBuffer||0), true);
	view.setBigUint64(88+(i*120), BigInt(obj.sequencesCountBuffer||0), true);

	view.setUint64(96+(i*120), obj.sequencesCountOffset, true);

	view.setBigUint64(104+(i*120), BigInt(obj.sequencesIndexBuffer||0), true);
	view.setBigUint64(104+(i*120), BigInt(obj.sequencesIndexBuffer||0), true);

	view.setUint64(112+(i*120), obj.sequencesIndexOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(120);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineBindPoint, true)

	view.setBigUint64(24, BigInt(obj.pipeline||0), true);
	view.setBigUint64(24, BigInt(obj.pipeline||0), true);


	view.setBigUint64(32, BigInt(obj.indirectCommandsLayout||0), true);
	view.setBigUint64(32, BigInt(obj.indirectCommandsLayout||0), true);

	view.setUint32(40, obj.streamCount, true);
	if (obj.pStreams){
		const wrapped = VkIndirectCommandsStreamNV_to_C(obj.pStreams, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(48, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(48, BigInt(obj.pStreams||0), true);
	}
	view.setUint32(56, obj.sequencesCount, true);

	view.setBigUint64(64, BigInt(obj.preprocessBuffer||0), true);
	view.setBigUint64(64, BigInt(obj.preprocessBuffer||0), true);

	view.setUint64(72, obj.preprocessOffset, true);
	view.setUint64(80, obj.preprocessSize, true);

	view.setBigUint64(88, BigInt(obj.sequencesCountBuffer||0), true);
	view.setBigUint64(88, BigInt(obj.sequencesCountBuffer||0), true);

	view.setUint64(96, obj.sequencesCountOffset, true);

	view.setBigUint64(104, BigInt(obj.sequencesIndexBuffer||0), true);
	view.setBigUint64(104, BigInt(obj.sequencesIndexBuffer||0), true);

	view.setUint64(112, obj.sequencesIndexOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeneratedCommandsInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineBindPoint: read.u32(ptr, 16),
		pipeline: undefined,
		indirectCommandsLayout: undefined,
		streamCount: read.u32(ptr, 40),
		pStreams: VkIndirectCommandsStreamNV_from_C(read.ptr(ptr)),
		sequencesCount: read.u32(ptr, 56),
		preprocessBuffer: undefined,
		preprocessOffset: null,
		preprocessSize: null,
		sequencesCountBuffer: undefined,
		sequencesCountOffset: null,
		sequencesIndexBuffer: undefined,
		sequencesIndexOffset: null
	};
	return obj;
}


export function VkGeneratedCommandsMemoryRequirementsInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkGeneratedCommandsMemoryRequirementsInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.pipelineBindPoint, true)

	view.setBigUint64(24+(i*48), BigInt(obj.pipeline||0), true);
	view.setBigUint64(24+(i*48), BigInt(obj.pipeline||0), true);


	view.setBigUint64(32+(i*48), BigInt(obj.indirectCommandsLayout||0), true);
	view.setBigUint64(32+(i*48), BigInt(obj.indirectCommandsLayout||0), true);

	view.setUint32(40+(i*48), obj.maxSequencesCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelineBindPoint, true)

	view.setBigUint64(24, BigInt(obj.pipeline||0), true);
	view.setBigUint64(24, BigInt(obj.pipeline||0), true);


	view.setBigUint64(32, BigInt(obj.indirectCommandsLayout||0), true);
	view.setBigUint64(32, BigInt(obj.indirectCommandsLayout||0), true);

	view.setUint32(40, obj.maxSequencesCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGeneratedCommandsMemoryRequirementsInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineBindPoint: read.u32(ptr, 16),
		pipeline: undefined,
		indirectCommandsLayout: undefined,
		maxSequencesCount: read.u32(ptr, 40)
	};
	return obj;
}


export function VkPhysicalDeviceInheritedViewportScissorFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceInheritedViewportScissorFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.inheritedViewportScissor2D, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.inheritedViewportScissor2D, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceInheritedViewportScissorFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		inheritedViewportScissor2D: read.u32(ptr, 16)
	};
	return obj;
}


export function VkCommandBufferInheritanceViewportScissorInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkCommandBufferInheritanceViewportScissorInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.viewportScissor2D, true);
	view.setUint32(20+(i*32), obj.viewportDepthCount, true);
	if (obj.pViewportDepths){
		const wrapped = VkViewport_to_C(obj.pViewportDepths, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pViewportDepths||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.viewportScissor2D, true);
	view.setUint32(20, obj.viewportDepthCount, true);
	if (obj.pViewportDepths){
		const wrapped = VkViewport_to_C(obj.pViewportDepths, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pViewportDepths||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferInheritanceViewportScissorInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		viewportScissor2D: read.u32(ptr, 16),
		viewportDepthCount: read.u32(ptr, 20),
		pViewportDepths: VkViewport_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.texelBufferAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.texelBufferAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		texelBufferAlignment: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderPassTransformBeginInfoQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassTransformBeginInfoQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.transform, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.transform, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassTransformBeginInfoQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		transform: read.u32(ptr, 16)
	};
	return obj;
}


export function VkCommandBufferInheritanceRenderPassTransformInfoQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkCommandBufferInheritanceRenderPassTransformInfoQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.transform, true)
	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(24+(i*40), obj.renderArea.offset.x, true);
	view.setInt32(28+(i*40), obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(32+(i*40), obj.renderArea.extent.width, true);
	view.setUint32(36+(i*40), obj.renderArea.extent.height, true);
	}
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.transform, true)
	if (obj.renderArea){
	if (obj.renderArea.offset){
	view.setInt32(24, obj.renderArea.offset.x, true);
	view.setInt32(28, obj.renderArea.offset.y, true);
	}
	if (obj.renderArea.extent){
	view.setUint32(32, obj.renderArea.extent.width, true);
	view.setUint32(36, obj.renderArea.extent.height, true);
	}
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCommandBufferInheritanceRenderPassTransformInfoQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		transform: read.u32(ptr, 16),
		renderArea: null
	};
	return obj;
}

export const VkDeviceMemoryReportEventTypeEXT = {
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: 0,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: 1,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: 2,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: 3,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: 4,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT",
		"1": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT",
		"2": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT",
		"3": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT",
		"4": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT",
		"2147483647": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.deviceMemoryReport, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.deviceMemoryReport, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDeviceMemoryReportFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		deviceMemoryReport: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDeviceMemoryReportCallbackDataEXT_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkDeviceMemoryReportCallbackDataEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.flags, true);
	view.setUint32(20+(i*64), obj.type, true)
	view.setUint64(24+(i*64), obj.memoryObjectId, true);
	view.setUint64(32+(i*64), obj.size, true);
	view.setUint32(40+(i*64), obj.objectType, true)
	view.setUint64(48+(i*64), obj.objectHandle, true);
	view.setUint32(56+(i*64), obj.heapIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.type, true)
	view.setUint64(24, obj.memoryObjectId, true);
	view.setUint64(32, obj.size, true);
	view.setUint32(40, obj.objectType, true)
	view.setUint64(48, obj.objectHandle, true);
	view.setUint32(56, obj.heapIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceMemoryReportCallbackDataEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		type: read.u32(ptr, 20),
		memoryObjectId: null,
		size: null,
		objectType: read.u32(ptr, 40),
		objectHandle: null,
		heapIndex: read.u32(ptr, 56)
	};
	return obj;
}


export function VkDeviceDeviceMemoryReportCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkDeviceDeviceMemoryReportCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.flags, true);

	view.setBigUint64(24+(i*40), BigInt(obj.pfnUserCallback||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.pfnUserCallback||0), true);


	view.setBigUint64(32+(i*40), BigInt(obj.pUserData||0), true);
	view.setBigUint64(32+(i*40), BigInt(obj.pUserData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);

	view.setBigUint64(24, BigInt(obj.pfnUserCallback||0), true);
	view.setBigUint64(24, BigInt(obj.pfnUserCallback||0), true);


	view.setBigUint64(32, BigInt(obj.pUserData||0), true);
	view.setBigUint64(32, BigInt(obj.pUserData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceDeviceMemoryReportCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		pfnUserCallback: undefined,
		pUserData: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDeviceRobustness2FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRobustness2FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.robustBufferAccess2, true);
	view.setUint32(20+(i*32), obj.robustImageAccess2, true);
	view.setUint32(24+(i*32), obj.nullDescriptor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.robustBufferAccess2, true);
	view.setUint32(20, obj.robustImageAccess2, true);
	view.setUint32(24, obj.nullDescriptor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRobustness2FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		robustBufferAccess2: read.u32(ptr, 16),
		robustImageAccess2: read.u32(ptr, 20),
		nullDescriptor: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceRobustness2PropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRobustness2PropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*32), obj.robustStorageBufferAccessSizeAlignment, true);
	view.setUint64(24+(i*32), obj.robustUniformBufferAccessSizeAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.robustStorageBufferAccessSizeAlignment, true);
	view.setUint64(24, obj.robustUniformBufferAccessSizeAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRobustness2PropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		robustStorageBufferAccessSizeAlignment: null,
		robustUniformBufferAccessSizeAlignment: null
	};
	return obj;
}


export function VkSamplerCustomBorderColorCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSamplerCustomBorderColorCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.customBorderColor||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.customBorderColor||0), true);

	view.setUint32(24+(i*32), obj.format, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.customBorderColor||0), true);
	view.setBigUint64(16, BigInt(obj.customBorderColor||0), true);

	view.setUint32(24, obj.format, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerCustomBorderColorCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		customBorderColor: undefined,
		format: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceCustomBorderColorPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCustomBorderColorPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxCustomBorderColorSamplers, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxCustomBorderColorSamplers, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCustomBorderColorPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxCustomBorderColorSamplers: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceCustomBorderColorFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceCustomBorderColorFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.customBorderColors, true);
	view.setUint32(20+(i*24), obj.customBorderColorWithoutFormat, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.customBorderColors, true);
	view.setUint32(20, obj.customBorderColorWithoutFormat, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceCustomBorderColorFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		customBorderColors: read.u32(ptr, 16),
		customBorderColorWithoutFormat: read.u32(ptr, 20)
	};
	return obj;
}

export const VkDeviceDiagnosticsConfigFlagBitsNV = {
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: 1,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: 2,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: 4,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV: 8,
	VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV: 2147483647,
	keys:{
		"1": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV",
		"2": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV",
		"4": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV",
		"8": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV",
		"2147483647": "VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV",
}};

export function VkPhysicalDeviceDiagnosticsConfigFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDiagnosticsConfigFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.diagnosticsConfig, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.diagnosticsConfig, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDiagnosticsConfigFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		diagnosticsConfig: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDeviceDiagnosticsConfigCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkDeviceDiagnosticsConfigCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDeviceDiagnosticsConfigCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}

export const VkGraphicsPipelineLibraryFlagBitsEXT = {
	VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT: 1,
	VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT: 2,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT: 4,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT: 8,
	VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"1": "VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT",
		"2": "VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT",
		"4": "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT",
		"8": "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT",
		"2147483647": "VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.graphicsPipelineLibrary, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.graphicsPipelineLibrary, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		graphicsPipelineLibrary: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.graphicsPipelineLibraryFastLinking, true);
	view.setUint32(20+(i*24), obj.graphicsPipelineLibraryIndependentInterpolationDecoration, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.graphicsPipelineLibraryFastLinking, true);
	view.setUint32(20, obj.graphicsPipelineLibraryIndependentInterpolationDecoration, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		graphicsPipelineLibraryFastLinking: read.u32(ptr, 16),
		graphicsPipelineLibraryIndependentInterpolationDecoration: read.u32(ptr, 20)
	};
	return obj;
}


export function VkGraphicsPipelineLibraryCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkGraphicsPipelineLibraryCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkGraphicsPipelineLibraryCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderEarlyAndLateFragmentTests, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderEarlyAndLateFragmentTests, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderEarlyAndLateFragmentTests: read.u32(ptr, 16)
	};
	return obj;
}

export const VkFragmentShadingRateTypeNV = {
	VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: 0,
	VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: 1,
	VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV",
		"1": "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV",
		"2147483647": "VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV",
}};
export const VkFragmentShadingRateNV = {
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: 0,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: 1,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: 4,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: 5,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: 6,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: 9,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: 10,
	VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: 11,
	VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: 12,
	VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: 13,
	VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: 14,
	VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: 15,
	VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV",
		"1": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV",
		"4": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV",
		"5": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV",
		"6": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV",
		"9": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV",
		"10": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV",
		"11": "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV",
		"12": "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV",
		"13": "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV",
		"14": "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV",
		"15": "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV",
		"2147483647": "VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV",
}};

export function VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.fragmentShadingRateEnums, true);
	view.setUint32(20+(i*32), obj.supersampleFragmentShadingRates, true);
	view.setUint32(24+(i*32), obj.noInvocationFragmentShadingRates, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentShadingRateEnums, true);
	view.setUint32(20, obj.supersampleFragmentShadingRates, true);
	view.setUint32(24, obj.noInvocationFragmentShadingRates, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentShadingRateEnums: read.u32(ptr, 16),
		supersampleFragmentShadingRates: read.u32(ptr, 20),
		noInvocationFragmentShadingRates: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxFragmentShadingRateInvocationCount, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxFragmentShadingRateInvocationCount, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxFragmentShadingRateInvocationCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineFragmentShadingRateEnumStateCreateInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineFragmentShadingRateEnumStateCreateInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.shadingRateType, true)
	view.setUint32(20+(i*32), obj.shadingRate, true)

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shadingRateType, true)
	view.setUint32(20, obj.shadingRate, true)

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineFragmentShadingRateEnumStateCreateInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shadingRateType: read.u32(ptr, 16),
		shadingRate: read.u32(ptr, 20),
		combinerOps: null
	};
	return obj;
}

export const VkAccelerationStructureMotionInstanceTypeNV = {
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV: 0,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV: 1,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV: 2,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV: 2147483647,
	keys:{
		"0": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV",
		"1": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV",
		"2": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV",
		"2147483647": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV",
}};

export function VkAccelerationStructureGeometryMotionTrianglesDataNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAccelerationStructureGeometryMotionTrianglesDataNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.vertexData||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.vertexData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.vertexData||0), true);
	view.setBigUint64(16, BigInt(obj.vertexData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureGeometryMotionTrianglesDataNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexData: undefined
	};
	return obj;
}


export function VkAccelerationStructureMotionInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAccelerationStructureMotionInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxInstances, true);
	view.setUint32(20+(i*24), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxInstances, true);
	view.setUint32(20, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureMotionInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxInstances: read.u32(ptr, 16),
		flags: read.u32(ptr, 20)
	};
	return obj;
}


export function VkAccelerationStructureMatrixMotionInstanceNV_alloc_array(size){
	const buffer = new ArrayBuffer(NaN*size);
	return ptr(buffer);
}
export function VkAccelerationStructureMatrixMotionInstanceNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(NaN*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.transformT0){

	}
	if (obj.transformT1){

	}
	view.setUint32(NaN+(i*NaN), obj.instanceCustomIndex, true);
	view.setUint32(NaN+(i*NaN), obj.mask, true);
	view.setUint32(NaN+(i*NaN), obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(NaN+(i*NaN), obj.flags, true);
	view.setUint64(NaN+(i*NaN), obj.accelerationStructureReference, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(NaN);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.transformT0){

	}
	if (obj.transformT1){

	}
	view.setUint32(NaN, obj.instanceCustomIndex, true);
	view.setUint32(NaN, obj.mask, true);
	view.setUint32(NaN, obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(NaN, obj.flags, true);
	view.setUint64(NaN, obj.accelerationStructureReference, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureMatrixMotionInstanceNV_from_C(ptr){
	const obj = {
		transformT0: null,
		transformT1: null,
		instanceCustomIndex: read.u32(ptr, NaN),
		mask: read.u32(ptr, NaN),
		instanceShaderBindingTableRecordOffset: read.u32(ptr, NaN),
		flags: read.u32(ptr, NaN),
		accelerationStructureReference: null
	};
	return obj;
}


export function VkSRTDataNV_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkSRTDataNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setFloat32(0+(i*64), obj.sx, true);
	view.setFloat32(4+(i*64), obj.a, true);
	view.setFloat32(8+(i*64), obj.b, true);
	view.setFloat32(12+(i*64), obj.pvx, true);
	view.setFloat32(16+(i*64), obj.sy, true);
	view.setFloat32(20+(i*64), obj.c, true);
	view.setFloat32(24+(i*64), obj.pvy, true);
	view.setFloat32(28+(i*64), obj.sz, true);
	view.setFloat32(32+(i*64), obj.pvz, true);
	view.setFloat32(36+(i*64), obj.qx, true);
	view.setFloat32(40+(i*64), obj.qy, true);
	view.setFloat32(44+(i*64), obj.qz, true);
	view.setFloat32(48+(i*64), obj.qw, true);
	view.setFloat32(52+(i*64), obj.tx, true);
	view.setFloat32(56+(i*64), obj.ty, true);
	view.setFloat32(60+(i*64), obj.tz, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setFloat32(0, obj.sx, true);
	view.setFloat32(4, obj.a, true);
	view.setFloat32(8, obj.b, true);
	view.setFloat32(12, obj.pvx, true);
	view.setFloat32(16, obj.sy, true);
	view.setFloat32(20, obj.c, true);
	view.setFloat32(24, obj.pvy, true);
	view.setFloat32(28, obj.sz, true);
	view.setFloat32(32, obj.pvz, true);
	view.setFloat32(36, obj.qx, true);
	view.setFloat32(40, obj.qy, true);
	view.setFloat32(44, obj.qz, true);
	view.setFloat32(48, obj.qw, true);
	view.setFloat32(52, obj.tx, true);
	view.setFloat32(56, obj.ty, true);
	view.setFloat32(60, obj.tz, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSRTDataNV_from_C(ptr){
	const obj = {
		sx: null,
		a: null,
		b: null,
		pvx: null,
		sy: null,
		c: null,
		pvy: null,
		sz: null,
		pvz: null,
		qx: null,
		qy: null,
		qz: null,
		qw: null,
		tx: null,
		ty: null,
		tz: null
	};
	return obj;
}


export function VkAccelerationStructureSRTMotionInstanceNV_alloc_array(size){
	const buffer = new ArrayBuffer(152*size);
	return ptr(buffer);
}
export function VkAccelerationStructureSRTMotionInstanceNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(152*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	if (obj.transformT0){
	view.setFloat32(0+(i*152), obj.transformT0.sx, true);
	view.setFloat32(4+(i*152), obj.transformT0.a, true);
	view.setFloat32(8+(i*152), obj.transformT0.b, true);
	view.setFloat32(12+(i*152), obj.transformT0.pvx, true);
	view.setFloat32(16+(i*152), obj.transformT0.sy, true);
	view.setFloat32(20+(i*152), obj.transformT0.c, true);
	view.setFloat32(24+(i*152), obj.transformT0.pvy, true);
	view.setFloat32(28+(i*152), obj.transformT0.sz, true);
	view.setFloat32(32+(i*152), obj.transformT0.pvz, true);
	view.setFloat32(36+(i*152), obj.transformT0.qx, true);
	view.setFloat32(40+(i*152), obj.transformT0.qy, true);
	view.setFloat32(44+(i*152), obj.transformT0.qz, true);
	view.setFloat32(48+(i*152), obj.transformT0.qw, true);
	view.setFloat32(52+(i*152), obj.transformT0.tx, true);
	view.setFloat32(56+(i*152), obj.transformT0.ty, true);
	view.setFloat32(60+(i*152), obj.transformT0.tz, true);
	}
	if (obj.transformT1){
	view.setFloat32(64+(i*152), obj.transformT1.sx, true);
	view.setFloat32(68+(i*152), obj.transformT1.a, true);
	view.setFloat32(72+(i*152), obj.transformT1.b, true);
	view.setFloat32(76+(i*152), obj.transformT1.pvx, true);
	view.setFloat32(80+(i*152), obj.transformT1.sy, true);
	view.setFloat32(84+(i*152), obj.transformT1.c, true);
	view.setFloat32(88+(i*152), obj.transformT1.pvy, true);
	view.setFloat32(92+(i*152), obj.transformT1.sz, true);
	view.setFloat32(96+(i*152), obj.transformT1.pvz, true);
	view.setFloat32(100+(i*152), obj.transformT1.qx, true);
	view.setFloat32(104+(i*152), obj.transformT1.qy, true);
	view.setFloat32(108+(i*152), obj.transformT1.qz, true);
	view.setFloat32(112+(i*152), obj.transformT1.qw, true);
	view.setFloat32(116+(i*152), obj.transformT1.tx, true);
	view.setFloat32(120+(i*152), obj.transformT1.ty, true);
	view.setFloat32(124+(i*152), obj.transformT1.tz, true);
	}
	view.setUint32(128+(i*152), obj.instanceCustomIndex, true);
	view.setUint32(132+(i*152), obj.mask, true);
	view.setUint32(136+(i*152), obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(140+(i*152), obj.flags, true);
	view.setUint64(144+(i*152), obj.accelerationStructureReference, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(152);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	if (obj.transformT0){
	view.setFloat32(0, obj.transformT0.sx, true);
	view.setFloat32(4, obj.transformT0.a, true);
	view.setFloat32(8, obj.transformT0.b, true);
	view.setFloat32(12, obj.transformT0.pvx, true);
	view.setFloat32(16, obj.transformT0.sy, true);
	view.setFloat32(20, obj.transformT0.c, true);
	view.setFloat32(24, obj.transformT0.pvy, true);
	view.setFloat32(28, obj.transformT0.sz, true);
	view.setFloat32(32, obj.transformT0.pvz, true);
	view.setFloat32(36, obj.transformT0.qx, true);
	view.setFloat32(40, obj.transformT0.qy, true);
	view.setFloat32(44, obj.transformT0.qz, true);
	view.setFloat32(48, obj.transformT0.qw, true);
	view.setFloat32(52, obj.transformT0.tx, true);
	view.setFloat32(56, obj.transformT0.ty, true);
	view.setFloat32(60, obj.transformT0.tz, true);
	}
	if (obj.transformT1){
	view.setFloat32(64, obj.transformT1.sx, true);
	view.setFloat32(68, obj.transformT1.a, true);
	view.setFloat32(72, obj.transformT1.b, true);
	view.setFloat32(76, obj.transformT1.pvx, true);
	view.setFloat32(80, obj.transformT1.sy, true);
	view.setFloat32(84, obj.transformT1.c, true);
	view.setFloat32(88, obj.transformT1.pvy, true);
	view.setFloat32(92, obj.transformT1.sz, true);
	view.setFloat32(96, obj.transformT1.pvz, true);
	view.setFloat32(100, obj.transformT1.qx, true);
	view.setFloat32(104, obj.transformT1.qy, true);
	view.setFloat32(108, obj.transformT1.qz, true);
	view.setFloat32(112, obj.transformT1.qw, true);
	view.setFloat32(116, obj.transformT1.tx, true);
	view.setFloat32(120, obj.transformT1.ty, true);
	view.setFloat32(124, obj.transformT1.tz, true);
	}
	view.setUint32(128, obj.instanceCustomIndex, true);
	view.setUint32(132, obj.mask, true);
	view.setUint32(136, obj.instanceShaderBindingTableRecordOffset, true);
	view.setUint32(140, obj.flags, true);
	view.setUint64(144, obj.accelerationStructureReference, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureSRTMotionInstanceNV_from_C(ptr){
	const obj = {
		transformT0: null,
		transformT1: null,
		instanceCustomIndex: read.u32(ptr, 128),
		mask: read.u32(ptr, 132),
		instanceShaderBindingTableRecordOffset: read.u32(ptr, 136),
		flags: read.u32(ptr, 140),
		accelerationStructureReference: null
	};
	return obj;
}


export function VkAccelerationStructureMotionInstanceNV_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkAccelerationStructureMotionInstanceNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.type, true)
	view.setUint32(4+(i*16), obj.flags, true);

	view.setBigUint64(8+(i*16), BigInt(obj.data||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.data||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.type, true)
	view.setUint32(4, obj.flags, true);

	view.setBigUint64(8, BigInt(obj.data||0), true);
	view.setBigUint64(8, BigInt(obj.data||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureMotionInstanceNV_from_C(ptr){
	const obj = {
		type: read.u32(ptr, 0),
		flags: read.u32(ptr, 4),
		data: undefined
	};
	return obj;
}


export function VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.rayTracingMotionBlur, true);
	view.setUint32(20+(i*24), obj.rayTracingMotionBlurPipelineTraceRaysIndirect, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rayTracingMotionBlur, true);
	view.setUint32(20, obj.rayTracingMotionBlurPipelineTraceRaysIndirect, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayTracingMotionBlurFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rayTracingMotionBlur: read.u32(ptr, 16),
		rayTracingMotionBlurPipelineTraceRaysIndirect: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.ycbcr2plane444Formats, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.ycbcr2plane444Formats, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		ycbcr2plane444Formats: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.fragmentDensityMapDeferred, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentDensityMapDeferred, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMap2FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityMapDeferred: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.subsampledLoads, true);
	view.setUint32(20+(i*32), obj.subsampledCoarseReconstructionEarlyAccess, true);
	view.setUint32(24+(i*32), obj.maxSubsampledArrayLayers, true);
	view.setUint32(28+(i*32), obj.maxDescriptorSetSubsampledSamplers, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subsampledLoads, true);
	view.setUint32(20, obj.subsampledCoarseReconstructionEarlyAccess, true);
	view.setUint32(24, obj.maxSubsampledArrayLayers, true);
	view.setUint32(28, obj.maxDescriptorSetSubsampledSamplers, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMap2PropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subsampledLoads: read.u32(ptr, 16),
		subsampledCoarseReconstructionEarlyAccess: read.u32(ptr, 20),
		maxSubsampledArrayLayers: read.u32(ptr, 24),
		maxDescriptorSetSubsampledSamplers: read.u32(ptr, 28)
	};
	return obj;
}


export function VkCopyCommandTransformInfoQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkCopyCommandTransformInfoQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.transform, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.transform, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyCommandTransformInfoQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		transform: read.u32(ptr, 16)
	};
	return obj;
}

export const VkImageCompressionFlagBitsEXT = {
	VK_IMAGE_COMPRESSION_DEFAULT_EXT: 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: 1,
	VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT: 2,
	VK_IMAGE_COMPRESSION_DISABLED_EXT: 4,
	VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_IMAGE_COMPRESSION_DEFAULT_EXT",
		"1": "VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT",
		"2": "VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT",
		"4": "VK_IMAGE_COMPRESSION_DISABLED_EXT",
		"2147483647": "VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT",
}};
export const VkImageCompressionFixedRateFlagBitsEXT = {
	VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT: 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT: 1,
	VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT: 2,
	VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT: 4,
	VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT: 8,
	VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT: 16,
	VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT: 32,
	VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT: 64,
	VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT: 128,
	VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT: 256,
	VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT: 512,
	VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT: 1024,
	VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT: 2048,
	VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT: 4096,
	VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT: 8192,
	VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT: 16384,
	VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT: 32768,
	VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT: 65536,
	VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT: 131072,
	VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT: 262144,
	VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT: 524288,
	VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT: 1048576,
	VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT: 2097152,
	VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT: 4194304,
	VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT: 8388608,
	VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT",
		"1": "VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT",
		"2": "VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT",
		"4": "VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT",
		"8": "VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT",
		"16": "VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT",
		"32": "VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT",
		"64": "VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT",
		"128": "VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT",
		"256": "VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT",
		"512": "VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT",
		"1024": "VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT",
		"2048": "VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT",
		"4096": "VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT",
		"8192": "VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT",
		"16384": "VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT",
		"32768": "VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT",
		"65536": "VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT",
		"131072": "VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT",
		"262144": "VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT",
		"524288": "VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT",
		"1048576": "VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT",
		"2097152": "VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT",
		"4194304": "VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT",
		"8388608": "VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT",
		"2147483647": "VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceImageCompressionControlFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageCompressionControlFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imageCompressionControl, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imageCompressionControl, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageCompressionControlFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageCompressionControl: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImageCompressionControlEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageCompressionControlEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.flags, true);
	view.setUint32(20+(i*32), obj.compressionControlPlaneCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pFixedRateFlags||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pFixedRateFlags||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.compressionControlPlaneCount, true);

	view.setBigUint64(24, BigInt(obj.pFixedRateFlags||0), true);
	view.setBigUint64(24, BigInt(obj.pFixedRateFlags||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageCompressionControlEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		compressionControlPlaneCount: read.u32(ptr, 20),
		pFixedRateFlags: undefined
	};
	return obj;
}


export function VkSubresourceLayout2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkSubresourceLayout2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	if (obj.subresourceLayout){
	view.setUint64(16+(i*56), obj.subresourceLayout.offset, true);
	view.setUint64(24+(i*56), obj.subresourceLayout.size, true);
	view.setUint64(32+(i*56), obj.subresourceLayout.rowPitch, true);
	view.setUint64(40+(i*56), obj.subresourceLayout.arrayPitch, true);
	view.setUint64(48+(i*56), obj.subresourceLayout.depthPitch, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.subresourceLayout){
	view.setUint64(16, obj.subresourceLayout.offset, true);
	view.setUint64(24, obj.subresourceLayout.size, true);
	view.setUint64(32, obj.subresourceLayout.rowPitch, true);
	view.setUint64(40, obj.subresourceLayout.arrayPitch, true);
	view.setUint64(48, obj.subresourceLayout.depthPitch, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubresourceLayout2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subresourceLayout: null
	};
	return obj;
}


export function VkImageSubresource2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkImageSubresource2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	if (obj.imageSubresource){
	view.setUint32(16+(i*32), obj.imageSubresource.aspectMask, true);
	view.setUint32(20+(i*32), obj.imageSubresource.mipLevel, true);
	view.setUint32(24+(i*32), obj.imageSubresource.arrayLayer, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.imageSubresource){
	view.setUint32(16, obj.imageSubresource.aspectMask, true);
	view.setUint32(20, obj.imageSubresource.mipLevel, true);
	view.setUint32(24, obj.imageSubresource.arrayLayer, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageSubresource2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageSubresource: null
	};
	return obj;
}


export function VkImageCompressionPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageCompressionPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imageCompressionFlags, true);
	view.setUint32(20+(i*24), obj.imageCompressionFixedRateFlags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imageCompressionFlags, true);
	view.setUint32(20, obj.imageCompressionFixedRateFlags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageCompressionPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageCompressionFlags: read.u32(ptr, 16),
		imageCompressionFixedRateFlags: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.attachmentFeedbackLoopLayout, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachmentFeedbackLoopLayout, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachmentFeedbackLoopLayout: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevice4444FormatsFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevice4444FormatsFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.formatA4R4G4B4, true);
	view.setUint32(20+(i*24), obj.formatA4B4G4R4, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.formatA4R4G4B4, true);
	view.setUint32(20, obj.formatA4B4G4R4, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevice4444FormatsFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		formatA4R4G4B4: read.u32(ptr, 16),
		formatA4B4G4R4: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.rasterizationOrderColorAttachmentAccess, true);
	view.setUint32(20+(i*32), obj.rasterizationOrderDepthAttachmentAccess, true);
	view.setUint32(24+(i*32), obj.rasterizationOrderStencilAttachmentAccess, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rasterizationOrderColorAttachmentAccess, true);
	view.setUint32(20, obj.rasterizationOrderDepthAttachmentAccess, true);
	view.setUint32(24, obj.rasterizationOrderStencilAttachmentAccess, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rasterizationOrderColorAttachmentAccess: read.u32(ptr, 16),
		rasterizationOrderDepthAttachmentAccess: read.u32(ptr, 20),
		rasterizationOrderStencilAttachmentAccess: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.formatRgba10x6WithoutYCbCrSampler, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.formatRgba10x6WithoutYCbCrSampler, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		formatRgba10x6WithoutYCbCrSampler: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.mutableDescriptorType, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.mutableDescriptorType, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		mutableDescriptorType: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMutableDescriptorTypeListVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkMutableDescriptorTypeListVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.descriptorTypeCount, true);

	view.setBigUint64(8+(i*16), BigInt(obj.pDescriptorTypes||0), true);
	view.setBigUint64(8+(i*16), BigInt(obj.pDescriptorTypes||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.descriptorTypeCount, true);

	view.setBigUint64(8, BigInt(obj.pDescriptorTypes||0), true);
	view.setBigUint64(8, BigInt(obj.pDescriptorTypes||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMutableDescriptorTypeListVALVE_from_C(ptr){
	const obj = {
		descriptorTypeCount: read.u32(ptr, 0),
		pDescriptorTypes: undefined
	};
	return obj;
}


export function VkMutableDescriptorTypeCreateInfoVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkMutableDescriptorTypeCreateInfoVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.mutableDescriptorTypeListCount, true);
	if (obj.pMutableDescriptorTypeLists){
		const wrapped = VkMutableDescriptorTypeListVALVE_to_C(obj.pMutableDescriptorTypeLists, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pMutableDescriptorTypeLists||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.mutableDescriptorTypeListCount, true);
	if (obj.pMutableDescriptorTypeLists){
		const wrapped = VkMutableDescriptorTypeListVALVE_to_C(obj.pMutableDescriptorTypeLists, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pMutableDescriptorTypeLists||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMutableDescriptorTypeCreateInfoVALVE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		mutableDescriptorTypeListCount: read.u32(ptr, 16),
		pMutableDescriptorTypeLists: VkMutableDescriptorTypeListVALVE_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.vertexInputDynamicState, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.vertexInputDynamicState, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexInputDynamicState: read.u32(ptr, 16)
	};
	return obj;
}


export function VkVertexInputBindingDescription2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkVertexInputBindingDescription2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.binding, true);
	view.setUint32(20+(i*32), obj.stride, true);
	view.setUint32(24+(i*32), obj.inputRate, true)
	view.setUint32(28+(i*32), obj.divisor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.binding, true);
	view.setUint32(20, obj.stride, true);
	view.setUint32(24, obj.inputRate, true)
	view.setUint32(28, obj.divisor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkVertexInputBindingDescription2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		binding: read.u32(ptr, 16),
		stride: read.u32(ptr, 20),
		inputRate: read.u32(ptr, 24),
		divisor: read.u32(ptr, 28)
	};
	return obj;
}


export function VkVertexInputAttributeDescription2EXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkVertexInputAttributeDescription2EXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.location, true);
	view.setUint32(20+(i*32), obj.binding, true);
	view.setUint32(24+(i*32), obj.format, true)
	view.setUint32(28+(i*32), obj.offset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.location, true);
	view.setUint32(20, obj.binding, true);
	view.setUint32(24, obj.format, true)
	view.setUint32(28, obj.offset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkVertexInputAttributeDescription2EXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		location: read.u32(ptr, 16),
		binding: read.u32(ptr, 20),
		format: read.u32(ptr, 24),
		offset: read.u32(ptr, 28)
	};
	return obj;
}


export function VkPhysicalDeviceDrmPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(56*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDrmPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(56*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*56), obj.sType, true)

	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*56), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*56), obj.hasPrimary, true);
	view.setUint32(20+(i*56), obj.hasRender, true);
	view.setInt64(24+(i*56), obj.primaryMajor, true);
	view.setInt64(32+(i*56), obj.primaryMinor, true);
	view.setInt64(40+(i*56), obj.renderMajor, true);
	view.setInt64(48+(i*56), obj.renderMinor, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(56);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.hasPrimary, true);
	view.setUint32(20, obj.hasRender, true);
	view.setInt64(24, obj.primaryMajor, true);
	view.setInt64(32, obj.primaryMinor, true);
	view.setInt64(40, obj.renderMajor, true);
	view.setInt64(48, obj.renderMinor, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDrmPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		hasPrimary: read.u32(ptr, 16),
		hasRender: read.u32(ptr, 20),
		primaryMajor: null,
		primaryMinor: null,
		renderMajor: null,
		renderMinor: null
	};
	return obj;
}


export function VkPhysicalDeviceDepthClipControlFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDepthClipControlFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.depthClipControl, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.depthClipControl, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDepthClipControlFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		depthClipControl: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineViewportDepthClipControlCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelineViewportDepthClipControlCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.negativeOneToOne, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.negativeOneToOne, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineViewportDepthClipControlCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		negativeOneToOne: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.primitiveTopologyListRestart, true);
	view.setUint32(20+(i*24), obj.primitiveTopologyPatchListRestart, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.primitiveTopologyListRestart, true);
	view.setUint32(20, obj.primitiveTopologyPatchListRestart, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		primitiveTopologyListRestart: read.u32(ptr, 16),
		primitiveTopologyPatchListRestart: read.u32(ptr, 20)
	};
	return obj;
}


export function VkSubpassShadingPipelineCreateInfoHUAWEI_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSubpassShadingPipelineCreateInfoHUAWEI_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.renderPass||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.renderPass||0), true);

	view.setUint32(24+(i*32), obj.subpass, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.renderPass||0), true);
	view.setBigUint64(16, BigInt(obj.renderPass||0), true);

	view.setUint32(24, obj.subpass, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassShadingPipelineCreateInfoHUAWEI_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		renderPass: undefined,
		subpass: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.subpassShading, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subpassShading, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubpassShadingFeaturesHUAWEI_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subpassShading: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxSubpassShadingWorkgroupSizeAspectRatio, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxSubpassShadingWorkgroupSizeAspectRatio, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubpassShadingPropertiesHUAWEI_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxSubpassShadingWorkgroupSizeAspectRatio: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.invocationMask, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.invocationMask, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceInvocationMaskFeaturesHUAWEI_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		invocationMask: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMemoryGetRemoteAddressInfoNV_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkMemoryGetRemoteAddressInfoNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.memory||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.memory||0), true);

	view.setUint32(24+(i*32), obj.handleType, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.memory||0), true);
	view.setBigUint64(16, BigInt(obj.memory||0), true);

	view.setUint32(24, obj.handleType, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMemoryGetRemoteAddressInfoNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		memory: undefined,
		handleType: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.externalMemoryRDMA, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.externalMemoryRDMA, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExternalMemoryRDMAFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		externalMemoryRDMA: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelinePropertiesIdentifierEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPipelinePropertiesIdentifierEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelinePropertiesIdentifierEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelineIdentifier: null
	};
	return obj;
}


export function VkPhysicalDevicePipelinePropertiesFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePipelinePropertiesFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pipelinePropertiesIdentifier, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pipelinePropertiesIdentifier, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePipelinePropertiesFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pipelinePropertiesIdentifier: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.multisampledRenderToSingleSampled, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.multisampledRenderToSingleSampled, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		multisampledRenderToSingleSampled: read.u32(ptr, 16)
	};
	return obj;
}


export function VkSubpassResolvePerformanceQueryEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkSubpassResolvePerformanceQueryEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.optimal, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.optimal, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassResolvePerformanceQueryEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		optimal: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMultisampledRenderToSingleSampledInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkMultisampledRenderToSingleSampledInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.multisampledRenderToSingleSampledEnable, true);
	view.setUint32(20+(i*24), obj.rasterizationSamples, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.multisampledRenderToSingleSampledEnable, true);
	view.setUint32(20, obj.rasterizationSamples, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMultisampledRenderToSingleSampledInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		multisampledRenderToSingleSampledEnable: read.u32(ptr, 16),
		rasterizationSamples: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.extendedDynamicState2, true);
	view.setUint32(20+(i*32), obj.extendedDynamicState2LogicOp, true);
	view.setUint32(24+(i*32), obj.extendedDynamicState2PatchControlPoints, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.extendedDynamicState2, true);
	view.setUint32(20, obj.extendedDynamicState2LogicOp, true);
	view.setUint32(24, obj.extendedDynamicState2PatchControlPoints, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceExtendedDynamicState2FeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		extendedDynamicState2: read.u32(ptr, 16),
		extendedDynamicState2LogicOp: read.u32(ptr, 20),
		extendedDynamicState2PatchControlPoints: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceColorWriteEnableFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceColorWriteEnableFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.colorWriteEnable, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.colorWriteEnable, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceColorWriteEnableFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		colorWriteEnable: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPipelineColorWriteCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineColorWriteCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.attachmentCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pColorWriteEnables||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pColorWriteEnables||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.attachmentCount, true);

	view.setBigUint64(24, BigInt(obj.pColorWriteEnables||0), true);
	view.setBigUint64(24, BigInt(obj.pColorWriteEnables||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineColorWriteCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		attachmentCount: read.u32(ptr, 16),
		pColorWriteEnables: undefined
	};
	return obj;
}


export function VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.primitivesGeneratedQuery, true);
	view.setUint32(20+(i*32), obj.primitivesGeneratedQueryWithRasterizerDiscard, true);
	view.setUint32(24+(i*32), obj.primitivesGeneratedQueryWithNonZeroStreams, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.primitivesGeneratedQuery, true);
	view.setUint32(20, obj.primitivesGeneratedQueryWithRasterizerDiscard, true);
	view.setUint32(24, obj.primitivesGeneratedQueryWithNonZeroStreams, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		primitivesGeneratedQuery: read.u32(ptr, 16),
		primitivesGeneratedQueryWithRasterizerDiscard: read.u32(ptr, 20),
		primitivesGeneratedQueryWithNonZeroStreams: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceImageViewMinLodFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageViewMinLodFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.minLod, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.minLod, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageViewMinLodFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minLod: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImageViewMinLodCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkImageViewMinLodCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setFloat32(16+(i*24), obj.minLod, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setFloat32(16, obj.minLod, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewMinLodCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		minLod: null
	};
	return obj;
}


export function VkPhysicalDeviceMultiDrawFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultiDrawFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.multiDraw, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.multiDraw, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultiDrawFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		multiDraw: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceMultiDrawPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceMultiDrawPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxMultiDrawCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxMultiDrawCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceMultiDrawPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxMultiDrawCount: read.u32(ptr, 16)
	};
	return obj;
}


export function VkMultiDrawInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(8*size);
	return ptr(buffer);
}
export function VkMultiDrawInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(8*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*8), obj.firstVertex, true);
	view.setUint32(4+(i*8), obj.vertexCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(8);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.firstVertex, true);
	view.setUint32(4, obj.vertexCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMultiDrawInfoEXT_from_C(ptr){
	const obj = {
		firstVertex: read.u32(ptr, 0),
		vertexCount: read.u32(ptr, 4)
	};
	return obj;
}


export function VkMultiDrawIndexedInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkMultiDrawIndexedInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.firstIndex, true);
	view.setUint32(4+(i*12), obj.indexCount, true);
	view.setInt32(8+(i*12), obj.vertexOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.firstIndex, true);
	view.setUint32(4, obj.indexCount, true);
	view.setInt32(8, obj.vertexOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkMultiDrawIndexedInfoEXT_from_C(ptr){
	const obj = {
		firstIndex: read.u32(ptr, 0),
		indexCount: read.u32(ptr, 4),
		vertexOffset: null
	};
	return obj;
}


export function VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.image2DViewOf3D, true);
	view.setUint32(20+(i*24), obj.sampler2DViewOf3D, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.image2DViewOf3D, true);
	view.setUint32(20, obj.sampler2DViewOf3D, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImage2DViewOf3DFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		image2DViewOf3D: read.u32(ptr, 16),
		sampler2DViewOf3D: read.u32(ptr, 20)
	};
	return obj;
}


export function VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.borderColorSwizzle, true);
	view.setUint32(20+(i*24), obj.borderColorSwizzleFromImage, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.borderColorSwizzle, true);
	view.setUint32(20, obj.borderColorSwizzleFromImage, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceBorderColorSwizzleFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		borderColorSwizzle: read.u32(ptr, 16),
		borderColorSwizzleFromImage: read.u32(ptr, 20)
	};
	return obj;
}


export function VkSamplerBorderColorComponentMappingCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkSamplerBorderColorComponentMappingCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	if (obj.components){
	view.setUint32(16+(i*40), obj.components.r, true)
	view.setUint32(20+(i*40), obj.components.g, true)
	view.setUint32(24+(i*40), obj.components.b, true)
	view.setUint32(28+(i*40), obj.components.a, true)
	}
	view.setUint32(32+(i*40), obj.srgb, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.components){
	view.setUint32(16, obj.components.r, true)
	view.setUint32(20, obj.components.g, true)
	view.setUint32(24, obj.components.b, true)
	view.setUint32(28, obj.components.a, true)
	}
	view.setUint32(32, obj.srgb, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSamplerBorderColorComponentMappingCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		components: null,
		srgb: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.pageableDeviceLocalMemory, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.pageableDeviceLocalMemory, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pageableDeviceLocalMemory: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.descriptorSetHostMapping, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.descriptorSetHostMapping, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		descriptorSetHostMapping: read.u32(ptr, 16)
	};
	return obj;
}


export function VkDescriptorSetBindingReferenceVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorSetBindingReferenceVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.descriptorSetLayout||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.descriptorSetLayout||0), true);

	view.setUint32(24+(i*32), obj.binding, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.descriptorSetLayout||0), true);
	view.setBigUint64(16, BigInt(obj.descriptorSetLayout||0), true);

	view.setUint32(24, obj.binding, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetBindingReferenceVALVE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		descriptorSetLayout: undefined,
		binding: read.u32(ptr, 24)
	};
	return obj;
}


export function VkDescriptorSetLayoutHostMappingInfoVALVE_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkDescriptorSetLayoutHostMappingInfoVALVE_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.descriptorOffset||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.descriptorOffset||0), true);

	view.setUint32(24+(i*32), obj.descriptorSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.descriptorOffset||0), true);
	view.setBigUint64(16, BigInt(obj.descriptorOffset||0), true);

	view.setUint32(24, obj.descriptorSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkDescriptorSetLayoutHostMappingInfoVALVE_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		descriptorOffset: undefined,
		descriptorSize: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.nonSeamlessCubeMap, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.nonSeamlessCubeMap, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		nonSeamlessCubeMap: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.fragmentDensityMapOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentDensityMapOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityMapOffset: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.fragmentDensityOffsetGranularity){
	view.setUint32(16+(i*24), obj.fragmentDensityOffsetGranularity.width, true);
	view.setUint32(20+(i*24), obj.fragmentDensityOffsetGranularity.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.fragmentDensityOffsetGranularity){
	view.setUint32(16, obj.fragmentDensityOffsetGranularity.width, true);
	view.setUint32(20, obj.fragmentDensityOffsetGranularity.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityOffsetGranularity: null
	};
	return obj;
}


export function VkSubpassFragmentDensityMapOffsetEndInfoQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkSubpassFragmentDensityMapOffsetEndInfoQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.fragmentDensityOffsetCount, true);
	if (obj.pFragmentDensityOffsets){
		const wrapped = VkOffset2D_to_C(obj.pFragmentDensityOffsets, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*32), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*32), BigInt(obj.pFragmentDensityOffsets||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.fragmentDensityOffsetCount, true);
	if (obj.pFragmentDensityOffsets){
		const wrapped = VkOffset2D_to_C(obj.pFragmentDensityOffsets, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pFragmentDensityOffsets||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkSubpassFragmentDensityMapOffsetEndInfoQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		fragmentDensityOffsetCount: read.u32(ptr, 16),
		pFragmentDensityOffsets: VkOffset2D_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceLinearColorAttachmentFeaturesNV_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceLinearColorAttachmentFeaturesNV_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.linearColorAttachment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.linearColorAttachment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceLinearColorAttachmentFeaturesNV_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		linearColorAttachment: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.imageCompressionControlSwapchain, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.imageCompressionControlSwapchain, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		imageCompressionControlSwapchain: read.u32(ptr, 16)
	};
	return obj;
}


export function VkImageViewSampleWeightCreateInfoQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkImageViewSampleWeightCreateInfoQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	if (obj.filterCenter){
	view.setInt32(16+(i*40), obj.filterCenter.x, true);
	view.setInt32(20+(i*40), obj.filterCenter.y, true);
	}
	if (obj.filterSize){
	view.setUint32(24+(i*40), obj.filterSize.width, true);
	view.setUint32(28+(i*40), obj.filterSize.height, true);
	}
	view.setUint32(32+(i*40), obj.numPhases, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.filterCenter){
	view.setInt32(16, obj.filterCenter.x, true);
	view.setInt32(20, obj.filterCenter.y, true);
	}
	if (obj.filterSize){
	view.setUint32(24, obj.filterSize.width, true);
	view.setUint32(28, obj.filterSize.height, true);
	}
	view.setUint32(32, obj.numPhases, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkImageViewSampleWeightCreateInfoQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		filterCenter: null,
		filterSize: null,
		numPhases: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDeviceImageProcessingFeaturesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageProcessingFeaturesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.textureSampleWeighted, true);
	view.setUint32(20+(i*32), obj.textureBoxFilter, true);
	view.setUint32(24+(i*32), obj.textureBlockMatch, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.textureSampleWeighted, true);
	view.setUint32(20, obj.textureBoxFilter, true);
	view.setUint32(24, obj.textureBlockMatch, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageProcessingFeaturesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		textureSampleWeighted: read.u32(ptr, 16),
		textureBoxFilter: read.u32(ptr, 20),
		textureBlockMatch: read.u32(ptr, 24)
	};
	return obj;
}


export function VkPhysicalDeviceImageProcessingPropertiesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceImageProcessingPropertiesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.maxWeightFilterPhases, true);
	if (obj.maxWeightFilterDimension){
	view.setUint32(20+(i*48), obj.maxWeightFilterDimension.width, true);
	view.setUint32(24+(i*48), obj.maxWeightFilterDimension.height, true);
	}
	if (obj.maxBlockMatchRegion){
	view.setUint32(28+(i*48), obj.maxBlockMatchRegion.width, true);
	view.setUint32(32+(i*48), obj.maxBlockMatchRegion.height, true);
	}
	if (obj.maxBoxFilterBlockSize){
	view.setUint32(36+(i*48), obj.maxBoxFilterBlockSize.width, true);
	view.setUint32(40+(i*48), obj.maxBoxFilterBlockSize.height, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxWeightFilterPhases, true);
	if (obj.maxWeightFilterDimension){
	view.setUint32(20, obj.maxWeightFilterDimension.width, true);
	view.setUint32(24, obj.maxWeightFilterDimension.height, true);
	}
	if (obj.maxBlockMatchRegion){
	view.setUint32(28, obj.maxBlockMatchRegion.width, true);
	view.setUint32(32, obj.maxBlockMatchRegion.height, true);
	}
	if (obj.maxBoxFilterBlockSize){
	view.setUint32(36, obj.maxBoxFilterBlockSize.width, true);
	view.setUint32(40, obj.maxBoxFilterBlockSize.height, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceImageProcessingPropertiesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxWeightFilterPhases: read.u32(ptr, 16),
		maxWeightFilterDimension: null,
		maxBlockMatchRegion: null,
		maxBoxFilterBlockSize: null
	};
	return obj;
}

export const VkSubpassMergeStatusEXT = {
	VK_SUBPASS_MERGE_STATUS_MERGED_EXT: 0,
	VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: 1,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT: 2,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT: 3,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT: 4,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT: 5,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT: 6,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT: 7,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT: 8,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT: 9,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT: 10,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT: 11,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT: 12,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT: 13,
	VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: 2147483647,
	keys:{
		"0": "VK_SUBPASS_MERGE_STATUS_MERGED_EXT",
		"1": "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT",
		"2": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT",
		"3": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT",
		"4": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT",
		"5": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT",
		"6": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT",
		"7": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT",
		"8": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT",
		"9": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT",
		"10": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT",
		"11": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT",
		"12": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT",
		"13": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT",
		"2147483647": "VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT",
}};

export function VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.subpassMergeFeedback, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.subpassMergeFeedback, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		subpassMergeFeedback: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderPassCreationControlEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassCreationControlEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.disallowMerging, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.disallowMerging, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassCreationControlEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		disallowMerging: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderPassCreationFeedbackInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(4*size);
	return ptr(buffer);
}
export function VkRenderPassCreationFeedbackInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(4*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*4), obj.postMergeSubpassCount, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(4);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.postMergeSubpassCount, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassCreationFeedbackInfoEXT_from_C(ptr){
	const obj = {
		postMergeSubpassCount: read.u32(ptr, 0)
	};
	return obj;
}


export function VkRenderPassCreationFeedbackCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassCreationFeedbackCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.pRenderPassFeedback){
		const wrapped = VkRenderPassCreationFeedbackInfoEXT_to_C(obj.pRenderPassFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pRenderPassFeedback||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pRenderPassFeedback){
		const wrapped = VkRenderPassCreationFeedbackInfoEXT_to_C(obj.pRenderPassFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pRenderPassFeedback||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassCreationFeedbackCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pRenderPassFeedback: VkRenderPassCreationFeedbackInfoEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkRenderPassSubpassFeedbackInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassSubpassFeedbackInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.subpassMergeStatus, true)

	view.setUint32(16+(i*24), obj.postMergeIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.subpassMergeStatus, true)

	view.setUint32(16, obj.postMergeIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassSubpassFeedbackInfoEXT_from_C(ptr){
	const obj = {
		subpassMergeStatus: read.u32(ptr, 0),
		description: null,
		postMergeIndex: read.u32(ptr, 16)
	};
	return obj;
}


export function VkRenderPassSubpassFeedbackCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRenderPassSubpassFeedbackCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	if (obj.pSubpassFeedback){
		const wrapped = VkRenderPassSubpassFeedbackInfoEXT_to_C(obj.pSubpassFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16+(i*24), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16+(i*24), BigInt(obj.pSubpassFeedback||0), true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.pSubpassFeedback){
		const wrapped = VkRenderPassSubpassFeedbackInfoEXT_to_C(obj.pSubpassFeedback, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(16, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(16, BigInt(obj.pSubpassFeedback||0), true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRenderPassSubpassFeedbackCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pSubpassFeedback: VkRenderPassSubpassFeedbackInfoEXT_from_C(read.ptr(ptr))
	};
	return obj;
}


export function VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.shaderModuleIdentifier, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderModuleIdentifier, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderModuleIdentifier: read.u32(ptr, 16)
	};
	return obj;
}


export function VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderModuleIdentifierAlgorithmUUID: null
	};
	return obj;
}


export function VkPipelineShaderStageModuleIdentifierCreateInfoEXT_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkPipelineShaderStageModuleIdentifierCreateInfoEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.identifierSize, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pIdentifier||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pIdentifier||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.identifierSize, true);

	view.setBigUint64(24, BigInt(obj.pIdentifier||0), true);
	view.setBigUint64(24, BigInt(obj.pIdentifier||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPipelineShaderStageModuleIdentifierCreateInfoEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		identifierSize: read.u32(ptr, 16),
		pIdentifier: undefined
	};
	return obj;
}


export function VkShaderModuleIdentifierEXT_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkShaderModuleIdentifierEXT_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.identifierSize, true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.identifierSize, true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkShaderModuleIdentifierEXT_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		identifierSize: read.u32(ptr, 16),
		identifier: null
	};
	return obj;
}


export function VkPhysicalDeviceTilePropertiesFeaturesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceTilePropertiesFeaturesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.tileProperties, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.tileProperties, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceTilePropertiesFeaturesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		tileProperties: read.u32(ptr, 16)
	};
	return obj;
}


export function VkTilePropertiesQCOM_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkTilePropertiesQCOM_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	if (obj.tileSize){
	view.setUint32(16+(i*48), obj.tileSize.width, true);
	view.setUint32(20+(i*48), obj.tileSize.height, true);
	view.setUint32(24+(i*48), obj.tileSize.depth, true);
	}
	if (obj.apronSize){
	view.setUint32(28+(i*48), obj.apronSize.width, true);
	view.setUint32(32+(i*48), obj.apronSize.height, true);
	}
	if (obj.origin){
	view.setInt32(36+(i*48), obj.origin.x, true);
	view.setInt32(40+(i*48), obj.origin.y, true);
	}
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	if (obj.tileSize){
	view.setUint32(16, obj.tileSize.width, true);
	view.setUint32(20, obj.tileSize.height, true);
	view.setUint32(24, obj.tileSize.depth, true);
	}
	if (obj.apronSize){
	view.setUint32(28, obj.apronSize.width, true);
	view.setUint32(32, obj.apronSize.height, true);
	}
	if (obj.origin){
	view.setInt32(36, obj.origin.x, true);
	view.setInt32(40, obj.origin.y, true);
	}
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTilePropertiesQCOM_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		tileSize: null,
		apronSize: null,
		origin: null
	};
	return obj;
}


export function VkPhysicalDeviceAmigoProfilingFeaturesSEC_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceAmigoProfilingFeaturesSEC_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.amigoProfiling, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.amigoProfiling, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceAmigoProfilingFeaturesSEC_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		amigoProfiling: read.u32(ptr, 16)
	};
	return obj;
}


export function VkAmigoProfilingSubmitInfoSEC_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAmigoProfilingSubmitInfoSEC_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*32), obj.firstDrawTimestamp, true);
	view.setUint64(24+(i*32), obj.swapBufferTimestamp, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.firstDrawTimestamp, true);
	view.setUint64(24, obj.swapBufferTimestamp, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAmigoProfilingSubmitInfoSEC_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		firstDrawTimestamp: null,
		swapBufferTimestamp: null
	};
	return obj;
}

export const VkBuildAccelerationStructureModeKHR = {
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: 0,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: 1,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR",
		"1": "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR",
		"2147483647": "VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR",
}};
export const VkAccelerationStructureBuildTypeKHR = {
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: 0,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: 1,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: 2,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR",
		"1": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR",
		"2": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR",
		"2147483647": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR",
}};
export const VkAccelerationStructureCompatibilityKHR = {
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: 0,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: 1,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR",
		"1": "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR",
		"2147483647": "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR",
}};
export const VkAccelerationStructureCreateFlagBitsKHR = {
	VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: 1,
	VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV: 4,
	VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR: 2147483647,
	keys:{
		"1": "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
		"4": "VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV",
		"2147483647": "VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR",
}};

export function VkAccelerationStructureBuildRangeInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(16*size);
	return ptr(buffer);
}
export function VkAccelerationStructureBuildRangeInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(16*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*16), obj.primitiveCount, true);
	view.setUint32(4+(i*16), obj.primitiveOffset, true);
	view.setUint32(8+(i*16), obj.firstVertex, true);
	view.setUint32(12+(i*16), obj.transformOffset, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(16);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.primitiveCount, true);
	view.setUint32(4, obj.primitiveOffset, true);
	view.setUint32(8, obj.firstVertex, true);
	view.setUint32(12, obj.transformOffset, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureBuildRangeInfoKHR_from_C(ptr){
	const obj = {
		primitiveCount: read.u32(ptr, 0),
		primitiveOffset: read.u32(ptr, 4),
		firstVertex: read.u32(ptr, 8),
		transformOffset: read.u32(ptr, 12)
	};
	return obj;
}


export function VkAccelerationStructureGeometryTrianglesDataKHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkAccelerationStructureGeometryTrianglesDataKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.vertexFormat, true)

	view.setBigUint64(24+(i*64), BigInt(obj.vertexData||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.vertexData||0), true);

	view.setUint64(32+(i*64), obj.vertexStride, true);
	view.setUint32(40+(i*64), obj.maxVertex, true);
	view.setUint32(44+(i*64), obj.indexType, true)

	view.setBigUint64(48+(i*64), BigInt(obj.indexData||0), true);
	view.setBigUint64(48+(i*64), BigInt(obj.indexData||0), true);


	view.setBigUint64(56+(i*64), BigInt(obj.transformData||0), true);
	view.setBigUint64(56+(i*64), BigInt(obj.transformData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.vertexFormat, true)

	view.setBigUint64(24, BigInt(obj.vertexData||0), true);
	view.setBigUint64(24, BigInt(obj.vertexData||0), true);

	view.setUint64(32, obj.vertexStride, true);
	view.setUint32(40, obj.maxVertex, true);
	view.setUint32(44, obj.indexType, true)

	view.setBigUint64(48, BigInt(obj.indexData||0), true);
	view.setBigUint64(48, BigInt(obj.indexData||0), true);


	view.setBigUint64(56, BigInt(obj.transformData||0), true);
	view.setBigUint64(56, BigInt(obj.transformData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureGeometryTrianglesDataKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		vertexFormat: read.u32(ptr, 16),
		vertexData: undefined,
		vertexStride: null,
		maxVertex: read.u32(ptr, 40),
		indexType: read.u32(ptr, 44),
		indexData: undefined,
		transformData: undefined
	};
	return obj;
}


export function VkAccelerationStructureGeometryAabbsDataKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAccelerationStructureGeometryAabbsDataKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*32), BigInt(obj.data||0), true);
	view.setBigUint64(16+(i*32), BigInt(obj.data||0), true);

	view.setUint64(24+(i*32), obj.stride, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.data||0), true);
	view.setBigUint64(16, BigInt(obj.data||0), true);

	view.setUint64(24, obj.stride, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureGeometryAabbsDataKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		data: undefined,
		stride: null
	};
	return obj;
}


export function VkAccelerationStructureGeometryInstancesDataKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkAccelerationStructureGeometryInstancesDataKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.arrayOfPointers, true);

	view.setBigUint64(24+(i*32), BigInt(obj.data||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.data||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.arrayOfPointers, true);

	view.setBigUint64(24, BigInt(obj.data||0), true);
	view.setBigUint64(24, BigInt(obj.data||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureGeometryInstancesDataKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		arrayOfPointers: read.u32(ptr, 16),
		data: undefined
	};
	return obj;
}


export function VkAccelerationStructureGeometryKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkAccelerationStructureGeometryKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.geometryType, true)

	view.setBigUint64(24+(i*40), BigInt(obj.geometry||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.geometry||0), true);

	view.setUint32(32+(i*40), obj.flags, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.geometryType, true)

	view.setBigUint64(24, BigInt(obj.geometry||0), true);
	view.setBigUint64(24, BigInt(obj.geometry||0), true);

	view.setUint32(32, obj.flags, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureGeometryKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		geometryType: read.u32(ptr, 16),
		geometry: undefined,
		flags: read.u32(ptr, 32)
	};
	return obj;
}


export function VkAccelerationStructureBuildGeometryInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(80*size);
	return ptr(buffer);
}
export function VkAccelerationStructureBuildGeometryInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(80*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*80), obj.sType, true)

	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*80), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*80), obj.type, true)
	view.setUint32(20+(i*80), obj.flags, true);
	view.setUint32(24+(i*80), obj.mode, true)

	view.setBigUint64(32+(i*80), BigInt(obj.srcAccelerationStructure||0), true);
	view.setBigUint64(32+(i*80), BigInt(obj.srcAccelerationStructure||0), true);


	view.setBigUint64(40+(i*80), BigInt(obj.dstAccelerationStructure||0), true);
	view.setBigUint64(40+(i*80), BigInt(obj.dstAccelerationStructure||0), true);

	view.setUint32(48+(i*80), obj.geometryCount, true);
	if (obj.pGeometries){
		const wrapped = VkAccelerationStructureGeometryKHR_to_C(obj.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*80), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*80), BigInt(obj.pGeometries||0), true);
	}

	view.setBigUint64(64+(i*80), BigInt(obj.ppGeometries||0), true);
	view.setBigUint64(64+(i*80), BigInt(obj.ppGeometries||0), true);


	view.setBigUint64(72+(i*80), BigInt(obj.scratchData||0), true);
	view.setBigUint64(72+(i*80), BigInt(obj.scratchData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(80);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	view.setUint32(20, obj.flags, true);
	view.setUint32(24, obj.mode, true)

	view.setBigUint64(32, BigInt(obj.srcAccelerationStructure||0), true);
	view.setBigUint64(32, BigInt(obj.srcAccelerationStructure||0), true);


	view.setBigUint64(40, BigInt(obj.dstAccelerationStructure||0), true);
	view.setBigUint64(40, BigInt(obj.dstAccelerationStructure||0), true);

	view.setUint32(48, obj.geometryCount, true);
	if (obj.pGeometries){
		const wrapped = VkAccelerationStructureGeometryKHR_to_C(obj.pGeometries, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pGeometries||0), true);
	}

	view.setBigUint64(64, BigInt(obj.ppGeometries||0), true);
	view.setBigUint64(64, BigInt(obj.ppGeometries||0), true);


	view.setBigUint64(72, BigInt(obj.scratchData||0), true);
	view.setBigUint64(72, BigInt(obj.scratchData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureBuildGeometryInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		flags: read.u32(ptr, 20),
		mode: read.u32(ptr, 24),
		srcAccelerationStructure: undefined,
		dstAccelerationStructure: undefined,
		geometryCount: read.u32(ptr, 48),
		pGeometries: VkAccelerationStructureGeometryKHR_from_C(read.ptr(ptr)),
		ppGeometries: read.ptr(ptr),
		scratchData: undefined
	};
	return obj;
}


export function VkAccelerationStructureCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkAccelerationStructureCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*64), obj.createFlags, true);

	view.setBigUint64(24+(i*64), BigInt(obj.buffer||0), true);
	view.setBigUint64(24+(i*64), BigInt(obj.buffer||0), true);

	view.setUint64(32+(i*64), obj.offset, true);
	view.setUint64(40+(i*64), obj.size, true);
	view.setUint32(48+(i*64), obj.type, true)
	view.setUint64(56+(i*64), obj.deviceAddress, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.createFlags, true);

	view.setBigUint64(24, BigInt(obj.buffer||0), true);
	view.setBigUint64(24, BigInt(obj.buffer||0), true);

	view.setUint64(32, obj.offset, true);
	view.setUint64(40, obj.size, true);
	view.setUint32(48, obj.type, true)
	view.setUint64(56, obj.deviceAddress, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		createFlags: read.u32(ptr, 16),
		buffer: undefined,
		offset: null,
		size: null,
		type: read.u32(ptr, 48),
		deviceAddress: null
	};
	return obj;
}


export function VkWriteDescriptorSetAccelerationStructureKHR_alloc_array(size){
	const buffer = new ArrayBuffer(32*size);
	return ptr(buffer);
}
export function VkWriteDescriptorSetAccelerationStructureKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(32*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*32), obj.sType, true)

	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*32), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*32), obj.accelerationStructureCount, true);

	view.setBigUint64(24+(i*32), BigInt(obj.pAccelerationStructures||0), true);
	view.setBigUint64(24+(i*32), BigInt(obj.pAccelerationStructures||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(32);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.accelerationStructureCount, true);

	view.setBigUint64(24, BigInt(obj.pAccelerationStructures||0), true);
	view.setBigUint64(24, BigInt(obj.pAccelerationStructures||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkWriteDescriptorSetAccelerationStructureKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructureCount: read.u32(ptr, 16),
		pAccelerationStructures: read.ptr(ptr)
	};
	return obj;
}


export function VkPhysicalDeviceAccelerationStructureFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceAccelerationStructureFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.accelerationStructure, true);
	view.setUint32(20+(i*40), obj.accelerationStructureCaptureReplay, true);
	view.setUint32(24+(i*40), obj.accelerationStructureIndirectBuild, true);
	view.setUint32(28+(i*40), obj.accelerationStructureHostCommands, true);
	view.setUint32(32+(i*40), obj.descriptorBindingAccelerationStructureUpdateAfterBind, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.accelerationStructure, true);
	view.setUint32(20, obj.accelerationStructureCaptureReplay, true);
	view.setUint32(24, obj.accelerationStructureIndirectBuild, true);
	view.setUint32(28, obj.accelerationStructureHostCommands, true);
	view.setUint32(32, obj.descriptorBindingAccelerationStructureUpdateAfterBind, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceAccelerationStructureFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructure: read.u32(ptr, 16),
		accelerationStructureCaptureReplay: read.u32(ptr, 20),
		accelerationStructureIndirectBuild: read.u32(ptr, 24),
		accelerationStructureHostCommands: read.u32(ptr, 28),
		descriptorBindingAccelerationStructureUpdateAfterBind: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDeviceAccelerationStructurePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(64*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceAccelerationStructurePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(64*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*64), obj.sType, true)

	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*64), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*64), obj.maxGeometryCount, true);
	view.setUint64(24+(i*64), obj.maxInstanceCount, true);
	view.setUint64(32+(i*64), obj.maxPrimitiveCount, true);
	view.setUint32(40+(i*64), obj.maxPerStageDescriptorAccelerationStructures, true);
	view.setUint32(44+(i*64), obj.maxPerStageDescriptorUpdateAfterBindAccelerationStructures, true);
	view.setUint32(48+(i*64), obj.maxDescriptorSetAccelerationStructures, true);
	view.setUint32(52+(i*64), obj.maxDescriptorSetUpdateAfterBindAccelerationStructures, true);
	view.setUint32(56+(i*64), obj.minAccelerationStructureScratchOffsetAlignment, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(64);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.maxGeometryCount, true);
	view.setUint64(24, obj.maxInstanceCount, true);
	view.setUint64(32, obj.maxPrimitiveCount, true);
	view.setUint32(40, obj.maxPerStageDescriptorAccelerationStructures, true);
	view.setUint32(44, obj.maxPerStageDescriptorUpdateAfterBindAccelerationStructures, true);
	view.setUint32(48, obj.maxDescriptorSetAccelerationStructures, true);
	view.setUint32(52, obj.maxDescriptorSetUpdateAfterBindAccelerationStructures, true);
	view.setUint32(56, obj.minAccelerationStructureScratchOffsetAlignment, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceAccelerationStructurePropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxGeometryCount: null,
		maxInstanceCount: null,
		maxPrimitiveCount: null,
		maxPerStageDescriptorAccelerationStructures: read.u32(ptr, 40),
		maxPerStageDescriptorUpdateAfterBindAccelerationStructures: read.u32(ptr, 44),
		maxDescriptorSetAccelerationStructures: read.u32(ptr, 48),
		maxDescriptorSetUpdateAfterBindAccelerationStructures: read.u32(ptr, 52),
		minAccelerationStructureScratchOffsetAlignment: read.u32(ptr, 56)
	};
	return obj;
}


export function VkAccelerationStructureDeviceAddressInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAccelerationStructureDeviceAddressInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.accelerationStructure||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.accelerationStructure||0), true);
	view.setBigUint64(16, BigInt(obj.accelerationStructure||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureDeviceAddressInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructure: undefined
	};
	return obj;
}


export function VkAccelerationStructureVersionInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkAccelerationStructureVersionInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*24), BigInt(obj.pVersionData||0), true);
	view.setBigUint64(16+(i*24), BigInt(obj.pVersionData||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.pVersionData||0), true);
	view.setBigUint64(16, BigInt(obj.pVersionData||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureVersionInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		pVersionData: undefined
	};
	return obj;
}


export function VkCopyAccelerationStructureToMemoryInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkCopyAccelerationStructureToMemoryInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);


	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);

	view.setUint32(32+(i*40), obj.mode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.src||0), true);
	view.setBigUint64(16, BigInt(obj.src||0), true);


	view.setBigUint64(24, BigInt(obj.dst||0), true);
	view.setBigUint64(24, BigInt(obj.dst||0), true);

	view.setUint32(32, obj.mode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyAccelerationStructureToMemoryInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		src: undefined,
		dst: undefined,
		mode: read.u32(ptr, 32)
	};
	return obj;
}


export function VkCopyMemoryToAccelerationStructureInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkCopyMemoryToAccelerationStructureInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);


	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);

	view.setUint32(32+(i*40), obj.mode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.src||0), true);
	view.setBigUint64(16, BigInt(obj.src||0), true);


	view.setBigUint64(24, BigInt(obj.dst||0), true);
	view.setBigUint64(24, BigInt(obj.dst||0), true);

	view.setUint32(32, obj.mode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyMemoryToAccelerationStructureInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		src: undefined,
		dst: undefined,
		mode: read.u32(ptr, 32)
	};
	return obj;
}


export function VkCopyAccelerationStructureInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkCopyAccelerationStructureInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);


	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);
	view.setBigUint64(16+(i*40), BigInt(obj.src||0), true);


	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);
	view.setBigUint64(24+(i*40), BigInt(obj.dst||0), true);

	view.setUint32(32+(i*40), obj.mode, true)
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);


	view.setBigUint64(16, BigInt(obj.src||0), true);
	view.setBigUint64(16, BigInt(obj.src||0), true);


	view.setBigUint64(24, BigInt(obj.dst||0), true);
	view.setBigUint64(24, BigInt(obj.dst||0), true);

	view.setUint32(32, obj.mode, true)
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkCopyAccelerationStructureInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		src: undefined,
		dst: undefined,
		mode: read.u32(ptr, 32)
	};
	return obj;
}


export function VkAccelerationStructureBuildSizesInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkAccelerationStructureBuildSizesInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint64(16+(i*40), obj.accelerationStructureSize, true);
	view.setUint64(24+(i*40), obj.updateScratchSize, true);
	view.setUint64(32+(i*40), obj.buildScratchSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint64(16, obj.accelerationStructureSize, true);
	view.setUint64(24, obj.updateScratchSize, true);
	view.setUint64(32, obj.buildScratchSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkAccelerationStructureBuildSizesInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		accelerationStructureSize: null,
		updateScratchSize: null,
		buildScratchSize: null
	};
	return obj;
}

export const VkShaderGroupShaderKHR = {
	VK_SHADER_GROUP_SHADER_GENERAL_KHR: 0,
	VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: 1,
	VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: 2,
	VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: 3,
	VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: 2147483647,
	keys:{
		"0": "VK_SHADER_GROUP_SHADER_GENERAL_KHR",
		"1": "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR",
		"2": "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR",
		"3": "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR",
		"2147483647": "VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR",
}};

export function VkRayTracingShaderGroupCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkRayTracingShaderGroupCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.type, true)
	view.setUint32(20+(i*48), obj.generalShader, true);
	view.setUint32(24+(i*48), obj.closestHitShader, true);
	view.setUint32(28+(i*48), obj.anyHitShader, true);
	view.setUint32(32+(i*48), obj.intersectionShader, true);

	view.setBigUint64(40+(i*48), BigInt(obj.pShaderGroupCaptureReplayHandle||0), true);
	view.setBigUint64(40+(i*48), BigInt(obj.pShaderGroupCaptureReplayHandle||0), true);

	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.type, true)
	view.setUint32(20, obj.generalShader, true);
	view.setUint32(24, obj.closestHitShader, true);
	view.setUint32(28, obj.anyHitShader, true);
	view.setUint32(32, obj.intersectionShader, true);

	view.setBigUint64(40, BigInt(obj.pShaderGroupCaptureReplayHandle||0), true);
	view.setBigUint64(40, BigInt(obj.pShaderGroupCaptureReplayHandle||0), true);

	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRayTracingShaderGroupCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		type: read.u32(ptr, 16),
		generalShader: read.u32(ptr, 20),
		closestHitShader: read.u32(ptr, 24),
		anyHitShader: read.u32(ptr, 28),
		intersectionShader: read.u32(ptr, 32),
		pShaderGroupCaptureReplayHandle: read.ptr(ptr)
	};
	return obj;
}


export function VkRayTracingPipelineInterfaceCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkRayTracingPipelineInterfaceCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.maxPipelineRayPayloadSize, true);
	view.setUint32(20+(i*24), obj.maxPipelineRayHitAttributeSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.maxPipelineRayPayloadSize, true);
	view.setUint32(20, obj.maxPipelineRayHitAttributeSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRayTracingPipelineInterfaceCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		maxPipelineRayPayloadSize: read.u32(ptr, 16),
		maxPipelineRayHitAttributeSize: read.u32(ptr, 20)
	};
	return obj;
}


export function VkRayTracingPipelineCreateInfoKHR_alloc_array(size){
	const buffer = new ArrayBuffer(104*size);
	return ptr(buffer);
}
export function VkRayTracingPipelineCreateInfoKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(104*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*104), obj.sType, true)

	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*104), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*104), obj.flags, true);
	view.setUint32(20+(i*104), obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24+(i*104), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24+(i*104), BigInt(obj.pStages||0), true);
	}
	view.setUint32(32+(i*104), obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkRayTracingShaderGroupCreateInfoKHR_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40+(i*104), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40+(i*104), BigInt(obj.pGroups||0), true);
	}
	view.setUint32(48+(i*104), obj.maxPipelineRayRecursionDepth, true);
	if (obj.pLibraryInfo){
		const wrapped = VkPipelineLibraryCreateInfoKHR_to_C(obj.pLibraryInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56+(i*104), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56+(i*104), BigInt(obj.pLibraryInfo||0), true);
	}
	if (obj.pLibraryInterface){
		const wrapped = VkRayTracingPipelineInterfaceCreateInfoKHR_to_C(obj.pLibraryInterface, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64+(i*104), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64+(i*104), BigInt(obj.pLibraryInterface||0), true);
	}
	if (obj.pDynamicState){
		const wrapped = VkPipelineDynamicStateCreateInfo_to_C(obj.pDynamicState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72+(i*104), BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72+(i*104), BigInt(obj.pDynamicState||0), true);
	}

	view.setBigUint64(80+(i*104), BigInt(obj.layout||0), true);
	view.setBigUint64(80+(i*104), BigInt(obj.layout||0), true);


	view.setBigUint64(88+(i*104), BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(88+(i*104), BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(96+(i*104), obj.basePipelineIndex, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(104);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.flags, true);
	view.setUint32(20, obj.stageCount, true);
	if (obj.pStages){
		const wrapped = VkPipelineShaderStageCreateInfo_to_C(obj.pStages, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(24, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(24, BigInt(obj.pStages||0), true);
	}
	view.setUint32(32, obj.groupCount, true);
	if (obj.pGroups){
		const wrapped = VkRayTracingShaderGroupCreateInfoKHR_to_C(obj.pGroups, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(40, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(40, BigInt(obj.pGroups||0), true);
	}
	view.setUint32(48, obj.maxPipelineRayRecursionDepth, true);
	if (obj.pLibraryInfo){
		const wrapped = VkPipelineLibraryCreateInfoKHR_to_C(obj.pLibraryInfo, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(56, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(56, BigInt(obj.pLibraryInfo||0), true);
	}
	if (obj.pLibraryInterface){
		const wrapped = VkRayTracingPipelineInterfaceCreateInfoKHR_to_C(obj.pLibraryInterface, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(64, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(64, BigInt(obj.pLibraryInterface||0), true);
	}
	if (obj.pDynamicState){
		const wrapped = VkPipelineDynamicStateCreateInfo_to_C(obj.pDynamicState, false);
		refList.push(wrapped.buffer);
		view.setBigUint64(72, BigInt(wrapped.ptr||0), true);
	}else{
		view.setBigUint64(72, BigInt(obj.pDynamicState||0), true);
	}

	view.setBigUint64(80, BigInt(obj.layout||0), true);
	view.setBigUint64(80, BigInt(obj.layout||0), true);


	view.setBigUint64(88, BigInt(obj.basePipelineHandle||0), true);
	view.setBigUint64(88, BigInt(obj.basePipelineHandle||0), true);

	view.setInt32(96, obj.basePipelineIndex, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkRayTracingPipelineCreateInfoKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		flags: read.u32(ptr, 16),
		stageCount: read.u32(ptr, 20),
		pStages: VkPipelineShaderStageCreateInfo_from_C(read.ptr(ptr)),
		groupCount: read.u32(ptr, 32),
		pGroups: VkRayTracingShaderGroupCreateInfoKHR_from_C(read.ptr(ptr)),
		maxPipelineRayRecursionDepth: read.u32(ptr, 48),
		pLibraryInfo: VkPipelineLibraryCreateInfoKHR_from_C(read.ptr(ptr)),
		pLibraryInterface: VkRayTracingPipelineInterfaceCreateInfoKHR_from_C(read.ptr(ptr)),
		pDynamicState: VkPipelineDynamicStateCreateInfo_from_C(read.ptr(ptr)),
		layout: undefined,
		basePipelineHandle: undefined,
		basePipelineIndex: null
	};
	return obj;
}


export function VkPhysicalDeviceRayTracingPipelineFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(40*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayTracingPipelineFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(40*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*40), obj.sType, true)

	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*40), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*40), obj.rayTracingPipeline, true);
	view.setUint32(20+(i*40), obj.rayTracingPipelineShaderGroupHandleCaptureReplay, true);
	view.setUint32(24+(i*40), obj.rayTracingPipelineShaderGroupHandleCaptureReplayMixed, true);
	view.setUint32(28+(i*40), obj.rayTracingPipelineTraceRaysIndirect, true);
	view.setUint32(32+(i*40), obj.rayTraversalPrimitiveCulling, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(40);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rayTracingPipeline, true);
	view.setUint32(20, obj.rayTracingPipelineShaderGroupHandleCaptureReplay, true);
	view.setUint32(24, obj.rayTracingPipelineShaderGroupHandleCaptureReplayMixed, true);
	view.setUint32(28, obj.rayTracingPipelineTraceRaysIndirect, true);
	view.setUint32(32, obj.rayTraversalPrimitiveCulling, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayTracingPipelineFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rayTracingPipeline: read.u32(ptr, 16),
		rayTracingPipelineShaderGroupHandleCaptureReplay: read.u32(ptr, 20),
		rayTracingPipelineShaderGroupHandleCaptureReplayMixed: read.u32(ptr, 24),
		rayTracingPipelineTraceRaysIndirect: read.u32(ptr, 28),
		rayTraversalPrimitiveCulling: read.u32(ptr, 32)
	};
	return obj;
}


export function VkPhysicalDeviceRayTracingPipelinePropertiesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(48*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayTracingPipelinePropertiesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(48*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*48), obj.sType, true)

	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*48), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*48), obj.shaderGroupHandleSize, true);
	view.setUint32(20+(i*48), obj.maxRayRecursionDepth, true);
	view.setUint32(24+(i*48), obj.maxShaderGroupStride, true);
	view.setUint32(28+(i*48), obj.shaderGroupBaseAlignment, true);
	view.setUint32(32+(i*48), obj.shaderGroupHandleCaptureReplaySize, true);
	view.setUint32(36+(i*48), obj.maxRayDispatchInvocationCount, true);
	view.setUint32(40+(i*48), obj.shaderGroupHandleAlignment, true);
	view.setUint32(44+(i*48), obj.maxRayHitAttributeSize, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(48);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.shaderGroupHandleSize, true);
	view.setUint32(20, obj.maxRayRecursionDepth, true);
	view.setUint32(24, obj.maxShaderGroupStride, true);
	view.setUint32(28, obj.shaderGroupBaseAlignment, true);
	view.setUint32(32, obj.shaderGroupHandleCaptureReplaySize, true);
	view.setUint32(36, obj.maxRayDispatchInvocationCount, true);
	view.setUint32(40, obj.shaderGroupHandleAlignment, true);
	view.setUint32(44, obj.maxRayHitAttributeSize, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayTracingPipelinePropertiesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		shaderGroupHandleSize: read.u32(ptr, 16),
		maxRayRecursionDepth: read.u32(ptr, 20),
		maxShaderGroupStride: read.u32(ptr, 24),
		shaderGroupBaseAlignment: read.u32(ptr, 28),
		shaderGroupHandleCaptureReplaySize: read.u32(ptr, 32),
		maxRayDispatchInvocationCount: read.u32(ptr, 36),
		shaderGroupHandleAlignment: read.u32(ptr, 40),
		maxRayHitAttributeSize: read.u32(ptr, 44)
	};
	return obj;
}


export function VkStridedDeviceAddressRegionKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkStridedDeviceAddressRegionKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint64(0+(i*24), obj.deviceAddress, true);
	view.setUint64(8+(i*24), obj.stride, true);
	view.setUint64(16+(i*24), obj.size, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint64(0, obj.deviceAddress, true);
	view.setUint64(8, obj.stride, true);
	view.setUint64(16, obj.size, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkStridedDeviceAddressRegionKHR_from_C(ptr){
	const obj = {
		deviceAddress: null,
		stride: null,
		size: null
	};
	return obj;
}


export function VkTraceRaysIndirectCommandKHR_alloc_array(size){
	const buffer = new ArrayBuffer(12*size);
	return ptr(buffer);
}
export function VkTraceRaysIndirectCommandKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(12*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*12), obj.width, true);
	view.setUint32(4+(i*12), obj.height, true);
	view.setUint32(8+(i*12), obj.depth, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(12);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.width, true);
	view.setUint32(4, obj.height, true);
	view.setUint32(8, obj.depth, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkTraceRaysIndirectCommandKHR_from_C(ptr){
	const obj = {
		width: read.u32(ptr, 0),
		height: read.u32(ptr, 4),
		depth: read.u32(ptr, 8)
	};
	return obj;
}


export function VkPhysicalDeviceRayQueryFeaturesKHR_alloc_array(size){
	const buffer = new ArrayBuffer(24*size);
	return ptr(buffer);
}
export function VkPhysicalDeviceRayQueryFeaturesKHR_to_C(obj, keepRef=true){
	if (Array.isArray(obj)){
	const buffer = new ArrayBuffer(24*obj.length);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	obj.forEach((obj, i)=>{
	view.setUint32(0+(i*24), obj.sType, true)

	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);
	view.setBigUint64(8+(i*24), BigInt(obj.pNext||0), true);

	view.setUint32(16+(i*24), obj.rayQuery, true);
	});
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
	const buffer = new ArrayBuffer(24);
	const refList = [buffer];
	if (keepRef){  globalThis.ptrBufferRefs.add(refList);}
	const view = new DataView(buffer);
	view.setUint32(0, obj.sType, true)

	view.setBigUint64(8, BigInt(obj.pNext||0), true);
	view.setBigUint64(8, BigInt(obj.pNext||0), true);

	view.setUint32(16, obj.rayQuery, true);
	return {buffer, ptr: ptr(buffer), free: ()=>{globalThis.ptrBufferRefs.delete(refList)}};
}
export function VkPhysicalDeviceRayQueryFeaturesKHR_from_C(ptr){
	const obj = {
		sType: read.u32(ptr, 0),
		pNext: read.ptr(ptr),
		rayQuery: read.u32(ptr, 16)
	};
	return obj;
}




let __symbol_fn_vkCreateInstance = null;
export function vkCreateInstance(pCreateInfo_, pAllocator_, pInstance_){
  let fn = __symbol_fn_vkCreateInstance;
  if (fn === null){
    __symbol_fn_vkCreateInstance = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateInstance: {
      args: [FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateInstance;
    fn = __symbol_fn_vkCreateInstance;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkInstanceCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(pCreateInfo_, pAllocator_, pInstance_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyInstance = null;
export function vkDestroyInstance(instance_, pAllocator_){
  let fn = __symbol_fn_vkDestroyInstance;
  if (fn === null){
    __symbol_fn_vkDestroyInstance = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyInstance: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyInstance;
    fn = __symbol_fn_vkDestroyInstance;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumeratePhysicalDevices = null;
export function vkEnumeratePhysicalDevices(instance_, pPhysicalDeviceCount_, pPhysicalDevices_){
  let fn = __symbol_fn_vkEnumeratePhysicalDevices;
  if (fn === null){
    __symbol_fn_vkEnumeratePhysicalDevices = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumeratePhysicalDevices: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumeratePhysicalDevices;
    fn = __symbol_fn_vkEnumeratePhysicalDevices;
  }
  
  const ___ret =  fn(instance_, pPhysicalDeviceCount_, pPhysicalDevices_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFeatures = null;
export function vkGetPhysicalDeviceFeatures(physicalDevice_, pFeatures_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFeatures;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFeatures = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFeatures: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFeatures;
    fn = __symbol_fn_vkGetPhysicalDeviceFeatures;
  }
  
        let pFeatures__buffer = null
        if (pFeatures_ !== null && typeof pFeatures_ === 'object'){
          pFeatures__buffer = VkPhysicalDeviceFeatures_to_C(pFeatures_ );
          pFeatures_ = pFeatures__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFeatures_);
  
      pFeatures__buffer && pFeatures__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFormatProperties = null;
export function vkGetPhysicalDeviceFormatProperties(physicalDevice_, format_, pFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFormatProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFormatProperties: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFormatProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties;
  }
  
        let pFormatProperties__buffer = null
        if (pFormatProperties_ !== null && typeof pFormatProperties_ === 'object'){
          pFormatProperties__buffer = VkFormatProperties_to_C(pFormatProperties_ );
          pFormatProperties_ = pFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, pFormatProperties_);
  
      pFormatProperties__buffer && pFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceImageFormatProperties = null;
export function vkGetPhysicalDeviceImageFormatProperties(physicalDevice_, format_, type_, tiling_, usage_, flags_, pImageFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceImageFormatProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceImageFormatProperties: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceImageFormatProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties;
  }
  
        let pImageFormatProperties__buffer = null
        if (pImageFormatProperties_ !== null && typeof pImageFormatProperties_ === 'object'){
          pImageFormatProperties__buffer = VkImageFormatProperties_to_C(pImageFormatProperties_ );
          pImageFormatProperties_ = pImageFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, type_, tiling_, usage_, flags_, pImageFormatProperties_);
  
      pImageFormatProperties__buffer && pImageFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceProperties = null;
export function vkGetPhysicalDeviceProperties(physicalDevice_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceProperties: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkPhysicalDeviceProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties = null;
export function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceQueueFamilyProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceQueueFamilyProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties;
  }
  
        let pQueueFamilyProperties__buffer = null
        if (pQueueFamilyProperties_ !== null && typeof pQueueFamilyProperties_ === 'object'){
          pQueueFamilyProperties__buffer = VkQueueFamilyProperties_to_C(pQueueFamilyProperties_ );
          pQueueFamilyProperties_ = pQueueFamilyProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_);
  
      pQueueFamilyProperties__buffer && pQueueFamilyProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceMemoryProperties = null;
export function vkGetPhysicalDeviceMemoryProperties(physicalDevice_, pMemoryProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceMemoryProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceMemoryProperties: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceMemoryProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties;
  }
  
        let pMemoryProperties__buffer = null
        if (pMemoryProperties_ !== null && typeof pMemoryProperties_ === 'object'){
          pMemoryProperties__buffer = VkPhysicalDeviceMemoryProperties_to_C(pMemoryProperties_ );
          pMemoryProperties_ = pMemoryProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pMemoryProperties_);
  
      pMemoryProperties__buffer && pMemoryProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetInstanceProcAddr = null;
export function vkGetInstanceProcAddr(instance_, pName_){
  let fn = __symbol_fn_vkGetInstanceProcAddr;
  if (fn === null){
    __symbol_fn_vkGetInstanceProcAddr = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetInstanceProcAddr: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetInstanceProcAddr;
    fn = __symbol_fn_vkGetInstanceProcAddr;
  }
  
  const ___ret =  fn(instance_, pName_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceProcAddr = null;
export function vkGetDeviceProcAddr(device_, pName_){
  let fn = __symbol_fn_vkGetDeviceProcAddr;
  if (fn === null){
    __symbol_fn_vkGetDeviceProcAddr = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceProcAddr: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceProcAddr;
    fn = __symbol_fn_vkGetDeviceProcAddr;
  }
  
  const ___ret =  fn(device_, pName_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateDevice = null;
export function vkCreateDevice(physicalDevice_, pCreateInfo_, pAllocator_, pDevice_){
  let fn = __symbol_fn_vkCreateDevice;
  if (fn === null){
    __symbol_fn_vkCreateDevice = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDevice: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDevice;
    fn = __symbol_fn_vkCreateDevice;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDeviceCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pCreateInfo_, pAllocator_, pDevice_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDevice = null;
export function vkDestroyDevice(device_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDevice;
  if (fn === null){
    __symbol_fn_vkDestroyDevice = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDevice: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDevice;
    fn = __symbol_fn_vkDestroyDevice;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumerateInstanceExtensionProperties = null;
export function vkEnumerateInstanceExtensionProperties(pLayerName_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkEnumerateInstanceExtensionProperties;
  if (fn === null){
    __symbol_fn_vkEnumerateInstanceExtensionProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumerateInstanceExtensionProperties: {
      args: [FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumerateInstanceExtensionProperties;
    fn = __symbol_fn_vkEnumerateInstanceExtensionProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkExtensionProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(pLayerName_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumerateDeviceExtensionProperties = null;
export function vkEnumerateDeviceExtensionProperties(physicalDevice_, pLayerName_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkEnumerateDeviceExtensionProperties;
  if (fn === null){
    __symbol_fn_vkEnumerateDeviceExtensionProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumerateDeviceExtensionProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumerateDeviceExtensionProperties;
    fn = __symbol_fn_vkEnumerateDeviceExtensionProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkExtensionProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pLayerName_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumerateInstanceLayerProperties = null;
export function vkEnumerateInstanceLayerProperties(pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkEnumerateInstanceLayerProperties;
  if (fn === null){
    __symbol_fn_vkEnumerateInstanceLayerProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumerateInstanceLayerProperties: {
      args: [FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumerateInstanceLayerProperties;
    fn = __symbol_fn_vkEnumerateInstanceLayerProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkLayerProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumerateDeviceLayerProperties = null;
export function vkEnumerateDeviceLayerProperties(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkEnumerateDeviceLayerProperties;
  if (fn === null){
    __symbol_fn_vkEnumerateDeviceLayerProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumerateDeviceLayerProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumerateDeviceLayerProperties;
    fn = __symbol_fn_vkEnumerateDeviceLayerProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkLayerProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceQueue = null;
export function vkGetDeviceQueue(device_, queueFamilyIndex_, queueIndex_, pQueue_){
  let fn = __symbol_fn_vkGetDeviceQueue;
  if (fn === null){
    __symbol_fn_vkGetDeviceQueue = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceQueue: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceQueue;
    fn = __symbol_fn_vkGetDeviceQueue;
  }
  
  const ___ret =  fn(device_, queueFamilyIndex_, queueIndex_, pQueue_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueueSubmit = null;
export function vkQueueSubmit(queue_, submitCount_, pSubmits_, fence_){
  let fn = __symbol_fn_vkQueueSubmit;
  if (fn === null){
    __symbol_fn_vkQueueSubmit = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueSubmit: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueSubmit;
    fn = __symbol_fn_vkQueueSubmit;
  }
  
        let pSubmits__buffer = null
        if (pSubmits_ !== null && typeof pSubmits_ === 'object'){
          pSubmits__buffer = VkSubmitInfo_to_C(pSubmits_ );
          pSubmits_ = pSubmits__buffer.ptr;
}
  const ___ret =  fn(queue_, submitCount_, pSubmits_, fence_);
  
      pSubmits__buffer && pSubmits__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkQueueWaitIdle = null;
export function vkQueueWaitIdle(queue_){
  let fn = __symbol_fn_vkQueueWaitIdle;
  if (fn === null){
    __symbol_fn_vkQueueWaitIdle = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueWaitIdle: {
      args: [FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueWaitIdle;
    fn = __symbol_fn_vkQueueWaitIdle;
  }
  
  const ___ret =  fn(queue_);
  
  return ___ret;
}
  
let __symbol_fn_vkDeviceWaitIdle = null;
export function vkDeviceWaitIdle(device_){
  let fn = __symbol_fn_vkDeviceWaitIdle;
  if (fn === null){
    __symbol_fn_vkDeviceWaitIdle = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDeviceWaitIdle: {
      args: [FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkDeviceWaitIdle;
    fn = __symbol_fn_vkDeviceWaitIdle;
  }
  
  const ___ret =  fn(device_);
  
  return ___ret;
}
  
let __symbol_fn_vkAllocateMemory = null;
export function vkAllocateMemory(device_, pAllocateInfo_, pAllocator_, pMemory_){
  let fn = __symbol_fn_vkAllocateMemory;
  if (fn === null){
    __symbol_fn_vkAllocateMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAllocateMemory: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAllocateMemory;
    fn = __symbol_fn_vkAllocateMemory;
  }
  
        let pAllocateInfo__buffer = null
        if (pAllocateInfo_ !== null && typeof pAllocateInfo_ === 'object'){
          pAllocateInfo__buffer = VkMemoryAllocateInfo_to_C(pAllocateInfo_ );
          pAllocateInfo_ = pAllocateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pAllocateInfo_, pAllocator_, pMemory_);
  
      pAllocateInfo__buffer && pAllocateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkFreeMemory = null;
export function vkFreeMemory(device_, memory_, pAllocator_){
  let fn = __symbol_fn_vkFreeMemory;
  if (fn === null){
    __symbol_fn_vkFreeMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkFreeMemory: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkFreeMemory;
    fn = __symbol_fn_vkFreeMemory;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, memory_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkMapMemory = null;
export function vkMapMemory(device_, memory_, offset_, size_, flags_, ppData_){
  let fn = __symbol_fn_vkMapMemory;
  if (fn === null){
    __symbol_fn_vkMapMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkMapMemory: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkMapMemory;
    fn = __symbol_fn_vkMapMemory;
  }
  
  const ___ret =  fn(device_, memory_, offset_, size_, flags_, ppData_);
  
  return ___ret;
}
  
let __symbol_fn_vkUnmapMemory = null;
export function vkUnmapMemory(device_, memory_){
  let fn = __symbol_fn_vkUnmapMemory;
  if (fn === null){
    __symbol_fn_vkUnmapMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkUnmapMemory: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkUnmapMemory;
    fn = __symbol_fn_vkUnmapMemory;
  }
  
  const ___ret =  fn(device_, memory_);
  
  return ___ret;
}
  
let __symbol_fn_vkFlushMappedMemoryRanges = null;
export function vkFlushMappedMemoryRanges(device_, memoryRangeCount_, pMemoryRanges_){
  let fn = __symbol_fn_vkFlushMappedMemoryRanges;
  if (fn === null){
    __symbol_fn_vkFlushMappedMemoryRanges = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkFlushMappedMemoryRanges: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkFlushMappedMemoryRanges;
    fn = __symbol_fn_vkFlushMappedMemoryRanges;
  }
  
        let pMemoryRanges__buffer = null
        if (pMemoryRanges_ !== null && typeof pMemoryRanges_ === 'object'){
          pMemoryRanges__buffer = VkMappedMemoryRange_to_C(pMemoryRanges_ );
          pMemoryRanges_ = pMemoryRanges__buffer.ptr;
}
  const ___ret =  fn(device_, memoryRangeCount_, pMemoryRanges_);
  
      pMemoryRanges__buffer && pMemoryRanges__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkInvalidateMappedMemoryRanges = null;
export function vkInvalidateMappedMemoryRanges(device_, memoryRangeCount_, pMemoryRanges_){
  let fn = __symbol_fn_vkInvalidateMappedMemoryRanges;
  if (fn === null){
    __symbol_fn_vkInvalidateMappedMemoryRanges = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkInvalidateMappedMemoryRanges: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkInvalidateMappedMemoryRanges;
    fn = __symbol_fn_vkInvalidateMappedMemoryRanges;
  }
  
        let pMemoryRanges__buffer = null
        if (pMemoryRanges_ !== null && typeof pMemoryRanges_ === 'object'){
          pMemoryRanges__buffer = VkMappedMemoryRange_to_C(pMemoryRanges_ );
          pMemoryRanges_ = pMemoryRanges__buffer.ptr;
}
  const ___ret =  fn(device_, memoryRangeCount_, pMemoryRanges_);
  
      pMemoryRanges__buffer && pMemoryRanges__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceMemoryCommitment = null;
export function vkGetDeviceMemoryCommitment(device_, memory_, pCommittedMemoryInBytes_){
  let fn = __symbol_fn_vkGetDeviceMemoryCommitment;
  if (fn === null){
    __symbol_fn_vkGetDeviceMemoryCommitment = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceMemoryCommitment: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceMemoryCommitment;
    fn = __symbol_fn_vkGetDeviceMemoryCommitment;
  }
  
  const ___ret =  fn(device_, memory_, pCommittedMemoryInBytes_);
  
  return ___ret;
}
  
let __symbol_fn_vkBindBufferMemory = null;
export function vkBindBufferMemory(device_, buffer_, memory_, memoryOffset_){
  let fn = __symbol_fn_vkBindBufferMemory;
  if (fn === null){
    __symbol_fn_vkBindBufferMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindBufferMemory: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkBindBufferMemory;
    fn = __symbol_fn_vkBindBufferMemory;
  }
  
  const ___ret =  fn(device_, buffer_, memory_, memoryOffset_);
  
  return ___ret;
}
  
let __symbol_fn_vkBindImageMemory = null;
export function vkBindImageMemory(device_, image_, memory_, memoryOffset_){
  let fn = __symbol_fn_vkBindImageMemory;
  if (fn === null){
    __symbol_fn_vkBindImageMemory = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindImageMemory: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkBindImageMemory;
    fn = __symbol_fn_vkBindImageMemory;
  }
  
  const ___ret =  fn(device_, image_, memory_, memoryOffset_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetBufferMemoryRequirements = null;
export function vkGetBufferMemoryRequirements(device_, buffer_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetBufferMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetBufferMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferMemoryRequirements: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferMemoryRequirements;
    fn = __symbol_fn_vkGetBufferMemoryRequirements;
  }
  
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, buffer_, pMemoryRequirements_);
  
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageMemoryRequirements = null;
export function vkGetImageMemoryRequirements(device_, image_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetImageMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageMemoryRequirements: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageMemoryRequirements;
    fn = __symbol_fn_vkGetImageMemoryRequirements;
  }
  
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pMemoryRequirements_);
  
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageSparseMemoryRequirements = null;
export function vkGetImageSparseMemoryRequirements(device_, image_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageSparseMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetImageSparseMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageSparseMemoryRequirements: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageSparseMemoryRequirements;
    fn = __symbol_fn_vkGetImageSparseMemoryRequirements;
  }
  
        let pSparseMemoryRequirements__buffer = null
        if (pSparseMemoryRequirements_ !== null && typeof pSparseMemoryRequirements_ === 'object'){
          pSparseMemoryRequirements__buffer = VkSparseImageMemoryRequirements_to_C(pSparseMemoryRequirements_ );
          pSparseMemoryRequirements_ = pSparseMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_);
  
      pSparseMemoryRequirements__buffer && pSparseMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties = null;
export function vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice_, format_, type_, samples_, usage_, tiling_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSparseImageFormatProperties: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceSparseImageFormatProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkSparseImageFormatProperties_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, type_, samples_, usage_, tiling_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkQueueBindSparse = null;
export function vkQueueBindSparse(queue_, bindInfoCount_, pBindInfo_, fence_){
  let fn = __symbol_fn_vkQueueBindSparse;
  if (fn === null){
    __symbol_fn_vkQueueBindSparse = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueBindSparse: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueBindSparse;
    fn = __symbol_fn_vkQueueBindSparse;
  }
  
        let pBindInfo__buffer = null
        if (pBindInfo_ !== null && typeof pBindInfo_ === 'object'){
          pBindInfo__buffer = VkBindSparseInfo_to_C(pBindInfo_ );
          pBindInfo_ = pBindInfo__buffer.ptr;
}
  const ___ret =  fn(queue_, bindInfoCount_, pBindInfo_, fence_);
  
      pBindInfo__buffer && pBindInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateFence = null;
export function vkCreateFence(device_, pCreateInfo_, pAllocator_, pFence_){
  let fn = __symbol_fn_vkCreateFence;
  if (fn === null){
    __symbol_fn_vkCreateFence = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateFence: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateFence;
    fn = __symbol_fn_vkCreateFence;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkFenceCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pFence_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyFence = null;
export function vkDestroyFence(device_, fence_, pAllocator_){
  let fn = __symbol_fn_vkDestroyFence;
  if (fn === null){
    __symbol_fn_vkDestroyFence = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyFence: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyFence;
    fn = __symbol_fn_vkDestroyFence;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, fence_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkResetFences = null;
export function vkResetFences(device_, fenceCount_, pFences_){
  let fn = __symbol_fn_vkResetFences;
  if (fn === null){
    __symbol_fn_vkResetFences = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetFences: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkResetFences;
    fn = __symbol_fn_vkResetFences;
  }
  
  const ___ret =  fn(device_, fenceCount_, pFences_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetFenceStatus = null;
export function vkGetFenceStatus(device_, fence_){
  let fn = __symbol_fn_vkGetFenceStatus;
  if (fn === null){
    __symbol_fn_vkGetFenceStatus = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetFenceStatus: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkGetFenceStatus;
    fn = __symbol_fn_vkGetFenceStatus;
  }
  
  const ___ret =  fn(device_, fence_);
  
  return ___ret;
}
  
let __symbol_fn_vkWaitForFences = null;
export function vkWaitForFences(device_, fenceCount_, pFences_, waitAll_, timeout_){
  let fn = __symbol_fn_vkWaitForFences;
  if (fn === null){
    __symbol_fn_vkWaitForFences = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkWaitForFences: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkWaitForFences;
    fn = __symbol_fn_vkWaitForFences;
  }
  
  const ___ret =  fn(device_, fenceCount_, pFences_, waitAll_, timeout_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateSemaphore = null;
export function vkCreateSemaphore(device_, pCreateInfo_, pAllocator_, pSemaphore_){
  let fn = __symbol_fn_vkCreateSemaphore;
  if (fn === null){
    __symbol_fn_vkCreateSemaphore = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSemaphore: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSemaphore;
    fn = __symbol_fn_vkCreateSemaphore;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkSemaphoreCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pSemaphore_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySemaphore = null;
export function vkDestroySemaphore(device_, semaphore_, pAllocator_){
  let fn = __symbol_fn_vkDestroySemaphore;
  if (fn === null){
    __symbol_fn_vkDestroySemaphore = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySemaphore: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySemaphore;
    fn = __symbol_fn_vkDestroySemaphore;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, semaphore_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateEvent = null;
export function vkCreateEvent(device_, pCreateInfo_, pAllocator_, pEvent_){
  let fn = __symbol_fn_vkCreateEvent;
  if (fn === null){
    __symbol_fn_vkCreateEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateEvent: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateEvent;
    fn = __symbol_fn_vkCreateEvent;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkEventCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pEvent_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyEvent = null;
export function vkDestroyEvent(device_, event_, pAllocator_){
  let fn = __symbol_fn_vkDestroyEvent;
  if (fn === null){
    __symbol_fn_vkDestroyEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyEvent: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyEvent;
    fn = __symbol_fn_vkDestroyEvent;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, event_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetEventStatus = null;
export function vkGetEventStatus(device_, event_){
  let fn = __symbol_fn_vkGetEventStatus;
  if (fn === null){
    __symbol_fn_vkGetEventStatus = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetEventStatus: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkGetEventStatus;
    fn = __symbol_fn_vkGetEventStatus;
  }
  
  const ___ret =  fn(device_, event_);
  
  return ___ret;
}
  
let __symbol_fn_vkSetEvent = null;
export function vkSetEvent(device_, event_){
  let fn = __symbol_fn_vkSetEvent;
  if (fn === null){
    __symbol_fn_vkSetEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetEvent: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkSetEvent;
    fn = __symbol_fn_vkSetEvent;
  }
  
  const ___ret =  fn(device_, event_);
  
  return ___ret;
}
  
let __symbol_fn_vkResetEvent = null;
export function vkResetEvent(device_, event_){
  let fn = __symbol_fn_vkResetEvent;
  if (fn === null){
    __symbol_fn_vkResetEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetEvent: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkResetEvent;
    fn = __symbol_fn_vkResetEvent;
  }
  
  const ___ret =  fn(device_, event_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateQueryPool = null;
export function vkCreateQueryPool(device_, pCreateInfo_, pAllocator_, pQueryPool_){
  let fn = __symbol_fn_vkCreateQueryPool;
  if (fn === null){
    __symbol_fn_vkCreateQueryPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateQueryPool: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateQueryPool;
    fn = __symbol_fn_vkCreateQueryPool;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkQueryPoolCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pQueryPool_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyQueryPool = null;
export function vkDestroyQueryPool(device_, queryPool_, pAllocator_){
  let fn = __symbol_fn_vkDestroyQueryPool;
  if (fn === null){
    __symbol_fn_vkDestroyQueryPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyQueryPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyQueryPool;
    fn = __symbol_fn_vkDestroyQueryPool;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, queryPool_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetQueryPoolResults = null;
export function vkGetQueryPoolResults(device_, queryPool_, firstQuery_, queryCount_, dataSize_, pData_, stride_, flags_){
  let fn = __symbol_fn_vkGetQueryPoolResults;
  if (fn === null){
    __symbol_fn_vkGetQueryPoolResults = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetQueryPoolResults: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.ptr,FFIType.u64,FFIType.u32],
      	returns: FFIType.u32
    }}).symbols.vkGetQueryPoolResults;
    fn = __symbol_fn_vkGetQueryPoolResults;
  }
  
  const ___ret =  fn(device_, queryPool_, firstQuery_, queryCount_, dataSize_, pData_, stride_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateBuffer = null;
export function vkCreateBuffer(device_, pCreateInfo_, pAllocator_, pBuffer_){
  let fn = __symbol_fn_vkCreateBuffer;
  if (fn === null){
    __symbol_fn_vkCreateBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateBuffer: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateBuffer;
    fn = __symbol_fn_vkCreateBuffer;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkBufferCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pBuffer_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyBuffer = null;
export function vkDestroyBuffer(device_, buffer_, pAllocator_){
  let fn = __symbol_fn_vkDestroyBuffer;
  if (fn === null){
    __symbol_fn_vkDestroyBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyBuffer;
    fn = __symbol_fn_vkDestroyBuffer;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, buffer_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateBufferView = null;
export function vkCreateBufferView(device_, pCreateInfo_, pAllocator_, pView_){
  let fn = __symbol_fn_vkCreateBufferView;
  if (fn === null){
    __symbol_fn_vkCreateBufferView = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateBufferView: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateBufferView;
    fn = __symbol_fn_vkCreateBufferView;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkBufferViewCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pView_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyBufferView = null;
export function vkDestroyBufferView(device_, bufferView_, pAllocator_){
  let fn = __symbol_fn_vkDestroyBufferView;
  if (fn === null){
    __symbol_fn_vkDestroyBufferView = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyBufferView: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyBufferView;
    fn = __symbol_fn_vkDestroyBufferView;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, bufferView_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateImage = null;
export function vkCreateImage(device_, pCreateInfo_, pAllocator_, pImage_){
  let fn = __symbol_fn_vkCreateImage;
  if (fn === null){
    __symbol_fn_vkCreateImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateImage: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateImage;
    fn = __symbol_fn_vkCreateImage;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkImageCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pImage_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyImage = null;
export function vkDestroyImage(device_, image_, pAllocator_){
  let fn = __symbol_fn_vkDestroyImage;
  if (fn === null){
    __symbol_fn_vkDestroyImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyImage;
    fn = __symbol_fn_vkDestroyImage;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageSubresourceLayout = null;
export function vkGetImageSubresourceLayout(device_, image_, pSubresource_, pLayout_){
  let fn = __symbol_fn_vkGetImageSubresourceLayout;
  if (fn === null){
    __symbol_fn_vkGetImageSubresourceLayout = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageSubresourceLayout: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageSubresourceLayout;
    fn = __symbol_fn_vkGetImageSubresourceLayout;
  }
  
        let pSubresource__buffer = null
        if (pSubresource_ !== null && typeof pSubresource_ === 'object'){
          pSubresource__buffer = VkImageSubresource_to_C(pSubresource_ );
          pSubresource_ = pSubresource__buffer.ptr;
}
        let pLayout__buffer = null
        if (pLayout_ !== null && typeof pLayout_ === 'object'){
          pLayout__buffer = VkSubresourceLayout_to_C(pLayout_ );
          pLayout_ = pLayout__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pSubresource_, pLayout_);
  
      pSubresource__buffer && pSubresource__buffer.free()
      
      pLayout__buffer && pLayout__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateImageView = null;
export function vkCreateImageView(device_, pCreateInfo_, pAllocator_, pView_){
  let fn = __symbol_fn_vkCreateImageView;
  if (fn === null){
    __symbol_fn_vkCreateImageView = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateImageView: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateImageView;
    fn = __symbol_fn_vkCreateImageView;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkImageViewCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pView_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyImageView = null;
export function vkDestroyImageView(device_, imageView_, pAllocator_){
  let fn = __symbol_fn_vkDestroyImageView;
  if (fn === null){
    __symbol_fn_vkDestroyImageView = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyImageView: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyImageView;
    fn = __symbol_fn_vkDestroyImageView;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, imageView_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateShaderModule = null;
export function vkCreateShaderModule(device_, pCreateInfo_, pAllocator_, pShaderModule_){
  let fn = __symbol_fn_vkCreateShaderModule;
  if (fn === null){
    __symbol_fn_vkCreateShaderModule = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateShaderModule: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateShaderModule;
    fn = __symbol_fn_vkCreateShaderModule;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkShaderModuleCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pShaderModule_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyShaderModule = null;
export function vkDestroyShaderModule(device_, shaderModule_, pAllocator_){
  let fn = __symbol_fn_vkDestroyShaderModule;
  if (fn === null){
    __symbol_fn_vkDestroyShaderModule = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyShaderModule: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyShaderModule;
    fn = __symbol_fn_vkDestroyShaderModule;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, shaderModule_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreatePipelineCache = null;
export function vkCreatePipelineCache(device_, pCreateInfo_, pAllocator_, pPipelineCache_){
  let fn = __symbol_fn_vkCreatePipelineCache;
  if (fn === null){
    __symbol_fn_vkCreatePipelineCache = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreatePipelineCache: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreatePipelineCache;
    fn = __symbol_fn_vkCreatePipelineCache;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkPipelineCacheCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pPipelineCache_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyPipelineCache = null;
export function vkDestroyPipelineCache(device_, pipelineCache_, pAllocator_){
  let fn = __symbol_fn_vkDestroyPipelineCache;
  if (fn === null){
    __symbol_fn_vkDestroyPipelineCache = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyPipelineCache: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyPipelineCache;
    fn = __symbol_fn_vkDestroyPipelineCache;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipelineCache_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPipelineCacheData = null;
export function vkGetPipelineCacheData(device_, pipelineCache_, pDataSize_, pData_){
  let fn = __symbol_fn_vkGetPipelineCacheData;
  if (fn === null){
    __symbol_fn_vkGetPipelineCacheData = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPipelineCacheData: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPipelineCacheData;
    fn = __symbol_fn_vkGetPipelineCacheData;
  }
  
  const ___ret =  fn(device_, pipelineCache_, pDataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkMergePipelineCaches = null;
export function vkMergePipelineCaches(device_, dstCache_, srcCacheCount_, pSrcCaches_){
  let fn = __symbol_fn_vkMergePipelineCaches;
  if (fn === null){
    __symbol_fn_vkMergePipelineCaches = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkMergePipelineCaches: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkMergePipelineCaches;
    fn = __symbol_fn_vkMergePipelineCaches;
  }
  
  const ___ret =  fn(device_, dstCache_, srcCacheCount_, pSrcCaches_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateGraphicsPipelines = null;
export function vkCreateGraphicsPipelines(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_){
  let fn = __symbol_fn_vkCreateGraphicsPipelines;
  if (fn === null){
    __symbol_fn_vkCreateGraphicsPipelines = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateGraphicsPipelines: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateGraphicsPipelines;
    fn = __symbol_fn_vkCreateGraphicsPipelines;
  }
  
        let pCreateInfos__buffer = null
        if (pCreateInfos_ !== null && typeof pCreateInfos_ === 'object'){
          pCreateInfos__buffer = VkGraphicsPipelineCreateInfo_to_C(pCreateInfos_ );
          pCreateInfos_ = pCreateInfos__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_);
  
      pCreateInfos__buffer && pCreateInfos__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateComputePipelines = null;
export function vkCreateComputePipelines(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_){
  let fn = __symbol_fn_vkCreateComputePipelines;
  if (fn === null){
    __symbol_fn_vkCreateComputePipelines = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateComputePipelines: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateComputePipelines;
    fn = __symbol_fn_vkCreateComputePipelines;
  }
  
        let pCreateInfos__buffer = null
        if (pCreateInfos_ !== null && typeof pCreateInfos_ === 'object'){
          pCreateInfos__buffer = VkComputePipelineCreateInfo_to_C(pCreateInfos_ );
          pCreateInfos_ = pCreateInfos__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_);
  
      pCreateInfos__buffer && pCreateInfos__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyPipeline = null;
export function vkDestroyPipeline(device_, pipeline_, pAllocator_){
  let fn = __symbol_fn_vkDestroyPipeline;
  if (fn === null){
    __symbol_fn_vkDestroyPipeline = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyPipeline: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyPipeline;
    fn = __symbol_fn_vkDestroyPipeline;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipeline_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreatePipelineLayout = null;
export function vkCreatePipelineLayout(device_, pCreateInfo_, pAllocator_, pPipelineLayout_){
  let fn = __symbol_fn_vkCreatePipelineLayout;
  if (fn === null){
    __symbol_fn_vkCreatePipelineLayout = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreatePipelineLayout: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreatePipelineLayout;
    fn = __symbol_fn_vkCreatePipelineLayout;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkPipelineLayoutCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pPipelineLayout_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyPipelineLayout = null;
export function vkDestroyPipelineLayout(device_, pipelineLayout_, pAllocator_){
  let fn = __symbol_fn_vkDestroyPipelineLayout;
  if (fn === null){
    __symbol_fn_vkDestroyPipelineLayout = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyPipelineLayout: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyPipelineLayout;
    fn = __symbol_fn_vkDestroyPipelineLayout;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipelineLayout_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateSampler = null;
export function vkCreateSampler(device_, pCreateInfo_, pAllocator_, pSampler_){
  let fn = __symbol_fn_vkCreateSampler;
  if (fn === null){
    __symbol_fn_vkCreateSampler = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSampler: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSampler;
    fn = __symbol_fn_vkCreateSampler;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkSamplerCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pSampler_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySampler = null;
export function vkDestroySampler(device_, sampler_, pAllocator_){
  let fn = __symbol_fn_vkDestroySampler;
  if (fn === null){
    __symbol_fn_vkDestroySampler = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySampler: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySampler;
    fn = __symbol_fn_vkDestroySampler;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, sampler_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDescriptorSetLayout = null;
export function vkCreateDescriptorSetLayout(device_, pCreateInfo_, pAllocator_, pSetLayout_){
  let fn = __symbol_fn_vkCreateDescriptorSetLayout;
  if (fn === null){
    __symbol_fn_vkCreateDescriptorSetLayout = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDescriptorSetLayout: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDescriptorSetLayout;
    fn = __symbol_fn_vkCreateDescriptorSetLayout;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorSetLayoutCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pSetLayout_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDescriptorSetLayout = null;
export function vkDestroyDescriptorSetLayout(device_, descriptorSetLayout_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDescriptorSetLayout;
  if (fn === null){
    __symbol_fn_vkDestroyDescriptorSetLayout = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDescriptorSetLayout: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDescriptorSetLayout;
    fn = __symbol_fn_vkDestroyDescriptorSetLayout;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, descriptorSetLayout_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDescriptorPool = null;
export function vkCreateDescriptorPool(device_, pCreateInfo_, pAllocator_, pDescriptorPool_){
  let fn = __symbol_fn_vkCreateDescriptorPool;
  if (fn === null){
    __symbol_fn_vkCreateDescriptorPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDescriptorPool: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDescriptorPool;
    fn = __symbol_fn_vkCreateDescriptorPool;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorPoolCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pDescriptorPool_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDescriptorPool = null;
export function vkDestroyDescriptorPool(device_, descriptorPool_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDescriptorPool;
  if (fn === null){
    __symbol_fn_vkDestroyDescriptorPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDescriptorPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDescriptorPool;
    fn = __symbol_fn_vkDestroyDescriptorPool;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, descriptorPool_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkResetDescriptorPool = null;
export function vkResetDescriptorPool(device_, descriptorPool_, flags_){
  let fn = __symbol_fn_vkResetDescriptorPool;
  if (fn === null){
    __symbol_fn_vkResetDescriptorPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetDescriptorPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u32
    }}).symbols.vkResetDescriptorPool;
    fn = __symbol_fn_vkResetDescriptorPool;
  }
  
  const ___ret =  fn(device_, descriptorPool_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkAllocateDescriptorSets = null;
export function vkAllocateDescriptorSets(device_, pAllocateInfo_, pDescriptorSets_){
  let fn = __symbol_fn_vkAllocateDescriptorSets;
  if (fn === null){
    __symbol_fn_vkAllocateDescriptorSets = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAllocateDescriptorSets: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAllocateDescriptorSets;
    fn = __symbol_fn_vkAllocateDescriptorSets;
  }
  
        let pAllocateInfo__buffer = null
        if (pAllocateInfo_ !== null && typeof pAllocateInfo_ === 'object'){
          pAllocateInfo__buffer = VkDescriptorSetAllocateInfo_to_C(pAllocateInfo_ );
          pAllocateInfo_ = pAllocateInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pAllocateInfo_, pDescriptorSets_);
  
      pAllocateInfo__buffer && pAllocateInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkFreeDescriptorSets = null;
export function vkFreeDescriptorSets(device_, descriptorPool_, descriptorSetCount_, pDescriptorSets_){
  let fn = __symbol_fn_vkFreeDescriptorSets;
  if (fn === null){
    __symbol_fn_vkFreeDescriptorSets = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkFreeDescriptorSets: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkFreeDescriptorSets;
    fn = __symbol_fn_vkFreeDescriptorSets;
  }
  
  const ___ret =  fn(device_, descriptorPool_, descriptorSetCount_, pDescriptorSets_);
  
  return ___ret;
}
  
let __symbol_fn_vkUpdateDescriptorSets = null;
export function vkUpdateDescriptorSets(device_, descriptorWriteCount_, pDescriptorWrites_, descriptorCopyCount_, pDescriptorCopies_){
  let fn = __symbol_fn_vkUpdateDescriptorSets;
  if (fn === null){
    __symbol_fn_vkUpdateDescriptorSets = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkUpdateDescriptorSets: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkUpdateDescriptorSets;
    fn = __symbol_fn_vkUpdateDescriptorSets;
  }
  
        let pDescriptorWrites__buffer = null
        if (pDescriptorWrites_ !== null && typeof pDescriptorWrites_ === 'object'){
          pDescriptorWrites__buffer = VkWriteDescriptorSet_to_C(pDescriptorWrites_ );
          pDescriptorWrites_ = pDescriptorWrites__buffer.ptr;
}
        let pDescriptorCopies__buffer = null
        if (pDescriptorCopies_ !== null && typeof pDescriptorCopies_ === 'object'){
          pDescriptorCopies__buffer = VkCopyDescriptorSet_to_C(pDescriptorCopies_ );
          pDescriptorCopies_ = pDescriptorCopies__buffer.ptr;
}
  const ___ret =  fn(device_, descriptorWriteCount_, pDescriptorWrites_, descriptorCopyCount_, pDescriptorCopies_);
  
      pDescriptorWrites__buffer && pDescriptorWrites__buffer.free()
      
      pDescriptorCopies__buffer && pDescriptorCopies__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateFramebuffer = null;
export function vkCreateFramebuffer(device_, pCreateInfo_, pAllocator_, pFramebuffer_){
  let fn = __symbol_fn_vkCreateFramebuffer;
  if (fn === null){
    __symbol_fn_vkCreateFramebuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateFramebuffer: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateFramebuffer;
    fn = __symbol_fn_vkCreateFramebuffer;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkFramebufferCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pFramebuffer_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyFramebuffer = null;
export function vkDestroyFramebuffer(device_, framebuffer_, pAllocator_){
  let fn = __symbol_fn_vkDestroyFramebuffer;
  if (fn === null){
    __symbol_fn_vkDestroyFramebuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyFramebuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyFramebuffer;
    fn = __symbol_fn_vkDestroyFramebuffer;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, framebuffer_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateRenderPass = null;
export function vkCreateRenderPass(device_, pCreateInfo_, pAllocator_, pRenderPass_){
  let fn = __symbol_fn_vkCreateRenderPass;
  if (fn === null){
    __symbol_fn_vkCreateRenderPass = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateRenderPass: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateRenderPass;
    fn = __symbol_fn_vkCreateRenderPass;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkRenderPassCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pRenderPass_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyRenderPass = null;
export function vkDestroyRenderPass(device_, renderPass_, pAllocator_){
  let fn = __symbol_fn_vkDestroyRenderPass;
  if (fn === null){
    __symbol_fn_vkDestroyRenderPass = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyRenderPass: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyRenderPass;
    fn = __symbol_fn_vkDestroyRenderPass;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, renderPass_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetRenderAreaGranularity = null;
export function vkGetRenderAreaGranularity(device_, renderPass_, pGranularity_){
  let fn = __symbol_fn_vkGetRenderAreaGranularity;
  if (fn === null){
    __symbol_fn_vkGetRenderAreaGranularity = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRenderAreaGranularity: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetRenderAreaGranularity;
    fn = __symbol_fn_vkGetRenderAreaGranularity;
  }
  
        let pGranularity__buffer = null
        if (pGranularity_ !== null && typeof pGranularity_ === 'object'){
          pGranularity__buffer = VkExtent2D_to_C(pGranularity_ );
          pGranularity_ = pGranularity__buffer.ptr;
}
  const ___ret =  fn(device_, renderPass_, pGranularity_);
  
      pGranularity__buffer && pGranularity__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateCommandPool = null;
export function vkCreateCommandPool(device_, pCreateInfo_, pAllocator_, pCommandPool_){
  let fn = __symbol_fn_vkCreateCommandPool;
  if (fn === null){
    __symbol_fn_vkCreateCommandPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateCommandPool: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateCommandPool;
    fn = __symbol_fn_vkCreateCommandPool;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkCommandPoolCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pCommandPool_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyCommandPool = null;
export function vkDestroyCommandPool(device_, commandPool_, pAllocator_){
  let fn = __symbol_fn_vkDestroyCommandPool;
  if (fn === null){
    __symbol_fn_vkDestroyCommandPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyCommandPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyCommandPool;
    fn = __symbol_fn_vkDestroyCommandPool;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, commandPool_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkResetCommandPool = null;
export function vkResetCommandPool(device_, commandPool_, flags_){
  let fn = __symbol_fn_vkResetCommandPool;
  if (fn === null){
    __symbol_fn_vkResetCommandPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetCommandPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u32
    }}).symbols.vkResetCommandPool;
    fn = __symbol_fn_vkResetCommandPool;
  }
  
  const ___ret =  fn(device_, commandPool_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkAllocateCommandBuffers = null;
export function vkAllocateCommandBuffers(device_, pAllocateInfo_, pCommandBuffers_){
  let fn = __symbol_fn_vkAllocateCommandBuffers;
  if (fn === null){
    __symbol_fn_vkAllocateCommandBuffers = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAllocateCommandBuffers: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAllocateCommandBuffers;
    fn = __symbol_fn_vkAllocateCommandBuffers;
  }
  
        let pAllocateInfo__buffer = null
        if (pAllocateInfo_ !== null && typeof pAllocateInfo_ === 'object'){
          pAllocateInfo__buffer = VkCommandBufferAllocateInfo_to_C(pAllocateInfo_ );
          pAllocateInfo_ = pAllocateInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pAllocateInfo_, pCommandBuffers_);
  
      pAllocateInfo__buffer && pAllocateInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkFreeCommandBuffers = null;
export function vkFreeCommandBuffers(device_, commandPool_, commandBufferCount_, pCommandBuffers_){
  let fn = __symbol_fn_vkFreeCommandBuffers;
  if (fn === null){
    __symbol_fn_vkFreeCommandBuffers = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkFreeCommandBuffers: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkFreeCommandBuffers;
    fn = __symbol_fn_vkFreeCommandBuffers;
  }
  
  const ___ret =  fn(device_, commandPool_, commandBufferCount_, pCommandBuffers_);
  
  return ___ret;
}
  
let __symbol_fn_vkBeginCommandBuffer = null;
export function vkBeginCommandBuffer(commandBuffer_, pBeginInfo_){
  let fn = __symbol_fn_vkBeginCommandBuffer;
  if (fn === null){
    __symbol_fn_vkBeginCommandBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBeginCommandBuffer: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBeginCommandBuffer;
    fn = __symbol_fn_vkBeginCommandBuffer;
  }
  
        let pBeginInfo__buffer = null
        if (pBeginInfo_ !== null && typeof pBeginInfo_ === 'object'){
          pBeginInfo__buffer = VkCommandBufferBeginInfo_to_C(pBeginInfo_ );
          pBeginInfo_ = pBeginInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pBeginInfo_);
  
      pBeginInfo__buffer && pBeginInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEndCommandBuffer = null;
export function vkEndCommandBuffer(commandBuffer_){
  let fn = __symbol_fn_vkEndCommandBuffer;
  if (fn === null){
    __symbol_fn_vkEndCommandBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEndCommandBuffer: {
      args: [FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkEndCommandBuffer;
    fn = __symbol_fn_vkEndCommandBuffer;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkResetCommandBuffer = null;
export function vkResetCommandBuffer(commandBuffer_, flags_){
  let fn = __symbol_fn_vkResetCommandBuffer;
  if (fn === null){
    __symbol_fn_vkResetCommandBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetCommandBuffer: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u32
    }}).symbols.vkResetCommandBuffer;
    fn = __symbol_fn_vkResetCommandBuffer;
  }
  
  const ___ret =  fn(commandBuffer_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindPipeline = null;
export function vkCmdBindPipeline(commandBuffer_, pipelineBindPoint_, pipeline_){
  let fn = __symbol_fn_vkCmdBindPipeline;
  if (fn === null){
    __symbol_fn_vkCmdBindPipeline = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindPipeline: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindPipeline;
    fn = __symbol_fn_vkCmdBindPipeline;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineBindPoint_, pipeline_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetViewport = null;
export function vkCmdSetViewport(commandBuffer_, firstViewport_, viewportCount_, pViewports_){
  let fn = __symbol_fn_vkCmdSetViewport;
  if (fn === null){
    __symbol_fn_vkCmdSetViewport = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetViewport: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetViewport;
    fn = __symbol_fn_vkCmdSetViewport;
  }
  
        let pViewports__buffer = null
        if (pViewports_ !== null && typeof pViewports_ === 'object'){
          pViewports__buffer = VkViewport_to_C(pViewports_ );
          pViewports_ = pViewports__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstViewport_, viewportCount_, pViewports_);
  
      pViewports__buffer && pViewports__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetScissor = null;
export function vkCmdSetScissor(commandBuffer_, firstScissor_, scissorCount_, pScissors_){
  let fn = __symbol_fn_vkCmdSetScissor;
  if (fn === null){
    __symbol_fn_vkCmdSetScissor = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetScissor: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetScissor;
    fn = __symbol_fn_vkCmdSetScissor;
  }
  
        let pScissors__buffer = null
        if (pScissors_ !== null && typeof pScissors_ === 'object'){
          pScissors__buffer = VkRect2D_to_C(pScissors_ );
          pScissors_ = pScissors__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstScissor_, scissorCount_, pScissors_);
  
      pScissors__buffer && pScissors__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetLineWidth = null;
export function vkCmdSetLineWidth(commandBuffer_, lineWidth_){
  let fn = __symbol_fn_vkCmdSetLineWidth;
  if (fn === null){
    __symbol_fn_vkCmdSetLineWidth = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetLineWidth: {
      args: [FFIType.u64,FFIType.f32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetLineWidth;
    fn = __symbol_fn_vkCmdSetLineWidth;
  }
  
  const ___ret =  fn(commandBuffer_, lineWidth_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBias = null;
export function vkCmdSetDepthBias(commandBuffer_, depthBiasConstantFactor_, depthBiasClamp_, depthBiasSlopeFactor_){
  let fn = __symbol_fn_vkCmdSetDepthBias;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBias = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBias: {
      args: [FFIType.u64,FFIType.f32,FFIType.f32,FFIType.f32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBias;
    fn = __symbol_fn_vkCmdSetDepthBias;
  }
  
  const ___ret =  fn(commandBuffer_, depthBiasConstantFactor_, depthBiasClamp_, depthBiasSlopeFactor_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetBlendConstants = null;
export function vkCmdSetBlendConstants(commandBuffer_, blendConstants_){
  let fn = __symbol_fn_vkCmdSetBlendConstants;
  if (fn === null){
    __symbol_fn_vkCmdSetBlendConstants = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetBlendConstants: {
      args: [FFIType.u64,FFIType.f32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetBlendConstants;
    fn = __symbol_fn_vkCmdSetBlendConstants;
  }
  
  const ___ret =  fn(commandBuffer_, blendConstants_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBounds = null;
export function vkCmdSetDepthBounds(commandBuffer_, minDepthBounds_, maxDepthBounds_){
  let fn = __symbol_fn_vkCmdSetDepthBounds;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBounds = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBounds: {
      args: [FFIType.u64,FFIType.f32,FFIType.f32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBounds;
    fn = __symbol_fn_vkCmdSetDepthBounds;
  }
  
  const ___ret =  fn(commandBuffer_, minDepthBounds_, maxDepthBounds_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilCompareMask = null;
export function vkCmdSetStencilCompareMask(commandBuffer_, faceMask_, compareMask_){
  let fn = __symbol_fn_vkCmdSetStencilCompareMask;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilCompareMask = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilCompareMask: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilCompareMask;
    fn = __symbol_fn_vkCmdSetStencilCompareMask;
  }
  
  const ___ret =  fn(commandBuffer_, faceMask_, compareMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilWriteMask = null;
export function vkCmdSetStencilWriteMask(commandBuffer_, faceMask_, writeMask_){
  let fn = __symbol_fn_vkCmdSetStencilWriteMask;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilWriteMask = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilWriteMask: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilWriteMask;
    fn = __symbol_fn_vkCmdSetStencilWriteMask;
  }
  
  const ___ret =  fn(commandBuffer_, faceMask_, writeMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilReference = null;
export function vkCmdSetStencilReference(commandBuffer_, faceMask_, reference_){
  let fn = __symbol_fn_vkCmdSetStencilReference;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilReference = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilReference: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilReference;
    fn = __symbol_fn_vkCmdSetStencilReference;
  }
  
  const ___ret =  fn(commandBuffer_, faceMask_, reference_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindDescriptorSets = null;
export function vkCmdBindDescriptorSets(commandBuffer_, pipelineBindPoint_, layout_, firstSet_, descriptorSetCount_, pDescriptorSets_, dynamicOffsetCount_, pDynamicOffsets_){
  let fn = __symbol_fn_vkCmdBindDescriptorSets;
  if (fn === null){
    __symbol_fn_vkCmdBindDescriptorSets = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindDescriptorSets: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindDescriptorSets;
    fn = __symbol_fn_vkCmdBindDescriptorSets;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineBindPoint_, layout_, firstSet_, descriptorSetCount_, pDescriptorSets_, dynamicOffsetCount_, pDynamicOffsets_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindIndexBuffer = null;
export function vkCmdBindIndexBuffer(commandBuffer_, buffer_, offset_, indexType_){
  let fn = __symbol_fn_vkCmdBindIndexBuffer;
  if (fn === null){
    __symbol_fn_vkCmdBindIndexBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindIndexBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindIndexBuffer;
    fn = __symbol_fn_vkCmdBindIndexBuffer;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, indexType_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindVertexBuffers = null;
export function vkCmdBindVertexBuffers(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_){
  let fn = __symbol_fn_vkCmdBindVertexBuffers;
  if (fn === null){
    __symbol_fn_vkCmdBindVertexBuffers = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindVertexBuffers: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindVertexBuffers;
    fn = __symbol_fn_vkCmdBindVertexBuffers;
  }
  
  const ___ret =  fn(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDraw = null;
export function vkCmdDraw(commandBuffer_, vertexCount_, instanceCount_, firstVertex_, firstInstance_){
  let fn = __symbol_fn_vkCmdDraw;
  if (fn === null){
    __symbol_fn_vkCmdDraw = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDraw: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDraw;
    fn = __symbol_fn_vkCmdDraw;
  }
  
  const ___ret =  fn(commandBuffer_, vertexCount_, instanceCount_, firstVertex_, firstInstance_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndexed = null;
export function vkCmdDrawIndexed(commandBuffer_, indexCount_, instanceCount_, firstIndex_, vertexOffset_, firstInstance_){
  let fn = __symbol_fn_vkCmdDrawIndexed;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndexed = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndexed: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.i32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndexed;
    fn = __symbol_fn_vkCmdDrawIndexed;
  }
  
  const ___ret =  fn(commandBuffer_, indexCount_, instanceCount_, firstIndex_, vertexOffset_, firstInstance_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndirect = null;
export function vkCmdDrawIndirect(commandBuffer_, buffer_, offset_, drawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndirect;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndirect = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndirect: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndirect;
    fn = __symbol_fn_vkCmdDrawIndirect;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, drawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndexedIndirect = null;
export function vkCmdDrawIndexedIndirect(commandBuffer_, buffer_, offset_, drawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndexedIndirect;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndexedIndirect = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndexedIndirect: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndexedIndirect;
    fn = __symbol_fn_vkCmdDrawIndexedIndirect;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, drawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDispatch = null;
export function vkCmdDispatch(commandBuffer_, groupCountX_, groupCountY_, groupCountZ_){
  let fn = __symbol_fn_vkCmdDispatch;
  if (fn === null){
    __symbol_fn_vkCmdDispatch = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDispatch: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDispatch;
    fn = __symbol_fn_vkCmdDispatch;
  }
  
  const ___ret =  fn(commandBuffer_, groupCountX_, groupCountY_, groupCountZ_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDispatchIndirect = null;
export function vkCmdDispatchIndirect(commandBuffer_, buffer_, offset_){
  let fn = __symbol_fn_vkCmdDispatchIndirect;
  if (fn === null){
    __symbol_fn_vkCmdDispatchIndirect = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDispatchIndirect: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdDispatchIndirect;
    fn = __symbol_fn_vkCmdDispatchIndirect;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBuffer = null;
export function vkCmdCopyBuffer(commandBuffer_, srcBuffer_, dstBuffer_, regionCount_, pRegions_){
  let fn = __symbol_fn_vkCmdCopyBuffer;
  if (fn === null){
    __symbol_fn_vkCmdCopyBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBuffer;
    fn = __symbol_fn_vkCmdCopyBuffer;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkBufferCopy_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcBuffer_, dstBuffer_, regionCount_, pRegions_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImage = null;
export function vkCmdCopyImage(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_){
  let fn = __symbol_fn_vkCmdCopyImage;
  if (fn === null){
    __symbol_fn_vkCmdCopyImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImage;
    fn = __symbol_fn_vkCmdCopyImage;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkImageCopy_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBlitImage = null;
export function vkCmdBlitImage(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_, filter_){
  let fn = __symbol_fn_vkCmdBlitImage;
  if (fn === null){
    __symbol_fn_vkCmdBlitImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBlitImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBlitImage;
    fn = __symbol_fn_vkCmdBlitImage;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkImageBlit_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_, filter_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBufferToImage = null;
export function vkCmdCopyBufferToImage(commandBuffer_, srcBuffer_, dstImage_, dstImageLayout_, regionCount_, pRegions_){
  let fn = __symbol_fn_vkCmdCopyBufferToImage;
  if (fn === null){
    __symbol_fn_vkCmdCopyBufferToImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBufferToImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBufferToImage;
    fn = __symbol_fn_vkCmdCopyBufferToImage;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkBufferImageCopy_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcBuffer_, dstImage_, dstImageLayout_, regionCount_, pRegions_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImageToBuffer = null;
export function vkCmdCopyImageToBuffer(commandBuffer_, srcImage_, srcImageLayout_, dstBuffer_, regionCount_, pRegions_){
  let fn = __symbol_fn_vkCmdCopyImageToBuffer;
  if (fn === null){
    __symbol_fn_vkCmdCopyImageToBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImageToBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImageToBuffer;
    fn = __symbol_fn_vkCmdCopyImageToBuffer;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkBufferImageCopy_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcImage_, srcImageLayout_, dstBuffer_, regionCount_, pRegions_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdUpdateBuffer = null;
export function vkCmdUpdateBuffer(commandBuffer_, dstBuffer_, dstOffset_, dataSize_, pData_){
  let fn = __symbol_fn_vkCmdUpdateBuffer;
  if (fn === null){
    __symbol_fn_vkCmdUpdateBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdUpdateBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdUpdateBuffer;
    fn = __symbol_fn_vkCmdUpdateBuffer;
  }
  
  const ___ret =  fn(commandBuffer_, dstBuffer_, dstOffset_, dataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdFillBuffer = null;
export function vkCmdFillBuffer(commandBuffer_, dstBuffer_, dstOffset_, size_, data_){
  let fn = __symbol_fn_vkCmdFillBuffer;
  if (fn === null){
    __symbol_fn_vkCmdFillBuffer = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdFillBuffer: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdFillBuffer;
    fn = __symbol_fn_vkCmdFillBuffer;
  }
  
  const ___ret =  fn(commandBuffer_, dstBuffer_, dstOffset_, size_, data_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdClearColorImage = null;
export function vkCmdClearColorImage(commandBuffer_, image_, imageLayout_, pColor_, rangeCount_, pRanges_){
  let fn = __symbol_fn_vkCmdClearColorImage;
  if (fn === null){
    __symbol_fn_vkCmdClearColorImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdClearColorImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdClearColorImage;
    fn = __symbol_fn_vkCmdClearColorImage;
  }
  
        let pRanges__buffer = null
        if (pRanges_ !== null && typeof pRanges_ === 'object'){
          pRanges__buffer = VkImageSubresourceRange_to_C(pRanges_ );
          pRanges_ = pRanges__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, image_, imageLayout_, pColor_, rangeCount_, pRanges_);
  
      pRanges__buffer && pRanges__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdClearDepthStencilImage = null;
export function vkCmdClearDepthStencilImage(commandBuffer_, image_, imageLayout_, pDepthStencil_, rangeCount_, pRanges_){
  let fn = __symbol_fn_vkCmdClearDepthStencilImage;
  if (fn === null){
    __symbol_fn_vkCmdClearDepthStencilImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdClearDepthStencilImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdClearDepthStencilImage;
    fn = __symbol_fn_vkCmdClearDepthStencilImage;
  }
  
        let pDepthStencil__buffer = null
        if (pDepthStencil_ !== null && typeof pDepthStencil_ === 'object'){
          pDepthStencil__buffer = VkClearDepthStencilValue_to_C(pDepthStencil_ );
          pDepthStencil_ = pDepthStencil__buffer.ptr;
}
        let pRanges__buffer = null
        if (pRanges_ !== null && typeof pRanges_ === 'object'){
          pRanges__buffer = VkImageSubresourceRange_to_C(pRanges_ );
          pRanges_ = pRanges__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, image_, imageLayout_, pDepthStencil_, rangeCount_, pRanges_);
  
      pDepthStencil__buffer && pDepthStencil__buffer.free()
      
      pRanges__buffer && pRanges__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdClearAttachments = null;
export function vkCmdClearAttachments(commandBuffer_, attachmentCount_, pAttachments_, rectCount_, pRects_){
  let fn = __symbol_fn_vkCmdClearAttachments;
  if (fn === null){
    __symbol_fn_vkCmdClearAttachments = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdClearAttachments: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdClearAttachments;
    fn = __symbol_fn_vkCmdClearAttachments;
  }
  
        let pAttachments__buffer = null
        if (pAttachments_ !== null && typeof pAttachments_ === 'object'){
          pAttachments__buffer = VkClearAttachment_to_C(pAttachments_ );
          pAttachments_ = pAttachments__buffer.ptr;
}
        let pRects__buffer = null
        if (pRects_ !== null && typeof pRects_ === 'object'){
          pRects__buffer = VkClearRect_to_C(pRects_ );
          pRects_ = pRects__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, attachmentCount_, pAttachments_, rectCount_, pRects_);
  
      pAttachments__buffer && pAttachments__buffer.free()
      
      pRects__buffer && pRects__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdResolveImage = null;
export function vkCmdResolveImage(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_){
  let fn = __symbol_fn_vkCmdResolveImage;
  if (fn === null){
    __symbol_fn_vkCmdResolveImage = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResolveImage: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdResolveImage;
    fn = __symbol_fn_vkCmdResolveImage;
  }
  
        let pRegions__buffer = null
        if (pRegions_ !== null && typeof pRegions_ === 'object'){
          pRegions__buffer = VkImageResolve_to_C(pRegions_ );
          pRegions_ = pRegions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcImage_, srcImageLayout_, dstImage_, dstImageLayout_, regionCount_, pRegions_);
  
      pRegions__buffer && pRegions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetEvent = null;
export function vkCmdSetEvent(commandBuffer_, event_, stageMask_){
  let fn = __symbol_fn_vkCmdSetEvent;
  if (fn === null){
    __symbol_fn_vkCmdSetEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetEvent: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetEvent;
    fn = __symbol_fn_vkCmdSetEvent;
  }
  
  const ___ret =  fn(commandBuffer_, event_, stageMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdResetEvent = null;
export function vkCmdResetEvent(commandBuffer_, event_, stageMask_){
  let fn = __symbol_fn_vkCmdResetEvent;
  if (fn === null){
    __symbol_fn_vkCmdResetEvent = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResetEvent: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdResetEvent;
    fn = __symbol_fn_vkCmdResetEvent;
  }
  
  const ___ret =  fn(commandBuffer_, event_, stageMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdWaitEvents = null;
export function vkCmdWaitEvents(commandBuffer_, eventCount_, pEvents_, srcStageMask_, dstStageMask_, memoryBarrierCount_, pMemoryBarriers_, bufferMemoryBarrierCount_, pBufferMemoryBarriers_, imageMemoryBarrierCount_, pImageMemoryBarriers_){
  let fn = __symbol_fn_vkCmdWaitEvents;
  if (fn === null){
    __symbol_fn_vkCmdWaitEvents = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWaitEvents: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdWaitEvents;
    fn = __symbol_fn_vkCmdWaitEvents;
  }
  
        let pMemoryBarriers__buffer = null
        if (pMemoryBarriers_ !== null && typeof pMemoryBarriers_ === 'object'){
          pMemoryBarriers__buffer = VkMemoryBarrier_to_C(pMemoryBarriers_ );
          pMemoryBarriers_ = pMemoryBarriers__buffer.ptr;
}
        let pBufferMemoryBarriers__buffer = null
        if (pBufferMemoryBarriers_ !== null && typeof pBufferMemoryBarriers_ === 'object'){
          pBufferMemoryBarriers__buffer = VkBufferMemoryBarrier_to_C(pBufferMemoryBarriers_ );
          pBufferMemoryBarriers_ = pBufferMemoryBarriers__buffer.ptr;
}
        let pImageMemoryBarriers__buffer = null
        if (pImageMemoryBarriers_ !== null && typeof pImageMemoryBarriers_ === 'object'){
          pImageMemoryBarriers__buffer = VkImageMemoryBarrier_to_C(pImageMemoryBarriers_ );
          pImageMemoryBarriers_ = pImageMemoryBarriers__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, eventCount_, pEvents_, srcStageMask_, dstStageMask_, memoryBarrierCount_, pMemoryBarriers_, bufferMemoryBarrierCount_, pBufferMemoryBarriers_, imageMemoryBarrierCount_, pImageMemoryBarriers_);
  
      pMemoryBarriers__buffer && pMemoryBarriers__buffer.free()
      
      pBufferMemoryBarriers__buffer && pBufferMemoryBarriers__buffer.free()
      
      pImageMemoryBarriers__buffer && pImageMemoryBarriers__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPipelineBarrier = null;
export function vkCmdPipelineBarrier(commandBuffer_, srcStageMask_, dstStageMask_, dependencyFlags_, memoryBarrierCount_, pMemoryBarriers_, bufferMemoryBarrierCount_, pBufferMemoryBarriers_, imageMemoryBarrierCount_, pImageMemoryBarriers_){
  let fn = __symbol_fn_vkCmdPipelineBarrier;
  if (fn === null){
    __symbol_fn_vkCmdPipelineBarrier = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPipelineBarrier: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPipelineBarrier;
    fn = __symbol_fn_vkCmdPipelineBarrier;
  }
  
        let pMemoryBarriers__buffer = null
        if (pMemoryBarriers_ !== null && typeof pMemoryBarriers_ === 'object'){
          pMemoryBarriers__buffer = VkMemoryBarrier_to_C(pMemoryBarriers_ );
          pMemoryBarriers_ = pMemoryBarriers__buffer.ptr;
}
        let pBufferMemoryBarriers__buffer = null
        if (pBufferMemoryBarriers_ !== null && typeof pBufferMemoryBarriers_ === 'object'){
          pBufferMemoryBarriers__buffer = VkBufferMemoryBarrier_to_C(pBufferMemoryBarriers_ );
          pBufferMemoryBarriers_ = pBufferMemoryBarriers__buffer.ptr;
}
        let pImageMemoryBarriers__buffer = null
        if (pImageMemoryBarriers_ !== null && typeof pImageMemoryBarriers_ === 'object'){
          pImageMemoryBarriers__buffer = VkImageMemoryBarrier_to_C(pImageMemoryBarriers_ );
          pImageMemoryBarriers_ = pImageMemoryBarriers__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, srcStageMask_, dstStageMask_, dependencyFlags_, memoryBarrierCount_, pMemoryBarriers_, bufferMemoryBarrierCount_, pBufferMemoryBarriers_, imageMemoryBarrierCount_, pImageMemoryBarriers_);
  
      pMemoryBarriers__buffer && pMemoryBarriers__buffer.free()
      
      pBufferMemoryBarriers__buffer && pBufferMemoryBarriers__buffer.free()
      
      pImageMemoryBarriers__buffer && pImageMemoryBarriers__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginQuery = null;
export function vkCmdBeginQuery(commandBuffer_, queryPool_, query_, flags_){
  let fn = __symbol_fn_vkCmdBeginQuery;
  if (fn === null){
    __symbol_fn_vkCmdBeginQuery = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginQuery: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginQuery;
    fn = __symbol_fn_vkCmdBeginQuery;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, query_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdEndQuery = null;
export function vkCmdEndQuery(commandBuffer_, queryPool_, query_){
  let fn = __symbol_fn_vkCmdEndQuery;
  if (fn === null){
    __symbol_fn_vkCmdEndQuery = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndQuery: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndQuery;
    fn = __symbol_fn_vkCmdEndQuery;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, query_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdResetQueryPool = null;
export function vkCmdResetQueryPool(commandBuffer_, queryPool_, firstQuery_, queryCount_){
  let fn = __symbol_fn_vkCmdResetQueryPool;
  if (fn === null){
    __symbol_fn_vkCmdResetQueryPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResetQueryPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdResetQueryPool;
    fn = __symbol_fn_vkCmdResetQueryPool;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, firstQuery_, queryCount_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteTimestamp = null;
export function vkCmdWriteTimestamp(commandBuffer_, pipelineStage_, queryPool_, query_){
  let fn = __symbol_fn_vkCmdWriteTimestamp;
  if (fn === null){
    __symbol_fn_vkCmdWriteTimestamp = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteTimestamp: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteTimestamp;
    fn = __symbol_fn_vkCmdWriteTimestamp;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineStage_, queryPool_, query_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyQueryPoolResults = null;
export function vkCmdCopyQueryPoolResults(commandBuffer_, queryPool_, firstQuery_, queryCount_, dstBuffer_, dstOffset_, stride_, flags_){
  let fn = __symbol_fn_vkCmdCopyQueryPoolResults;
  if (fn === null){
    __symbol_fn_vkCmdCopyQueryPoolResults = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyQueryPoolResults: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyQueryPoolResults;
    fn = __symbol_fn_vkCmdCopyQueryPoolResults;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, firstQuery_, queryCount_, dstBuffer_, dstOffset_, stride_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdPushConstants = null;
export function vkCmdPushConstants(commandBuffer_, layout_, stageFlags_, offset_, size_, pValues_){
  let fn = __symbol_fn_vkCmdPushConstants;
  if (fn === null){
    __symbol_fn_vkCmdPushConstants = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPushConstants: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPushConstants;
    fn = __symbol_fn_vkCmdPushConstants;
  }
  
  const ___ret =  fn(commandBuffer_, layout_, stageFlags_, offset_, size_, pValues_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginRenderPass = null;
export function vkCmdBeginRenderPass(commandBuffer_, pRenderPassBegin_, contents_){
  let fn = __symbol_fn_vkCmdBeginRenderPass;
  if (fn === null){
    __symbol_fn_vkCmdBeginRenderPass = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginRenderPass: {
      args: [FFIType.u64,FFIType.ptr,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginRenderPass;
    fn = __symbol_fn_vkCmdBeginRenderPass;
  }
  
        let pRenderPassBegin__buffer = null
        if (pRenderPassBegin_ !== null && typeof pRenderPassBegin_ === 'object'){
          pRenderPassBegin__buffer = VkRenderPassBeginInfo_to_C(pRenderPassBegin_ );
          pRenderPassBegin_ = pRenderPassBegin__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRenderPassBegin_, contents_);
  
      pRenderPassBegin__buffer && pRenderPassBegin__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdNextSubpass = null;
export function vkCmdNextSubpass(commandBuffer_, contents_){
  let fn = __symbol_fn_vkCmdNextSubpass;
  if (fn === null){
    __symbol_fn_vkCmdNextSubpass = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdNextSubpass: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdNextSubpass;
    fn = __symbol_fn_vkCmdNextSubpass;
  }
  
  const ___ret =  fn(commandBuffer_, contents_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdEndRenderPass = null;
export function vkCmdEndRenderPass(commandBuffer_){
  let fn = __symbol_fn_vkCmdEndRenderPass;
  if (fn === null){
    __symbol_fn_vkCmdEndRenderPass = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndRenderPass: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndRenderPass;
    fn = __symbol_fn_vkCmdEndRenderPass;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdExecuteCommands = null;
export function vkCmdExecuteCommands(commandBuffer_, commandBufferCount_, pCommandBuffers_){
  let fn = __symbol_fn_vkCmdExecuteCommands;
  if (fn === null){
    __symbol_fn_vkCmdExecuteCommands = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdExecuteCommands: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdExecuteCommands;
    fn = __symbol_fn_vkCmdExecuteCommands;
  }
  
  const ___ret =  fn(commandBuffer_, commandBufferCount_, pCommandBuffers_);
  
  return ___ret;
}
  
let __symbol_fn_vkEnumerateInstanceVersion = null;
export function vkEnumerateInstanceVersion(pApiVersion_){
  let fn = __symbol_fn_vkEnumerateInstanceVersion;
  if (fn === null){
    __symbol_fn_vkEnumerateInstanceVersion = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumerateInstanceVersion: {
      args: [FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumerateInstanceVersion;
    fn = __symbol_fn_vkEnumerateInstanceVersion;
  }
  
  const ___ret =  fn(pApiVersion_);
  
  return ___ret;
}
  
let __symbol_fn_vkBindBufferMemory2 = null;
export function vkBindBufferMemory2(device_, bindInfoCount_, pBindInfos_){
  let fn = __symbol_fn_vkBindBufferMemory2;
  if (fn === null){
    __symbol_fn_vkBindBufferMemory2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindBufferMemory2: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBindBufferMemory2;
    fn = __symbol_fn_vkBindBufferMemory2;
  }
  
        let pBindInfos__buffer = null
        if (pBindInfos_ !== null && typeof pBindInfos_ === 'object'){
          pBindInfos__buffer = VkBindBufferMemoryInfo_to_C(pBindInfos_ );
          pBindInfos_ = pBindInfos__buffer.ptr;
}
  const ___ret =  fn(device_, bindInfoCount_, pBindInfos_);
  
      pBindInfos__buffer && pBindInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkBindImageMemory2 = null;
export function vkBindImageMemory2(device_, bindInfoCount_, pBindInfos_){
  let fn = __symbol_fn_vkBindImageMemory2;
  if (fn === null){
    __symbol_fn_vkBindImageMemory2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindImageMemory2: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBindImageMemory2;
    fn = __symbol_fn_vkBindImageMemory2;
  }
  
        let pBindInfos__buffer = null
        if (pBindInfos_ !== null && typeof pBindInfos_ === 'object'){
          pBindInfos__buffer = VkBindImageMemoryInfo_to_C(pBindInfos_ );
          pBindInfos_ = pBindInfos__buffer.ptr;
}
  const ___ret =  fn(device_, bindInfoCount_, pBindInfos_);
  
      pBindInfos__buffer && pBindInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceGroupPeerMemoryFeatures = null;
export function vkGetDeviceGroupPeerMemoryFeatures(device_, heapIndex_, localDeviceIndex_, remoteDeviceIndex_, pPeerMemoryFeatures_){
  let fn = __symbol_fn_vkGetDeviceGroupPeerMemoryFeatures;
  if (fn === null){
    __symbol_fn_vkGetDeviceGroupPeerMemoryFeatures = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceGroupPeerMemoryFeatures: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceGroupPeerMemoryFeatures;
    fn = __symbol_fn_vkGetDeviceGroupPeerMemoryFeatures;
  }
  
  const ___ret =  fn(device_, heapIndex_, localDeviceIndex_, remoteDeviceIndex_, pPeerMemoryFeatures_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDeviceMask = null;
export function vkCmdSetDeviceMask(commandBuffer_, deviceMask_){
  let fn = __symbol_fn_vkCmdSetDeviceMask;
  if (fn === null){
    __symbol_fn_vkCmdSetDeviceMask = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDeviceMask: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDeviceMask;
    fn = __symbol_fn_vkCmdSetDeviceMask;
  }
  
  const ___ret =  fn(commandBuffer_, deviceMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDispatchBase = null;
export function vkCmdDispatchBase(commandBuffer_, baseGroupX_, baseGroupY_, baseGroupZ_, groupCountX_, groupCountY_, groupCountZ_){
  let fn = __symbol_fn_vkCmdDispatchBase;
  if (fn === null){
    __symbol_fn_vkCmdDispatchBase = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDispatchBase: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDispatchBase;
    fn = __symbol_fn_vkCmdDispatchBase;
  }
  
  const ___ret =  fn(commandBuffer_, baseGroupX_, baseGroupY_, baseGroupZ_, groupCountX_, groupCountY_, groupCountZ_);
  
  return ___ret;
}
  
let __symbol_fn_vkEnumeratePhysicalDeviceGroups = null;
export function vkEnumeratePhysicalDeviceGroups(instance_, pPhysicalDeviceGroupCount_, pPhysicalDeviceGroupProperties_){
  let fn = __symbol_fn_vkEnumeratePhysicalDeviceGroups;
  if (fn === null){
    __symbol_fn_vkEnumeratePhysicalDeviceGroups = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumeratePhysicalDeviceGroups: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumeratePhysicalDeviceGroups;
    fn = __symbol_fn_vkEnumeratePhysicalDeviceGroups;
  }
  
        let pPhysicalDeviceGroupProperties__buffer = null
        if (pPhysicalDeviceGroupProperties_ !== null && typeof pPhysicalDeviceGroupProperties_ === 'object'){
          pPhysicalDeviceGroupProperties__buffer = VkPhysicalDeviceGroupProperties_to_C(pPhysicalDeviceGroupProperties_ );
          pPhysicalDeviceGroupProperties_ = pPhysicalDeviceGroupProperties__buffer.ptr;
}
  const ___ret =  fn(instance_, pPhysicalDeviceGroupCount_, pPhysicalDeviceGroupProperties_);
  
      pPhysicalDeviceGroupProperties__buffer && pPhysicalDeviceGroupProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageMemoryRequirements2 = null;
export function vkGetImageMemoryRequirements2(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageMemoryRequirements2;
  if (fn === null){
    __symbol_fn_vkGetImageMemoryRequirements2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageMemoryRequirements2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageMemoryRequirements2;
    fn = __symbol_fn_vkGetImageMemoryRequirements2;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkImageMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetBufferMemoryRequirements2 = null;
export function vkGetBufferMemoryRequirements2(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetBufferMemoryRequirements2;
  if (fn === null){
    __symbol_fn_vkGetBufferMemoryRequirements2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferMemoryRequirements2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferMemoryRequirements2;
    fn = __symbol_fn_vkGetBufferMemoryRequirements2;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageSparseMemoryRequirements2 = null;
export function vkGetImageSparseMemoryRequirements2(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageSparseMemoryRequirements2;
  if (fn === null){
    __symbol_fn_vkGetImageSparseMemoryRequirements2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageSparseMemoryRequirements2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageSparseMemoryRequirements2;
    fn = __symbol_fn_vkGetImageSparseMemoryRequirements2;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkImageSparseMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pSparseMemoryRequirements__buffer = null
        if (pSparseMemoryRequirements_ !== null && typeof pSparseMemoryRequirements_ === 'object'){
          pSparseMemoryRequirements__buffer = VkSparseImageMemoryRequirements2_to_C(pSparseMemoryRequirements_ );
          pSparseMemoryRequirements_ = pSparseMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pSparseMemoryRequirements__buffer && pSparseMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFeatures2 = null;
export function vkGetPhysicalDeviceFeatures2(physicalDevice_, pFeatures_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFeatures2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFeatures2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFeatures2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFeatures2;
    fn = __symbol_fn_vkGetPhysicalDeviceFeatures2;
  }
  
        let pFeatures__buffer = null
        if (pFeatures_ !== null && typeof pFeatures_ === 'object'){
          pFeatures__buffer = VkPhysicalDeviceFeatures2_to_C(pFeatures_ );
          pFeatures_ = pFeatures__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFeatures_);
  
      pFeatures__buffer && pFeatures__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceProperties2 = null;
export function vkGetPhysicalDeviceProperties2(physicalDevice_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceProperties2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceProperties2;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkPhysicalDeviceProperties2_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFormatProperties2 = null;
export function vkGetPhysicalDeviceFormatProperties2(physicalDevice_, format_, pFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFormatProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFormatProperties2: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFormatProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties2;
  }
  
        let pFormatProperties__buffer = null
        if (pFormatProperties_ !== null && typeof pFormatProperties_ === 'object'){
          pFormatProperties__buffer = VkFormatProperties2_to_C(pFormatProperties_ );
          pFormatProperties_ = pFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, pFormatProperties_);
  
      pFormatProperties__buffer && pFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2 = null;
export function vkGetPhysicalDeviceImageFormatProperties2(physicalDevice_, pImageFormatInfo_, pImageFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceImageFormatProperties2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceImageFormatProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2;
  }
  
        let pImageFormatInfo__buffer = null
        if (pImageFormatInfo_ !== null && typeof pImageFormatInfo_ === 'object'){
          pImageFormatInfo__buffer = VkPhysicalDeviceImageFormatInfo2_to_C(pImageFormatInfo_ );
          pImageFormatInfo_ = pImageFormatInfo__buffer.ptr;
}
        let pImageFormatProperties__buffer = null
        if (pImageFormatProperties_ !== null && typeof pImageFormatProperties_ === 'object'){
          pImageFormatProperties__buffer = VkImageFormatProperties2_to_C(pImageFormatProperties_ );
          pImageFormatProperties_ = pImageFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pImageFormatInfo_, pImageFormatProperties_);
  
      pImageFormatInfo__buffer && pImageFormatInfo__buffer.free()
      
      pImageFormatProperties__buffer && pImageFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2 = null;
export function vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceQueueFamilyProperties2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceQueueFamilyProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2;
  }
  
        let pQueueFamilyProperties__buffer = null
        if (pQueueFamilyProperties_ !== null && typeof pQueueFamilyProperties_ === 'object'){
          pQueueFamilyProperties__buffer = VkQueueFamilyProperties2_to_C(pQueueFamilyProperties_ );
          pQueueFamilyProperties_ = pQueueFamilyProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_);
  
      pQueueFamilyProperties__buffer && pQueueFamilyProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceMemoryProperties2 = null;
export function vkGetPhysicalDeviceMemoryProperties2(physicalDevice_, pMemoryProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceMemoryProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceMemoryProperties2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceMemoryProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties2;
  }
  
        let pMemoryProperties__buffer = null
        if (pMemoryProperties_ !== null && typeof pMemoryProperties_ === 'object'){
          pMemoryProperties__buffer = VkPhysicalDeviceMemoryProperties2_to_C(pMemoryProperties_ );
          pMemoryProperties_ = pMemoryProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pMemoryProperties_);
  
      pMemoryProperties__buffer && pMemoryProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2 = null;
export function vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice_, pFormatInfo_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSparseImageFormatProperties2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceSparseImageFormatProperties2;
    fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2;
  }
  
        let pFormatInfo__buffer = null
        if (pFormatInfo_ !== null && typeof pFormatInfo_ === 'object'){
          pFormatInfo__buffer = VkPhysicalDeviceSparseImageFormatInfo2_to_C(pFormatInfo_ );
          pFormatInfo_ = pFormatInfo__buffer.ptr;
}
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkSparseImageFormatProperties2_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFormatInfo_, pPropertyCount_, pProperties_);
  
      pFormatInfo__buffer && pFormatInfo__buffer.free()
      
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkTrimCommandPool = null;
export function vkTrimCommandPool(device_, commandPool_, flags_){
  let fn = __symbol_fn_vkTrimCommandPool;
  if (fn === null){
    __symbol_fn_vkTrimCommandPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkTrimCommandPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkTrimCommandPool;
    fn = __symbol_fn_vkTrimCommandPool;
  }
  
  const ___ret =  fn(device_, commandPool_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceQueue2 = null;
export function vkGetDeviceQueue2(device_, pQueueInfo_, pQueue_){
  let fn = __symbol_fn_vkGetDeviceQueue2;
  if (fn === null){
    __symbol_fn_vkGetDeviceQueue2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceQueue2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceQueue2;
    fn = __symbol_fn_vkGetDeviceQueue2;
  }
  
        let pQueueInfo__buffer = null
        if (pQueueInfo_ !== null && typeof pQueueInfo_ === 'object'){
          pQueueInfo__buffer = VkDeviceQueueInfo2_to_C(pQueueInfo_ );
          pQueueInfo_ = pQueueInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pQueueInfo_, pQueue_);
  
      pQueueInfo__buffer && pQueueInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateSamplerYcbcrConversion = null;
export function vkCreateSamplerYcbcrConversion(device_, pCreateInfo_, pAllocator_, pYcbcrConversion_){
  let fn = __symbol_fn_vkCreateSamplerYcbcrConversion;
  if (fn === null){
    __symbol_fn_vkCreateSamplerYcbcrConversion = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSamplerYcbcrConversion: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSamplerYcbcrConversion;
    fn = __symbol_fn_vkCreateSamplerYcbcrConversion;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkSamplerYcbcrConversionCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pYcbcrConversion_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySamplerYcbcrConversion = null;
export function vkDestroySamplerYcbcrConversion(device_, ycbcrConversion_, pAllocator_){
  let fn = __symbol_fn_vkDestroySamplerYcbcrConversion;
  if (fn === null){
    __symbol_fn_vkDestroySamplerYcbcrConversion = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySamplerYcbcrConversion: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySamplerYcbcrConversion;
    fn = __symbol_fn_vkDestroySamplerYcbcrConversion;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, ycbcrConversion_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDescriptorUpdateTemplate = null;
export function vkCreateDescriptorUpdateTemplate(device_, pCreateInfo_, pAllocator_, pDescriptorUpdateTemplate_){
  let fn = __symbol_fn_vkCreateDescriptorUpdateTemplate;
  if (fn === null){
    __symbol_fn_vkCreateDescriptorUpdateTemplate = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDescriptorUpdateTemplate: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDescriptorUpdateTemplate;
    fn = __symbol_fn_vkCreateDescriptorUpdateTemplate;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorUpdateTemplateCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pDescriptorUpdateTemplate_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDescriptorUpdateTemplate = null;
export function vkDestroyDescriptorUpdateTemplate(device_, descriptorUpdateTemplate_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDescriptorUpdateTemplate;
  if (fn === null){
    __symbol_fn_vkDestroyDescriptorUpdateTemplate = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDescriptorUpdateTemplate: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDescriptorUpdateTemplate;
    fn = __symbol_fn_vkDestroyDescriptorUpdateTemplate;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, descriptorUpdateTemplate_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkUpdateDescriptorSetWithTemplate = null;
export function vkUpdateDescriptorSetWithTemplate(device_, descriptorSet_, descriptorUpdateTemplate_, pData_){
  let fn = __symbol_fn_vkUpdateDescriptorSetWithTemplate;
  if (fn === null){
    __symbol_fn_vkUpdateDescriptorSetWithTemplate = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkUpdateDescriptorSetWithTemplate: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkUpdateDescriptorSetWithTemplate;
    fn = __symbol_fn_vkUpdateDescriptorSetWithTemplate;
  }
  
  const ___ret =  fn(device_, descriptorSet_, descriptorUpdateTemplate_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalBufferProperties = null;
export function vkGetPhysicalDeviceExternalBufferProperties(physicalDevice_, pExternalBufferInfo_, pExternalBufferProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalBufferProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalBufferProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalBufferProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalBufferProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalBufferProperties;
  }
  
        let pExternalBufferInfo__buffer = null
        if (pExternalBufferInfo_ !== null && typeof pExternalBufferInfo_ === 'object'){
          pExternalBufferInfo__buffer = VkPhysicalDeviceExternalBufferInfo_to_C(pExternalBufferInfo_ );
          pExternalBufferInfo_ = pExternalBufferInfo__buffer.ptr;
}
        let pExternalBufferProperties__buffer = null
        if (pExternalBufferProperties_ !== null && typeof pExternalBufferProperties_ === 'object'){
          pExternalBufferProperties__buffer = VkExternalBufferProperties_to_C(pExternalBufferProperties_ );
          pExternalBufferProperties_ = pExternalBufferProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalBufferInfo_, pExternalBufferProperties_);
  
      pExternalBufferInfo__buffer && pExternalBufferInfo__buffer.free()
      
      pExternalBufferProperties__buffer && pExternalBufferProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalFenceProperties = null;
export function vkGetPhysicalDeviceExternalFenceProperties(physicalDevice_, pExternalFenceInfo_, pExternalFenceProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalFenceProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalFenceProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalFenceProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalFenceProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalFenceProperties;
  }
  
        let pExternalFenceInfo__buffer = null
        if (pExternalFenceInfo_ !== null && typeof pExternalFenceInfo_ === 'object'){
          pExternalFenceInfo__buffer = VkPhysicalDeviceExternalFenceInfo_to_C(pExternalFenceInfo_ );
          pExternalFenceInfo_ = pExternalFenceInfo__buffer.ptr;
}
        let pExternalFenceProperties__buffer = null
        if (pExternalFenceProperties_ !== null && typeof pExternalFenceProperties_ === 'object'){
          pExternalFenceProperties__buffer = VkExternalFenceProperties_to_C(pExternalFenceProperties_ );
          pExternalFenceProperties_ = pExternalFenceProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalFenceInfo_, pExternalFenceProperties_);
  
      pExternalFenceInfo__buffer && pExternalFenceInfo__buffer.free()
      
      pExternalFenceProperties__buffer && pExternalFenceProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalSemaphoreProperties = null;
export function vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice_, pExternalSemaphoreInfo_, pExternalSemaphoreProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalSemaphoreProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalSemaphoreProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalSemaphoreProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalSemaphoreProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalSemaphoreProperties;
  }
  
        let pExternalSemaphoreInfo__buffer = null
        if (pExternalSemaphoreInfo_ !== null && typeof pExternalSemaphoreInfo_ === 'object'){
          pExternalSemaphoreInfo__buffer = VkPhysicalDeviceExternalSemaphoreInfo_to_C(pExternalSemaphoreInfo_ );
          pExternalSemaphoreInfo_ = pExternalSemaphoreInfo__buffer.ptr;
}
        let pExternalSemaphoreProperties__buffer = null
        if (pExternalSemaphoreProperties_ !== null && typeof pExternalSemaphoreProperties_ === 'object'){
          pExternalSemaphoreProperties__buffer = VkExternalSemaphoreProperties_to_C(pExternalSemaphoreProperties_ );
          pExternalSemaphoreProperties_ = pExternalSemaphoreProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalSemaphoreInfo_, pExternalSemaphoreProperties_);
  
      pExternalSemaphoreInfo__buffer && pExternalSemaphoreInfo__buffer.free()
      
      pExternalSemaphoreProperties__buffer && pExternalSemaphoreProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDescriptorSetLayoutSupport = null;
export function vkGetDescriptorSetLayoutSupport(device_, pCreateInfo_, pSupport_){
  let fn = __symbol_fn_vkGetDescriptorSetLayoutSupport;
  if (fn === null){
    __symbol_fn_vkGetDescriptorSetLayoutSupport = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDescriptorSetLayoutSupport: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDescriptorSetLayoutSupport;
    fn = __symbol_fn_vkGetDescriptorSetLayoutSupport;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorSetLayoutCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pSupport__buffer = null
        if (pSupport_ !== null && typeof pSupport_ === 'object'){
          pSupport__buffer = VkDescriptorSetLayoutSupport_to_C(pSupport_ );
          pSupport_ = pSupport__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pSupport_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pSupport__buffer && pSupport__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndirectCount = null;
export function vkCmdDrawIndirectCount(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndirectCount;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndirectCount = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndirectCount: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndirectCount;
    fn = __symbol_fn_vkCmdDrawIndirectCount;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndexedIndirectCount = null;
export function vkCmdDrawIndexedIndirectCount(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndexedIndirectCount;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndexedIndirectCount = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndexedIndirectCount: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndexedIndirectCount;
    fn = __symbol_fn_vkCmdDrawIndexedIndirectCount;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateRenderPass2 = null;
export function vkCreateRenderPass2(device_, pCreateInfo_, pAllocator_, pRenderPass_){
  let fn = __symbol_fn_vkCreateRenderPass2;
  if (fn === null){
    __symbol_fn_vkCreateRenderPass2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateRenderPass2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateRenderPass2;
    fn = __symbol_fn_vkCreateRenderPass2;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkRenderPassCreateInfo2_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pRenderPass_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginRenderPass2 = null;
export function vkCmdBeginRenderPass2(commandBuffer_, pRenderPassBegin_, pSubpassBeginInfo_){
  let fn = __symbol_fn_vkCmdBeginRenderPass2;
  if (fn === null){
    __symbol_fn_vkCmdBeginRenderPass2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginRenderPass2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginRenderPass2;
    fn = __symbol_fn_vkCmdBeginRenderPass2;
  }
  
        let pRenderPassBegin__buffer = null
        if (pRenderPassBegin_ !== null && typeof pRenderPassBegin_ === 'object'){
          pRenderPassBegin__buffer = VkRenderPassBeginInfo_to_C(pRenderPassBegin_ );
          pRenderPassBegin_ = pRenderPassBegin__buffer.ptr;
}
        let pSubpassBeginInfo__buffer = null
        if (pSubpassBeginInfo_ !== null && typeof pSubpassBeginInfo_ === 'object'){
          pSubpassBeginInfo__buffer = VkSubpassBeginInfo_to_C(pSubpassBeginInfo_ );
          pSubpassBeginInfo_ = pSubpassBeginInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRenderPassBegin_, pSubpassBeginInfo_);
  
      pRenderPassBegin__buffer && pRenderPassBegin__buffer.free()
      
      pSubpassBeginInfo__buffer && pSubpassBeginInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdNextSubpass2 = null;
export function vkCmdNextSubpass2(commandBuffer_, pSubpassBeginInfo_, pSubpassEndInfo_){
  let fn = __symbol_fn_vkCmdNextSubpass2;
  if (fn === null){
    __symbol_fn_vkCmdNextSubpass2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdNextSubpass2: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdNextSubpass2;
    fn = __symbol_fn_vkCmdNextSubpass2;
  }
  
        let pSubpassBeginInfo__buffer = null
        if (pSubpassBeginInfo_ !== null && typeof pSubpassBeginInfo_ === 'object'){
          pSubpassBeginInfo__buffer = VkSubpassBeginInfo_to_C(pSubpassBeginInfo_ );
          pSubpassBeginInfo_ = pSubpassBeginInfo__buffer.ptr;
}
        let pSubpassEndInfo__buffer = null
        if (pSubpassEndInfo_ !== null && typeof pSubpassEndInfo_ === 'object'){
          pSubpassEndInfo__buffer = VkSubpassEndInfo_to_C(pSubpassEndInfo_ );
          pSubpassEndInfo_ = pSubpassEndInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pSubpassBeginInfo_, pSubpassEndInfo_);
  
      pSubpassBeginInfo__buffer && pSubpassBeginInfo__buffer.free()
      
      pSubpassEndInfo__buffer && pSubpassEndInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndRenderPass2 = null;
export function vkCmdEndRenderPass2(commandBuffer_, pSubpassEndInfo_){
  let fn = __symbol_fn_vkCmdEndRenderPass2;
  if (fn === null){
    __symbol_fn_vkCmdEndRenderPass2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndRenderPass2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndRenderPass2;
    fn = __symbol_fn_vkCmdEndRenderPass2;
  }
  
        let pSubpassEndInfo__buffer = null
        if (pSubpassEndInfo_ !== null && typeof pSubpassEndInfo_ === 'object'){
          pSubpassEndInfo__buffer = VkSubpassEndInfo_to_C(pSubpassEndInfo_ );
          pSubpassEndInfo_ = pSubpassEndInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pSubpassEndInfo_);
  
      pSubpassEndInfo__buffer && pSubpassEndInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkResetQueryPool = null;
export function vkResetQueryPool(device_, queryPool_, firstQuery_, queryCount_){
  let fn = __symbol_fn_vkResetQueryPool;
  if (fn === null){
    __symbol_fn_vkResetQueryPool = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetQueryPool: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkResetQueryPool;
    fn = __symbol_fn_vkResetQueryPool;
  }
  
  const ___ret =  fn(device_, queryPool_, firstQuery_, queryCount_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetSemaphoreCounterValue = null;
export function vkGetSemaphoreCounterValue(device_, semaphore_, pValue_){
  let fn = __symbol_fn_vkGetSemaphoreCounterValue;
  if (fn === null){
    __symbol_fn_vkGetSemaphoreCounterValue = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSemaphoreCounterValue: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetSemaphoreCounterValue;
    fn = __symbol_fn_vkGetSemaphoreCounterValue;
  }
  
  const ___ret =  fn(device_, semaphore_, pValue_);
  
  return ___ret;
}
  
let __symbol_fn_vkWaitSemaphores = null;
export function vkWaitSemaphores(device_, pWaitInfo_, timeout_){
  let fn = __symbol_fn_vkWaitSemaphores;
  if (fn === null){
    __symbol_fn_vkWaitSemaphores = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkWaitSemaphores: {
      args: [FFIType.u64,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkWaitSemaphores;
    fn = __symbol_fn_vkWaitSemaphores;
  }
  
        let pWaitInfo__buffer = null
        if (pWaitInfo_ !== null && typeof pWaitInfo_ === 'object'){
          pWaitInfo__buffer = VkSemaphoreWaitInfo_to_C(pWaitInfo_ );
          pWaitInfo_ = pWaitInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pWaitInfo_, timeout_);
  
      pWaitInfo__buffer && pWaitInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSignalSemaphore = null;
export function vkSignalSemaphore(device_, pSignalInfo_){
  let fn = __symbol_fn_vkSignalSemaphore;
  if (fn === null){
    __symbol_fn_vkSignalSemaphore = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSignalSemaphore: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkSignalSemaphore;
    fn = __symbol_fn_vkSignalSemaphore;
  }
  
        let pSignalInfo__buffer = null
        if (pSignalInfo_ !== null && typeof pSignalInfo_ === 'object'){
          pSignalInfo__buffer = VkSemaphoreSignalInfo_to_C(pSignalInfo_ );
          pSignalInfo_ = pSignalInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pSignalInfo_);
  
      pSignalInfo__buffer && pSignalInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetBufferDeviceAddress = null;
export function vkGetBufferDeviceAddress(device_, pInfo_){
  let fn = __symbol_fn_vkGetBufferDeviceAddress;
  if (fn === null){
    __symbol_fn_vkGetBufferDeviceAddress = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferDeviceAddress: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferDeviceAddress;
    fn = __symbol_fn_vkGetBufferDeviceAddress;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferDeviceAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetBufferOpaqueCaptureAddress = null;
export function vkGetBufferOpaqueCaptureAddress(device_, pInfo_){
  let fn = __symbol_fn_vkGetBufferOpaqueCaptureAddress;
  if (fn === null){
    __symbol_fn_vkGetBufferOpaqueCaptureAddress = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferOpaqueCaptureAddress: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferOpaqueCaptureAddress;
    fn = __symbol_fn_vkGetBufferOpaqueCaptureAddress;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferDeviceAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddress = null;
export function vkGetDeviceMemoryOpaqueCaptureAddress(device_, pInfo_){
  let fn = __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddress;
  if (fn === null){
    __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddress = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceMemoryOpaqueCaptureAddress: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceMemoryOpaqueCaptureAddress;
    fn = __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddress;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceMemoryOpaqueCaptureAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceToolProperties = null;
export function vkGetPhysicalDeviceToolProperties(physicalDevice_, pToolCount_, pToolProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceToolProperties;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceToolProperties = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceToolProperties: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceToolProperties;
    fn = __symbol_fn_vkGetPhysicalDeviceToolProperties;
  }
  
        let pToolProperties__buffer = null
        if (pToolProperties_ !== null && typeof pToolProperties_ === 'object'){
          pToolProperties__buffer = VkPhysicalDeviceToolProperties_to_C(pToolProperties_ );
          pToolProperties_ = pToolProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pToolCount_, pToolProperties_);
  
      pToolProperties__buffer && pToolProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreatePrivateDataSlot = null;
export function vkCreatePrivateDataSlot(device_, pCreateInfo_, pAllocator_, pPrivateDataSlot_){
  let fn = __symbol_fn_vkCreatePrivateDataSlot;
  if (fn === null){
    __symbol_fn_vkCreatePrivateDataSlot = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreatePrivateDataSlot: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreatePrivateDataSlot;
    fn = __symbol_fn_vkCreatePrivateDataSlot;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkPrivateDataSlotCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pPrivateDataSlot_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyPrivateDataSlot = null;
export function vkDestroyPrivateDataSlot(device_, privateDataSlot_, pAllocator_){
  let fn = __symbol_fn_vkDestroyPrivateDataSlot;
  if (fn === null){
    __symbol_fn_vkDestroyPrivateDataSlot = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyPrivateDataSlot: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyPrivateDataSlot;
    fn = __symbol_fn_vkDestroyPrivateDataSlot;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, privateDataSlot_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetPrivateData = null;
export function vkSetPrivateData(device_, objectType_, objectHandle_, privateDataSlot_, data_){
  let fn = __symbol_fn_vkSetPrivateData;
  if (fn === null){
    __symbol_fn_vkSetPrivateData = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetPrivateData: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkSetPrivateData;
    fn = __symbol_fn_vkSetPrivateData;
  }
  
  const ___ret =  fn(device_, objectType_, objectHandle_, privateDataSlot_, data_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPrivateData = null;
export function vkGetPrivateData(device_, objectType_, objectHandle_, privateDataSlot_, pData_){
  let fn = __symbol_fn_vkGetPrivateData;
  if (fn === null){
    __symbol_fn_vkGetPrivateData = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPrivateData: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPrivateData;
    fn = __symbol_fn_vkGetPrivateData;
  }
  
  const ___ret =  fn(device_, objectType_, objectHandle_, privateDataSlot_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetEvent2 = null;
export function vkCmdSetEvent2(commandBuffer_, event_, pDependencyInfo_){
  let fn = __symbol_fn_vkCmdSetEvent2;
  if (fn === null){
    __symbol_fn_vkCmdSetEvent2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetEvent2: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetEvent2;
    fn = __symbol_fn_vkCmdSetEvent2;
  }
  
        let pDependencyInfo__buffer = null
        if (pDependencyInfo_ !== null && typeof pDependencyInfo_ === 'object'){
          pDependencyInfo__buffer = VkDependencyInfo_to_C(pDependencyInfo_ );
          pDependencyInfo_ = pDependencyInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, event_, pDependencyInfo_);
  
      pDependencyInfo__buffer && pDependencyInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdResetEvent2 = null;
export function vkCmdResetEvent2(commandBuffer_, event_, stageMask_){
  let fn = __symbol_fn_vkCmdResetEvent2;
  if (fn === null){
    __symbol_fn_vkCmdResetEvent2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResetEvent2: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdResetEvent2;
    fn = __symbol_fn_vkCmdResetEvent2;
  }
  
  const ___ret =  fn(commandBuffer_, event_, stageMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdWaitEvents2 = null;
export function vkCmdWaitEvents2(commandBuffer_, eventCount_, pEvents_, pDependencyInfos_){
  let fn = __symbol_fn_vkCmdWaitEvents2;
  if (fn === null){
    __symbol_fn_vkCmdWaitEvents2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWaitEvents2: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdWaitEvents2;
    fn = __symbol_fn_vkCmdWaitEvents2;
  }
  
        let pDependencyInfos__buffer = null
        if (pDependencyInfos_ !== null && typeof pDependencyInfos_ === 'object'){
          pDependencyInfos__buffer = VkDependencyInfo_to_C(pDependencyInfos_ );
          pDependencyInfos_ = pDependencyInfos__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, eventCount_, pEvents_, pDependencyInfos_);
  
      pDependencyInfos__buffer && pDependencyInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPipelineBarrier2 = null;
export function vkCmdPipelineBarrier2(commandBuffer_, pDependencyInfo_){
  let fn = __symbol_fn_vkCmdPipelineBarrier2;
  if (fn === null){
    __symbol_fn_vkCmdPipelineBarrier2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPipelineBarrier2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPipelineBarrier2;
    fn = __symbol_fn_vkCmdPipelineBarrier2;
  }
  
        let pDependencyInfo__buffer = null
        if (pDependencyInfo_ !== null && typeof pDependencyInfo_ === 'object'){
          pDependencyInfo__buffer = VkDependencyInfo_to_C(pDependencyInfo_ );
          pDependencyInfo_ = pDependencyInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pDependencyInfo_);
  
      pDependencyInfo__buffer && pDependencyInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteTimestamp2 = null;
export function vkCmdWriteTimestamp2(commandBuffer_, stage_, queryPool_, query_){
  let fn = __symbol_fn_vkCmdWriteTimestamp2;
  if (fn === null){
    __symbol_fn_vkCmdWriteTimestamp2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteTimestamp2: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteTimestamp2;
    fn = __symbol_fn_vkCmdWriteTimestamp2;
  }
  
  const ___ret =  fn(commandBuffer_, stage_, queryPool_, query_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueueSubmit2 = null;
export function vkQueueSubmit2(queue_, submitCount_, pSubmits_, fence_){
  let fn = __symbol_fn_vkQueueSubmit2;
  if (fn === null){
    __symbol_fn_vkQueueSubmit2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueSubmit2: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueSubmit2;
    fn = __symbol_fn_vkQueueSubmit2;
  }
  
        let pSubmits__buffer = null
        if (pSubmits_ !== null && typeof pSubmits_ === 'object'){
          pSubmits__buffer = VkSubmitInfo2_to_C(pSubmits_ );
          pSubmits_ = pSubmits__buffer.ptr;
}
  const ___ret =  fn(queue_, submitCount_, pSubmits_, fence_);
  
      pSubmits__buffer && pSubmits__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBuffer2 = null;
export function vkCmdCopyBuffer2(commandBuffer_, pCopyBufferInfo_){
  let fn = __symbol_fn_vkCmdCopyBuffer2;
  if (fn === null){
    __symbol_fn_vkCmdCopyBuffer2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBuffer2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBuffer2;
    fn = __symbol_fn_vkCmdCopyBuffer2;
  }
  
        let pCopyBufferInfo__buffer = null
        if (pCopyBufferInfo_ !== null && typeof pCopyBufferInfo_ === 'object'){
          pCopyBufferInfo__buffer = VkCopyBufferInfo2_to_C(pCopyBufferInfo_ );
          pCopyBufferInfo_ = pCopyBufferInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyBufferInfo_);
  
      pCopyBufferInfo__buffer && pCopyBufferInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImage2 = null;
export function vkCmdCopyImage2(commandBuffer_, pCopyImageInfo_){
  let fn = __symbol_fn_vkCmdCopyImage2;
  if (fn === null){
    __symbol_fn_vkCmdCopyImage2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImage2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImage2;
    fn = __symbol_fn_vkCmdCopyImage2;
  }
  
        let pCopyImageInfo__buffer = null
        if (pCopyImageInfo_ !== null && typeof pCopyImageInfo_ === 'object'){
          pCopyImageInfo__buffer = VkCopyImageInfo2_to_C(pCopyImageInfo_ );
          pCopyImageInfo_ = pCopyImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyImageInfo_);
  
      pCopyImageInfo__buffer && pCopyImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBufferToImage2 = null;
export function vkCmdCopyBufferToImage2(commandBuffer_, pCopyBufferToImageInfo_){
  let fn = __symbol_fn_vkCmdCopyBufferToImage2;
  if (fn === null){
    __symbol_fn_vkCmdCopyBufferToImage2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBufferToImage2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBufferToImage2;
    fn = __symbol_fn_vkCmdCopyBufferToImage2;
  }
  
        let pCopyBufferToImageInfo__buffer = null
        if (pCopyBufferToImageInfo_ !== null && typeof pCopyBufferToImageInfo_ === 'object'){
          pCopyBufferToImageInfo__buffer = VkCopyBufferToImageInfo2_to_C(pCopyBufferToImageInfo_ );
          pCopyBufferToImageInfo_ = pCopyBufferToImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyBufferToImageInfo_);
  
      pCopyBufferToImageInfo__buffer && pCopyBufferToImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImageToBuffer2 = null;
export function vkCmdCopyImageToBuffer2(commandBuffer_, pCopyImageToBufferInfo_){
  let fn = __symbol_fn_vkCmdCopyImageToBuffer2;
  if (fn === null){
    __symbol_fn_vkCmdCopyImageToBuffer2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImageToBuffer2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImageToBuffer2;
    fn = __symbol_fn_vkCmdCopyImageToBuffer2;
  }
  
        let pCopyImageToBufferInfo__buffer = null
        if (pCopyImageToBufferInfo_ !== null && typeof pCopyImageToBufferInfo_ === 'object'){
          pCopyImageToBufferInfo__buffer = VkCopyImageToBufferInfo2_to_C(pCopyImageToBufferInfo_ );
          pCopyImageToBufferInfo_ = pCopyImageToBufferInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyImageToBufferInfo_);
  
      pCopyImageToBufferInfo__buffer && pCopyImageToBufferInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBlitImage2 = null;
export function vkCmdBlitImage2(commandBuffer_, pBlitImageInfo_){
  let fn = __symbol_fn_vkCmdBlitImage2;
  if (fn === null){
    __symbol_fn_vkCmdBlitImage2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBlitImage2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBlitImage2;
    fn = __symbol_fn_vkCmdBlitImage2;
  }
  
        let pBlitImageInfo__buffer = null
        if (pBlitImageInfo_ !== null && typeof pBlitImageInfo_ === 'object'){
          pBlitImageInfo__buffer = VkBlitImageInfo2_to_C(pBlitImageInfo_ );
          pBlitImageInfo_ = pBlitImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pBlitImageInfo_);
  
      pBlitImageInfo__buffer && pBlitImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdResolveImage2 = null;
export function vkCmdResolveImage2(commandBuffer_, pResolveImageInfo_){
  let fn = __symbol_fn_vkCmdResolveImage2;
  if (fn === null){
    __symbol_fn_vkCmdResolveImage2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResolveImage2: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdResolveImage2;
    fn = __symbol_fn_vkCmdResolveImage2;
  }
  
        let pResolveImageInfo__buffer = null
        if (pResolveImageInfo_ !== null && typeof pResolveImageInfo_ === 'object'){
          pResolveImageInfo__buffer = VkResolveImageInfo2_to_C(pResolveImageInfo_ );
          pResolveImageInfo_ = pResolveImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pResolveImageInfo_);
  
      pResolveImageInfo__buffer && pResolveImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginRendering = null;
export function vkCmdBeginRendering(commandBuffer_, pRenderingInfo_){
  let fn = __symbol_fn_vkCmdBeginRendering;
  if (fn === null){
    __symbol_fn_vkCmdBeginRendering = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginRendering: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginRendering;
    fn = __symbol_fn_vkCmdBeginRendering;
  }
  
        let pRenderingInfo__buffer = null
        if (pRenderingInfo_ !== null && typeof pRenderingInfo_ === 'object'){
          pRenderingInfo__buffer = VkRenderingInfo_to_C(pRenderingInfo_ );
          pRenderingInfo_ = pRenderingInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRenderingInfo_);
  
      pRenderingInfo__buffer && pRenderingInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndRendering = null;
export function vkCmdEndRendering(commandBuffer_){
  let fn = __symbol_fn_vkCmdEndRendering;
  if (fn === null){
    __symbol_fn_vkCmdEndRendering = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndRendering: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndRendering;
    fn = __symbol_fn_vkCmdEndRendering;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetCullMode = null;
export function vkCmdSetCullMode(commandBuffer_, cullMode_){
  let fn = __symbol_fn_vkCmdSetCullMode;
  if (fn === null){
    __symbol_fn_vkCmdSetCullMode = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetCullMode: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetCullMode;
    fn = __symbol_fn_vkCmdSetCullMode;
  }
  
  const ___ret =  fn(commandBuffer_, cullMode_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetFrontFace = null;
export function vkCmdSetFrontFace(commandBuffer_, frontFace_){
  let fn = __symbol_fn_vkCmdSetFrontFace;
  if (fn === null){
    __symbol_fn_vkCmdSetFrontFace = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetFrontFace: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetFrontFace;
    fn = __symbol_fn_vkCmdSetFrontFace;
  }
  
  const ___ret =  fn(commandBuffer_, frontFace_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPrimitiveTopology = null;
export function vkCmdSetPrimitiveTopology(commandBuffer_, primitiveTopology_){
  let fn = __symbol_fn_vkCmdSetPrimitiveTopology;
  if (fn === null){
    __symbol_fn_vkCmdSetPrimitiveTopology = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPrimitiveTopology: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetPrimitiveTopology;
    fn = __symbol_fn_vkCmdSetPrimitiveTopology;
  }
  
  const ___ret =  fn(commandBuffer_, primitiveTopology_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetViewportWithCount = null;
export function vkCmdSetViewportWithCount(commandBuffer_, viewportCount_, pViewports_){
  let fn = __symbol_fn_vkCmdSetViewportWithCount;
  if (fn === null){
    __symbol_fn_vkCmdSetViewportWithCount = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetViewportWithCount: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetViewportWithCount;
    fn = __symbol_fn_vkCmdSetViewportWithCount;
  }
  
        let pViewports__buffer = null
        if (pViewports_ !== null && typeof pViewports_ === 'object'){
          pViewports__buffer = VkViewport_to_C(pViewports_ );
          pViewports_ = pViewports__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, viewportCount_, pViewports_);
  
      pViewports__buffer && pViewports__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetScissorWithCount = null;
export function vkCmdSetScissorWithCount(commandBuffer_, scissorCount_, pScissors_){
  let fn = __symbol_fn_vkCmdSetScissorWithCount;
  if (fn === null){
    __symbol_fn_vkCmdSetScissorWithCount = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetScissorWithCount: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetScissorWithCount;
    fn = __symbol_fn_vkCmdSetScissorWithCount;
  }
  
        let pScissors__buffer = null
        if (pScissors_ !== null && typeof pScissors_ === 'object'){
          pScissors__buffer = VkRect2D_to_C(pScissors_ );
          pScissors_ = pScissors__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, scissorCount_, pScissors_);
  
      pScissors__buffer && pScissors__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBindVertexBuffers2 = null;
export function vkCmdBindVertexBuffers2(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_, pStrides_){
  let fn = __symbol_fn_vkCmdBindVertexBuffers2;
  if (fn === null){
    __symbol_fn_vkCmdBindVertexBuffers2 = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindVertexBuffers2: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindVertexBuffers2;
    fn = __symbol_fn_vkCmdBindVertexBuffers2;
  }
  
  const ___ret =  fn(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_, pStrides_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthTestEnable = null;
export function vkCmdSetDepthTestEnable(commandBuffer_, depthTestEnable_){
  let fn = __symbol_fn_vkCmdSetDepthTestEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthTestEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthTestEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthTestEnable;
    fn = __symbol_fn_vkCmdSetDepthTestEnable;
  }
  
  const ___ret =  fn(commandBuffer_, depthTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthWriteEnable = null;
export function vkCmdSetDepthWriteEnable(commandBuffer_, depthWriteEnable_){
  let fn = __symbol_fn_vkCmdSetDepthWriteEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthWriteEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthWriteEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthWriteEnable;
    fn = __symbol_fn_vkCmdSetDepthWriteEnable;
  }
  
  const ___ret =  fn(commandBuffer_, depthWriteEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthCompareOp = null;
export function vkCmdSetDepthCompareOp(commandBuffer_, depthCompareOp_){
  let fn = __symbol_fn_vkCmdSetDepthCompareOp;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthCompareOp = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthCompareOp: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthCompareOp;
    fn = __symbol_fn_vkCmdSetDepthCompareOp;
  }
  
  const ___ret =  fn(commandBuffer_, depthCompareOp_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBoundsTestEnable = null;
export function vkCmdSetDepthBoundsTestEnable(commandBuffer_, depthBoundsTestEnable_){
  let fn = __symbol_fn_vkCmdSetDepthBoundsTestEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBoundsTestEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBoundsTestEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBoundsTestEnable;
    fn = __symbol_fn_vkCmdSetDepthBoundsTestEnable;
  }
  
  const ___ret =  fn(commandBuffer_, depthBoundsTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilTestEnable = null;
export function vkCmdSetStencilTestEnable(commandBuffer_, stencilTestEnable_){
  let fn = __symbol_fn_vkCmdSetStencilTestEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilTestEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilTestEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilTestEnable;
    fn = __symbol_fn_vkCmdSetStencilTestEnable;
  }
  
  const ___ret =  fn(commandBuffer_, stencilTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilOp = null;
export function vkCmdSetStencilOp(commandBuffer_, faceMask_, failOp_, passOp_, depthFailOp_, compareOp_){
  let fn = __symbol_fn_vkCmdSetStencilOp;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilOp = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilOp: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilOp;
    fn = __symbol_fn_vkCmdSetStencilOp;
  }
  
  const ___ret =  fn(commandBuffer_, faceMask_, failOp_, passOp_, depthFailOp_, compareOp_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetRasterizerDiscardEnable = null;
export function vkCmdSetRasterizerDiscardEnable(commandBuffer_, rasterizerDiscardEnable_){
  let fn = __symbol_fn_vkCmdSetRasterizerDiscardEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetRasterizerDiscardEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetRasterizerDiscardEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetRasterizerDiscardEnable;
    fn = __symbol_fn_vkCmdSetRasterizerDiscardEnable;
  }
  
  const ___ret =  fn(commandBuffer_, rasterizerDiscardEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBiasEnable = null;
export function vkCmdSetDepthBiasEnable(commandBuffer_, depthBiasEnable_){
  let fn = __symbol_fn_vkCmdSetDepthBiasEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBiasEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBiasEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBiasEnable;
    fn = __symbol_fn_vkCmdSetDepthBiasEnable;
  }
  
  const ___ret =  fn(commandBuffer_, depthBiasEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPrimitiveRestartEnable = null;
export function vkCmdSetPrimitiveRestartEnable(commandBuffer_, primitiveRestartEnable_){
  let fn = __symbol_fn_vkCmdSetPrimitiveRestartEnable;
  if (fn === null){
    __symbol_fn_vkCmdSetPrimitiveRestartEnable = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPrimitiveRestartEnable: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetPrimitiveRestartEnable;
    fn = __symbol_fn_vkCmdSetPrimitiveRestartEnable;
  }
  
  const ___ret =  fn(commandBuffer_, primitiveRestartEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceBufferMemoryRequirements = null;
export function vkGetDeviceBufferMemoryRequirements(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceBufferMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetDeviceBufferMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceBufferMemoryRequirements: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceBufferMemoryRequirements;
    fn = __symbol_fn_vkGetDeviceBufferMemoryRequirements;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceBufferMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceImageMemoryRequirements = null;
export function vkGetDeviceImageMemoryRequirements(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceImageMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetDeviceImageMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceImageMemoryRequirements: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceImageMemoryRequirements;
    fn = __symbol_fn_vkGetDeviceImageMemoryRequirements;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceImageMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceImageSparseMemoryRequirements = null;
export function vkGetDeviceImageSparseMemoryRequirements(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceImageSparseMemoryRequirements;
  if (fn === null){
    __symbol_fn_vkGetDeviceImageSparseMemoryRequirements = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceImageSparseMemoryRequirements: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceImageSparseMemoryRequirements;
    fn = __symbol_fn_vkGetDeviceImageSparseMemoryRequirements;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceImageMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pSparseMemoryRequirements__buffer = null
        if (pSparseMemoryRequirements_ !== null && typeof pSparseMemoryRequirements_ === 'object'){
          pSparseMemoryRequirements__buffer = VkSparseImageMemoryRequirements2_to_C(pSparseMemoryRequirements_ );
          pSparseMemoryRequirements_ = pSparseMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pSparseMemoryRequirements__buffer && pSparseMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySurfaceKHR = null;
export function vkDestroySurfaceKHR(instance_, surface_, pAllocator_){
  let fn = __symbol_fn_vkDestroySurfaceKHR;
  if (fn === null){
    __symbol_fn_vkDestroySurfaceKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySurfaceKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySurfaceKHR;
    fn = __symbol_fn_vkDestroySurfaceKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, surface_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceSupportKHR = null;
export function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice_, queueFamilyIndex_, surface_, pSupported_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceSupportKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceSupportKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceSupportKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceSupportKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceSupportKHR;
  }
  
  const ___ret =  fn(physicalDevice_, queueFamilyIndex_, surface_, pSupported_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = null;
export function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice_, surface_, pSurfaceCapabilities_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceCapabilitiesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
  }
  
        let pSurfaceCapabilities__buffer = null
        if (pSurfaceCapabilities_ !== null && typeof pSurfaceCapabilities_ === 'object'){
          pSurfaceCapabilities__buffer = VkSurfaceCapabilitiesKHR_to_C(pSurfaceCapabilities_ );
          pSurfaceCapabilities_ = pSurfaceCapabilities__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, surface_, pSurfaceCapabilities_);
  
      pSurfaceCapabilities__buffer && pSurfaceCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceFormatsKHR = null;
export function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice_, surface_, pSurfaceFormatCount_, pSurfaceFormats_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceFormatsKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceFormatsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceFormatsKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceFormatsKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceFormatsKHR;
  }
  
        let pSurfaceFormats__buffer = null
        if (pSurfaceFormats_ !== null && typeof pSurfaceFormats_ === 'object'){
          pSurfaceFormats__buffer = VkSurfaceFormatKHR_to_C(pSurfaceFormats_ );
          pSurfaceFormats_ = pSurfaceFormats__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, surface_, pSurfaceFormatCount_, pSurfaceFormats_);
  
      pSurfaceFormats__buffer && pSurfaceFormats__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfacePresentModesKHR = null;
export function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice_, surface_, pPresentModeCount_, pPresentModes_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfacePresentModesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfacePresentModesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfacePresentModesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfacePresentModesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfacePresentModesKHR;
  }
  
  const ___ret =  fn(physicalDevice_, surface_, pPresentModeCount_, pPresentModes_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateSwapchainKHR = null;
export function vkCreateSwapchainKHR(device_, pCreateInfo_, pAllocator_, pSwapchain_){
  let fn = __symbol_fn_vkCreateSwapchainKHR;
  if (fn === null){
    __symbol_fn_vkCreateSwapchainKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSwapchainKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSwapchainKHR;
    fn = __symbol_fn_vkCreateSwapchainKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkSwapchainCreateInfoKHR_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pSwapchain_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySwapchainKHR = null;
export function vkDestroySwapchainKHR(device_, swapchain_, pAllocator_){
  let fn = __symbol_fn_vkDestroySwapchainKHR;
  if (fn === null){
    __symbol_fn_vkDestroySwapchainKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySwapchainKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySwapchainKHR;
    fn = __symbol_fn_vkDestroySwapchainKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, swapchain_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetSwapchainImagesKHR = null;
export function vkGetSwapchainImagesKHR(device_, swapchain_, pSwapchainImageCount_, pSwapchainImages_){
  let fn = __symbol_fn_vkGetSwapchainImagesKHR;
  if (fn === null){
    __symbol_fn_vkGetSwapchainImagesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSwapchainImagesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetSwapchainImagesKHR;
    fn = __symbol_fn_vkGetSwapchainImagesKHR;
  }
  
  const ___ret =  fn(device_, swapchain_, pSwapchainImageCount_, pSwapchainImages_);
  
  return ___ret;
}
  
let __symbol_fn_vkAcquireNextImageKHR = null;
export function vkAcquireNextImageKHR(device_, swapchain_, timeout_, semaphore_, fence_, pImageIndex_){
  let fn = __symbol_fn_vkAcquireNextImageKHR;
  if (fn === null){
    __symbol_fn_vkAcquireNextImageKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquireNextImageKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAcquireNextImageKHR;
    fn = __symbol_fn_vkAcquireNextImageKHR;
  }
  
  const ___ret =  fn(device_, swapchain_, timeout_, semaphore_, fence_, pImageIndex_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueuePresentKHR = null;
export function vkQueuePresentKHR(queue_, pPresentInfo_){
  let fn = __symbol_fn_vkQueuePresentKHR;
  if (fn === null){
    __symbol_fn_vkQueuePresentKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueuePresentKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkQueuePresentKHR;
    fn = __symbol_fn_vkQueuePresentKHR;
  }
  
        let pPresentInfo__buffer = null
        if (pPresentInfo_ !== null && typeof pPresentInfo_ === 'object'){
          pPresentInfo__buffer = VkPresentInfoKHR_to_C(pPresentInfo_ );
          pPresentInfo_ = pPresentInfo__buffer.ptr;
}
  const ___ret =  fn(queue_, pPresentInfo_);
  
      pPresentInfo__buffer && pPresentInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceGroupPresentCapabilitiesKHR = null;
export function vkGetDeviceGroupPresentCapabilitiesKHR(device_, pDeviceGroupPresentCapabilities_){
  let fn = __symbol_fn_vkGetDeviceGroupPresentCapabilitiesKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceGroupPresentCapabilitiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceGroupPresentCapabilitiesKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDeviceGroupPresentCapabilitiesKHR;
    fn = __symbol_fn_vkGetDeviceGroupPresentCapabilitiesKHR;
  }
  
        let pDeviceGroupPresentCapabilities__buffer = null
        if (pDeviceGroupPresentCapabilities_ !== null && typeof pDeviceGroupPresentCapabilities_ === 'object'){
          pDeviceGroupPresentCapabilities__buffer = VkDeviceGroupPresentCapabilitiesKHR_to_C(pDeviceGroupPresentCapabilities_ );
          pDeviceGroupPresentCapabilities_ = pDeviceGroupPresentCapabilities__buffer.ptr;
}
  const ___ret =  fn(device_, pDeviceGroupPresentCapabilities_);
  
      pDeviceGroupPresentCapabilities__buffer && pDeviceGroupPresentCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceGroupSurfacePresentModesKHR = null;
export function vkGetDeviceGroupSurfacePresentModesKHR(device_, surface_, pModes_){
  let fn = __symbol_fn_vkGetDeviceGroupSurfacePresentModesKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceGroupSurfacePresentModesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceGroupSurfacePresentModesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDeviceGroupSurfacePresentModesKHR;
    fn = __symbol_fn_vkGetDeviceGroupSurfacePresentModesKHR;
  }
  
  const ___ret =  fn(device_, surface_, pModes_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDevicePresentRectanglesKHR = null;
export function vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice_, surface_, pRectCount_, pRects_){
  let fn = __symbol_fn_vkGetPhysicalDevicePresentRectanglesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDevicePresentRectanglesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDevicePresentRectanglesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDevicePresentRectanglesKHR;
    fn = __symbol_fn_vkGetPhysicalDevicePresentRectanglesKHR;
  }
  
        let pRects__buffer = null
        if (pRects_ !== null && typeof pRects_ === 'object'){
          pRects__buffer = VkRect2D_to_C(pRects_ );
          pRects_ = pRects__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, surface_, pRectCount_, pRects_);
  
      pRects__buffer && pRects__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkAcquireNextImage2KHR = null;
export function vkAcquireNextImage2KHR(device_, pAcquireInfo_, pImageIndex_){
  let fn = __symbol_fn_vkAcquireNextImage2KHR;
  if (fn === null){
    __symbol_fn_vkAcquireNextImage2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquireNextImage2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAcquireNextImage2KHR;
    fn = __symbol_fn_vkAcquireNextImage2KHR;
  }
  
        let pAcquireInfo__buffer = null
        if (pAcquireInfo_ !== null && typeof pAcquireInfo_ === 'object'){
          pAcquireInfo__buffer = VkAcquireNextImageInfoKHR_to_C(pAcquireInfo_ );
          pAcquireInfo_ = pAcquireInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pAcquireInfo_, pImageIndex_);
  
      pAcquireInfo__buffer && pAcquireInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceDisplayPropertiesKHR = null;
export function vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceDisplayPropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceDisplayPropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceDisplayPropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceDisplayPropertiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceDisplayPropertiesKHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayPropertiesKHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null;
export function vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceDisplayPlanePropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayPlanePropertiesKHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDisplayPlaneSupportedDisplaysKHR = null;
export function vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice_, planeIndex_, pDisplayCount_, pDisplays_){
  let fn = __symbol_fn_vkGetDisplayPlaneSupportedDisplaysKHR;
  if (fn === null){
    __symbol_fn_vkGetDisplayPlaneSupportedDisplaysKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDisplayPlaneSupportedDisplaysKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDisplayPlaneSupportedDisplaysKHR;
    fn = __symbol_fn_vkGetDisplayPlaneSupportedDisplaysKHR;
  }
  
  const ___ret =  fn(physicalDevice_, planeIndex_, pDisplayCount_, pDisplays_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDisplayModePropertiesKHR = null;
export function vkGetDisplayModePropertiesKHR(physicalDevice_, display_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetDisplayModePropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetDisplayModePropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDisplayModePropertiesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDisplayModePropertiesKHR;
    fn = __symbol_fn_vkGetDisplayModePropertiesKHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayModePropertiesKHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, display_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDisplayModeKHR = null;
export function vkCreateDisplayModeKHR(physicalDevice_, display_, pCreateInfo_, pAllocator_, pMode_){
  let fn = __symbol_fn_vkCreateDisplayModeKHR;
  if (fn === null){
    __symbol_fn_vkCreateDisplayModeKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDisplayModeKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDisplayModeKHR;
    fn = __symbol_fn_vkCreateDisplayModeKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDisplayModeCreateInfoKHR_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, display_, pCreateInfo_, pAllocator_, pMode_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDisplayPlaneCapabilitiesKHR = null;
export function vkGetDisplayPlaneCapabilitiesKHR(physicalDevice_, mode_, planeIndex_, pCapabilities_){
  let fn = __symbol_fn_vkGetDisplayPlaneCapabilitiesKHR;
  if (fn === null){
    __symbol_fn_vkGetDisplayPlaneCapabilitiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDisplayPlaneCapabilitiesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDisplayPlaneCapabilitiesKHR;
    fn = __symbol_fn_vkGetDisplayPlaneCapabilitiesKHR;
  }
  
        let pCapabilities__buffer = null
        if (pCapabilities_ !== null && typeof pCapabilities_ === 'object'){
          pCapabilities__buffer = VkDisplayPlaneCapabilitiesKHR_to_C(pCapabilities_ );
          pCapabilities_ = pCapabilities__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, mode_, planeIndex_, pCapabilities_);
  
      pCapabilities__buffer && pCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDisplayPlaneSurfaceKHR = null;
export function vkCreateDisplayPlaneSurfaceKHR(instance_, pCreateInfo_, pAllocator_, pSurface_){
  let fn = __symbol_fn_vkCreateDisplayPlaneSurfaceKHR;
  if (fn === null){
    __symbol_fn_vkCreateDisplayPlaneSurfaceKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDisplayPlaneSurfaceKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDisplayPlaneSurfaceKHR;
    fn = __symbol_fn_vkCreateDisplayPlaneSurfaceKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDisplaySurfaceCreateInfoKHR_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, pCreateInfo_, pAllocator_, pSurface_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateSharedSwapchainsKHR = null;
export function vkCreateSharedSwapchainsKHR(device_, swapchainCount_, pCreateInfos_, pAllocator_, pSwapchains_){
  let fn = __symbol_fn_vkCreateSharedSwapchainsKHR;
  if (fn === null){
    __symbol_fn_vkCreateSharedSwapchainsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSharedSwapchainsKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSharedSwapchainsKHR;
    fn = __symbol_fn_vkCreateSharedSwapchainsKHR;
  }
  
        let pCreateInfos__buffer = null
        if (pCreateInfos_ !== null && typeof pCreateInfos_ === 'object'){
          pCreateInfos__buffer = VkSwapchainCreateInfoKHR_to_C(pCreateInfos_ );
          pCreateInfos_ = pCreateInfos__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, swapchainCount_, pCreateInfos_, pAllocator_, pSwapchains_);
  
      pCreateInfos__buffer && pCreateInfos__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginRenderingKHR = null;
export function vkCmdBeginRenderingKHR(commandBuffer_, pRenderingInfo_){
  let fn = __symbol_fn_vkCmdBeginRenderingKHR;
  if (fn === null){
    __symbol_fn_vkCmdBeginRenderingKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginRenderingKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginRenderingKHR;
    fn = __symbol_fn_vkCmdBeginRenderingKHR;
  }
  
        let pRenderingInfo__buffer = null
        if (pRenderingInfo_ !== null && typeof pRenderingInfo_ === 'object'){
          pRenderingInfo__buffer = VkRenderingInfo_to_C(pRenderingInfo_ );
          pRenderingInfo_ = pRenderingInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRenderingInfo_);
  
      pRenderingInfo__buffer && pRenderingInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndRenderingKHR = null;
export function vkCmdEndRenderingKHR(commandBuffer_){
  let fn = __symbol_fn_vkCmdEndRenderingKHR;
  if (fn === null){
    __symbol_fn_vkCmdEndRenderingKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndRenderingKHR: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndRenderingKHR;
    fn = __symbol_fn_vkCmdEndRenderingKHR;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFeatures2KHR = null;
export function vkGetPhysicalDeviceFeatures2KHR(physicalDevice_, pFeatures_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFeatures2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFeatures2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFeatures2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFeatures2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceFeatures2KHR;
  }
  
        let pFeatures__buffer = null
        if (pFeatures_ !== null && typeof pFeatures_ === 'object'){
          pFeatures__buffer = VkPhysicalDeviceFeatures2_to_C(pFeatures_ );
          pFeatures_ = pFeatures__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFeatures_);
  
      pFeatures__buffer && pFeatures__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceProperties2KHR = null;
export function vkGetPhysicalDeviceProperties2KHR(physicalDevice_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceProperties2KHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkPhysicalDeviceProperties2_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFormatProperties2KHR = null;
export function vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice_, format_, pFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFormatProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFormatProperties2KHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceFormatProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceFormatProperties2KHR;
  }
  
        let pFormatProperties__buffer = null
        if (pFormatProperties_ !== null && typeof pFormatProperties_ === 'object'){
          pFormatProperties__buffer = VkFormatProperties2_to_C(pFormatProperties_ );
          pFormatProperties_ = pFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, pFormatProperties_);
  
      pFormatProperties__buffer && pFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2KHR = null;
export function vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice_, pImageFormatInfo_, pImageFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceImageFormatProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceImageFormatProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceImageFormatProperties2KHR;
  }
  
        let pImageFormatInfo__buffer = null
        if (pImageFormatInfo_ !== null && typeof pImageFormatInfo_ === 'object'){
          pImageFormatInfo__buffer = VkPhysicalDeviceImageFormatInfo2_to_C(pImageFormatInfo_ );
          pImageFormatInfo_ = pImageFormatInfo__buffer.ptr;
}
        let pImageFormatProperties__buffer = null
        if (pImageFormatProperties_ !== null && typeof pImageFormatProperties_ === 'object'){
          pImageFormatProperties__buffer = VkImageFormatProperties2_to_C(pImageFormatProperties_ );
          pImageFormatProperties_ = pImageFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pImageFormatInfo_, pImageFormatProperties_);
  
      pImageFormatInfo__buffer && pImageFormatInfo__buffer.free()
      
      pImageFormatProperties__buffer && pImageFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = null;
export function vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceQueueFamilyProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceQueueFamilyProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
  }
  
        let pQueueFamilyProperties__buffer = null
        if (pQueueFamilyProperties_ !== null && typeof pQueueFamilyProperties_ === 'object'){
          pQueueFamilyProperties__buffer = VkQueueFamilyProperties2_to_C(pQueueFamilyProperties_ );
          pQueueFamilyProperties_ = pQueueFamilyProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pQueueFamilyPropertyCount_, pQueueFamilyProperties_);
  
      pQueueFamilyProperties__buffer && pQueueFamilyProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceMemoryProperties2KHR = null;
export function vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice_, pMemoryProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceMemoryProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceMemoryProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceMemoryProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceMemoryProperties2KHR;
  }
  
        let pMemoryProperties__buffer = null
        if (pMemoryProperties_ !== null && typeof pMemoryProperties_ === 'object'){
          pMemoryProperties__buffer = VkPhysicalDeviceMemoryProperties2_to_C(pMemoryProperties_ );
          pMemoryProperties_ = pMemoryProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pMemoryProperties_);
  
      pMemoryProperties__buffer && pMemoryProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null;
export function vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice_, pFormatInfo_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSparseImageFormatProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
  }
  
        let pFormatInfo__buffer = null
        if (pFormatInfo_ !== null && typeof pFormatInfo_ === 'object'){
          pFormatInfo__buffer = VkPhysicalDeviceSparseImageFormatInfo2_to_C(pFormatInfo_ );
          pFormatInfo_ = pFormatInfo__buffer.ptr;
}
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkSparseImageFormatProperties2_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFormatInfo_, pPropertyCount_, pProperties_);
  
      pFormatInfo__buffer && pFormatInfo__buffer.free()
      
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceGroupPeerMemoryFeaturesKHR = null;
export function vkGetDeviceGroupPeerMemoryFeaturesKHR(device_, heapIndex_, localDeviceIndex_, remoteDeviceIndex_, pPeerMemoryFeatures_){
  let fn = __symbol_fn_vkGetDeviceGroupPeerMemoryFeaturesKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceGroupPeerMemoryFeaturesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceGroupPeerMemoryFeaturesKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceGroupPeerMemoryFeaturesKHR;
    fn = __symbol_fn_vkGetDeviceGroupPeerMemoryFeaturesKHR;
  }
  
  const ___ret =  fn(device_, heapIndex_, localDeviceIndex_, remoteDeviceIndex_, pPeerMemoryFeatures_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDeviceMaskKHR = null;
export function vkCmdSetDeviceMaskKHR(commandBuffer_, deviceMask_){
  let fn = __symbol_fn_vkCmdSetDeviceMaskKHR;
  if (fn === null){
    __symbol_fn_vkCmdSetDeviceMaskKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDeviceMaskKHR: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDeviceMaskKHR;
    fn = __symbol_fn_vkCmdSetDeviceMaskKHR;
  }
  
  const ___ret =  fn(commandBuffer_, deviceMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDispatchBaseKHR = null;
export function vkCmdDispatchBaseKHR(commandBuffer_, baseGroupX_, baseGroupY_, baseGroupZ_, groupCountX_, groupCountY_, groupCountZ_){
  let fn = __symbol_fn_vkCmdDispatchBaseKHR;
  if (fn === null){
    __symbol_fn_vkCmdDispatchBaseKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDispatchBaseKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDispatchBaseKHR;
    fn = __symbol_fn_vkCmdDispatchBaseKHR;
  }
  
  const ___ret =  fn(commandBuffer_, baseGroupX_, baseGroupY_, baseGroupZ_, groupCountX_, groupCountY_, groupCountZ_);
  
  return ___ret;
}
  
let __symbol_fn_vkTrimCommandPoolKHR = null;
export function vkTrimCommandPoolKHR(device_, commandPool_, flags_){
  let fn = __symbol_fn_vkTrimCommandPoolKHR;
  if (fn === null){
    __symbol_fn_vkTrimCommandPoolKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkTrimCommandPoolKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkTrimCommandPoolKHR;
    fn = __symbol_fn_vkTrimCommandPoolKHR;
  }
  
  const ___ret =  fn(device_, commandPool_, flags_);
  
  return ___ret;
}
  
let __symbol_fn_vkEnumeratePhysicalDeviceGroupsKHR = null;
export function vkEnumeratePhysicalDeviceGroupsKHR(instance_, pPhysicalDeviceGroupCount_, pPhysicalDeviceGroupProperties_){
  let fn = __symbol_fn_vkEnumeratePhysicalDeviceGroupsKHR;
  if (fn === null){
    __symbol_fn_vkEnumeratePhysicalDeviceGroupsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumeratePhysicalDeviceGroupsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumeratePhysicalDeviceGroupsKHR;
    fn = __symbol_fn_vkEnumeratePhysicalDeviceGroupsKHR;
  }
  
        let pPhysicalDeviceGroupProperties__buffer = null
        if (pPhysicalDeviceGroupProperties_ !== null && typeof pPhysicalDeviceGroupProperties_ === 'object'){
          pPhysicalDeviceGroupProperties__buffer = VkPhysicalDeviceGroupProperties_to_C(pPhysicalDeviceGroupProperties_ );
          pPhysicalDeviceGroupProperties_ = pPhysicalDeviceGroupProperties__buffer.ptr;
}
  const ___ret =  fn(instance_, pPhysicalDeviceGroupCount_, pPhysicalDeviceGroupProperties_);
  
      pPhysicalDeviceGroupProperties__buffer && pPhysicalDeviceGroupProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = null;
export function vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice_, pExternalBufferInfo_, pExternalBufferProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalBufferPropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalBufferPropertiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
  }
  
        let pExternalBufferInfo__buffer = null
        if (pExternalBufferInfo_ !== null && typeof pExternalBufferInfo_ === 'object'){
          pExternalBufferInfo__buffer = VkPhysicalDeviceExternalBufferInfo_to_C(pExternalBufferInfo_ );
          pExternalBufferInfo_ = pExternalBufferInfo__buffer.ptr;
}
        let pExternalBufferProperties__buffer = null
        if (pExternalBufferProperties_ !== null && typeof pExternalBufferProperties_ === 'object'){
          pExternalBufferProperties__buffer = VkExternalBufferProperties_to_C(pExternalBufferProperties_ );
          pExternalBufferProperties_ = pExternalBufferProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalBufferInfo_, pExternalBufferProperties_);
  
      pExternalBufferInfo__buffer && pExternalBufferInfo__buffer.free()
      
      pExternalBufferProperties__buffer && pExternalBufferProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetMemoryFdKHR = null;
export function vkGetMemoryFdKHR(device_, pGetFdInfo_, pFd_){
  let fn = __symbol_fn_vkGetMemoryFdKHR;
  if (fn === null){
    __symbol_fn_vkGetMemoryFdKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetMemoryFdKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetMemoryFdKHR;
    fn = __symbol_fn_vkGetMemoryFdKHR;
  }
  
        let pGetFdInfo__buffer = null
        if (pGetFdInfo_ !== null && typeof pGetFdInfo_ === 'object'){
          pGetFdInfo__buffer = VkMemoryGetFdInfoKHR_to_C(pGetFdInfo_ );
          pGetFdInfo_ = pGetFdInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pGetFdInfo_, pFd_);
  
      pGetFdInfo__buffer && pGetFdInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetMemoryFdPropertiesKHR = null;
export function vkGetMemoryFdPropertiesKHR(device_, handleType_, fd_, pMemoryFdProperties_){
  let fn = __symbol_fn_vkGetMemoryFdPropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetMemoryFdPropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetMemoryFdPropertiesKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.i32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetMemoryFdPropertiesKHR;
    fn = __symbol_fn_vkGetMemoryFdPropertiesKHR;
  }
  
        let pMemoryFdProperties__buffer = null
        if (pMemoryFdProperties_ !== null && typeof pMemoryFdProperties_ === 'object'){
          pMemoryFdProperties__buffer = VkMemoryFdPropertiesKHR_to_C(pMemoryFdProperties_ );
          pMemoryFdProperties_ = pMemoryFdProperties__buffer.ptr;
}
  const ___ret =  fn(device_, handleType_, fd_, pMemoryFdProperties_);
  
      pMemoryFdProperties__buffer && pMemoryFdProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null;
export function vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice_, pExternalSemaphoreInfo_, pExternalSemaphoreProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalSemaphorePropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
  }
  
        let pExternalSemaphoreInfo__buffer = null
        if (pExternalSemaphoreInfo_ !== null && typeof pExternalSemaphoreInfo_ === 'object'){
          pExternalSemaphoreInfo__buffer = VkPhysicalDeviceExternalSemaphoreInfo_to_C(pExternalSemaphoreInfo_ );
          pExternalSemaphoreInfo_ = pExternalSemaphoreInfo__buffer.ptr;
}
        let pExternalSemaphoreProperties__buffer = null
        if (pExternalSemaphoreProperties_ !== null && typeof pExternalSemaphoreProperties_ === 'object'){
          pExternalSemaphoreProperties__buffer = VkExternalSemaphoreProperties_to_C(pExternalSemaphoreProperties_ );
          pExternalSemaphoreProperties_ = pExternalSemaphoreProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalSemaphoreInfo_, pExternalSemaphoreProperties_);
  
      pExternalSemaphoreInfo__buffer && pExternalSemaphoreInfo__buffer.free()
      
      pExternalSemaphoreProperties__buffer && pExternalSemaphoreProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkImportSemaphoreFdKHR = null;
export function vkImportSemaphoreFdKHR(device_, pImportSemaphoreFdInfo_){
  let fn = __symbol_fn_vkImportSemaphoreFdKHR;
  if (fn === null){
    __symbol_fn_vkImportSemaphoreFdKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkImportSemaphoreFdKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkImportSemaphoreFdKHR;
    fn = __symbol_fn_vkImportSemaphoreFdKHR;
  }
  
        let pImportSemaphoreFdInfo__buffer = null
        if (pImportSemaphoreFdInfo_ !== null && typeof pImportSemaphoreFdInfo_ === 'object'){
          pImportSemaphoreFdInfo__buffer = VkImportSemaphoreFdInfoKHR_to_C(pImportSemaphoreFdInfo_ );
          pImportSemaphoreFdInfo_ = pImportSemaphoreFdInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pImportSemaphoreFdInfo_);
  
      pImportSemaphoreFdInfo__buffer && pImportSemaphoreFdInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetSemaphoreFdKHR = null;
export function vkGetSemaphoreFdKHR(device_, pGetFdInfo_, pFd_){
  let fn = __symbol_fn_vkGetSemaphoreFdKHR;
  if (fn === null){
    __symbol_fn_vkGetSemaphoreFdKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSemaphoreFdKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetSemaphoreFdKHR;
    fn = __symbol_fn_vkGetSemaphoreFdKHR;
  }
  
        let pGetFdInfo__buffer = null
        if (pGetFdInfo_ !== null && typeof pGetFdInfo_ === 'object'){
          pGetFdInfo__buffer = VkSemaphoreGetFdInfoKHR_to_C(pGetFdInfo_ );
          pGetFdInfo_ = pGetFdInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pGetFdInfo_, pFd_);
  
      pGetFdInfo__buffer && pGetFdInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPushDescriptorSetKHR = null;
export function vkCmdPushDescriptorSetKHR(commandBuffer_, pipelineBindPoint_, layout_, set_, descriptorWriteCount_, pDescriptorWrites_){
  let fn = __symbol_fn_vkCmdPushDescriptorSetKHR;
  if (fn === null){
    __symbol_fn_vkCmdPushDescriptorSetKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPushDescriptorSetKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPushDescriptorSetKHR;
    fn = __symbol_fn_vkCmdPushDescriptorSetKHR;
  }
  
        let pDescriptorWrites__buffer = null
        if (pDescriptorWrites_ !== null && typeof pDescriptorWrites_ === 'object'){
          pDescriptorWrites__buffer = VkWriteDescriptorSet_to_C(pDescriptorWrites_ );
          pDescriptorWrites_ = pDescriptorWrites__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pipelineBindPoint_, layout_, set_, descriptorWriteCount_, pDescriptorWrites_);
  
      pDescriptorWrites__buffer && pDescriptorWrites__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPushDescriptorSetWithTemplateKHR = null;
export function vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer_, descriptorUpdateTemplate_, layout_, set_, pData_){
  let fn = __symbol_fn_vkCmdPushDescriptorSetWithTemplateKHR;
  if (fn === null){
    __symbol_fn_vkCmdPushDescriptorSetWithTemplateKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPushDescriptorSetWithTemplateKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPushDescriptorSetWithTemplateKHR;
    fn = __symbol_fn_vkCmdPushDescriptorSetWithTemplateKHR;
  }
  
  const ___ret =  fn(commandBuffer_, descriptorUpdateTemplate_, layout_, set_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateDescriptorUpdateTemplateKHR = null;
export function vkCreateDescriptorUpdateTemplateKHR(device_, pCreateInfo_, pAllocator_, pDescriptorUpdateTemplate_){
  let fn = __symbol_fn_vkCreateDescriptorUpdateTemplateKHR;
  if (fn === null){
    __symbol_fn_vkCreateDescriptorUpdateTemplateKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDescriptorUpdateTemplateKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDescriptorUpdateTemplateKHR;
    fn = __symbol_fn_vkCreateDescriptorUpdateTemplateKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorUpdateTemplateCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pDescriptorUpdateTemplate_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDescriptorUpdateTemplateKHR = null;
export function vkDestroyDescriptorUpdateTemplateKHR(device_, descriptorUpdateTemplate_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDescriptorUpdateTemplateKHR;
  if (fn === null){
    __symbol_fn_vkDestroyDescriptorUpdateTemplateKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDescriptorUpdateTemplateKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDescriptorUpdateTemplateKHR;
    fn = __symbol_fn_vkDestroyDescriptorUpdateTemplateKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, descriptorUpdateTemplate_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkUpdateDescriptorSetWithTemplateKHR = null;
export function vkUpdateDescriptorSetWithTemplateKHR(device_, descriptorSet_, descriptorUpdateTemplate_, pData_){
  let fn = __symbol_fn_vkUpdateDescriptorSetWithTemplateKHR;
  if (fn === null){
    __symbol_fn_vkUpdateDescriptorSetWithTemplateKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkUpdateDescriptorSetWithTemplateKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkUpdateDescriptorSetWithTemplateKHR;
    fn = __symbol_fn_vkUpdateDescriptorSetWithTemplateKHR;
  }
  
  const ___ret =  fn(device_, descriptorSet_, descriptorUpdateTemplate_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateRenderPass2KHR = null;
export function vkCreateRenderPass2KHR(device_, pCreateInfo_, pAllocator_, pRenderPass_){
  let fn = __symbol_fn_vkCreateRenderPass2KHR;
  if (fn === null){
    __symbol_fn_vkCreateRenderPass2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateRenderPass2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateRenderPass2KHR;
    fn = __symbol_fn_vkCreateRenderPass2KHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkRenderPassCreateInfo2_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pRenderPass_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginRenderPass2KHR = null;
export function vkCmdBeginRenderPass2KHR(commandBuffer_, pRenderPassBegin_, pSubpassBeginInfo_){
  let fn = __symbol_fn_vkCmdBeginRenderPass2KHR;
  if (fn === null){
    __symbol_fn_vkCmdBeginRenderPass2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginRenderPass2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginRenderPass2KHR;
    fn = __symbol_fn_vkCmdBeginRenderPass2KHR;
  }
  
        let pRenderPassBegin__buffer = null
        if (pRenderPassBegin_ !== null && typeof pRenderPassBegin_ === 'object'){
          pRenderPassBegin__buffer = VkRenderPassBeginInfo_to_C(pRenderPassBegin_ );
          pRenderPassBegin_ = pRenderPassBegin__buffer.ptr;
}
        let pSubpassBeginInfo__buffer = null
        if (pSubpassBeginInfo_ !== null && typeof pSubpassBeginInfo_ === 'object'){
          pSubpassBeginInfo__buffer = VkSubpassBeginInfo_to_C(pSubpassBeginInfo_ );
          pSubpassBeginInfo_ = pSubpassBeginInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRenderPassBegin_, pSubpassBeginInfo_);
  
      pRenderPassBegin__buffer && pRenderPassBegin__buffer.free()
      
      pSubpassBeginInfo__buffer && pSubpassBeginInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdNextSubpass2KHR = null;
export function vkCmdNextSubpass2KHR(commandBuffer_, pSubpassBeginInfo_, pSubpassEndInfo_){
  let fn = __symbol_fn_vkCmdNextSubpass2KHR;
  if (fn === null){
    __symbol_fn_vkCmdNextSubpass2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdNextSubpass2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdNextSubpass2KHR;
    fn = __symbol_fn_vkCmdNextSubpass2KHR;
  }
  
        let pSubpassBeginInfo__buffer = null
        if (pSubpassBeginInfo_ !== null && typeof pSubpassBeginInfo_ === 'object'){
          pSubpassBeginInfo__buffer = VkSubpassBeginInfo_to_C(pSubpassBeginInfo_ );
          pSubpassBeginInfo_ = pSubpassBeginInfo__buffer.ptr;
}
        let pSubpassEndInfo__buffer = null
        if (pSubpassEndInfo_ !== null && typeof pSubpassEndInfo_ === 'object'){
          pSubpassEndInfo__buffer = VkSubpassEndInfo_to_C(pSubpassEndInfo_ );
          pSubpassEndInfo_ = pSubpassEndInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pSubpassBeginInfo_, pSubpassEndInfo_);
  
      pSubpassBeginInfo__buffer && pSubpassBeginInfo__buffer.free()
      
      pSubpassEndInfo__buffer && pSubpassEndInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndRenderPass2KHR = null;
export function vkCmdEndRenderPass2KHR(commandBuffer_, pSubpassEndInfo_){
  let fn = __symbol_fn_vkCmdEndRenderPass2KHR;
  if (fn === null){
    __symbol_fn_vkCmdEndRenderPass2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndRenderPass2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndRenderPass2KHR;
    fn = __symbol_fn_vkCmdEndRenderPass2KHR;
  }
  
        let pSubpassEndInfo__buffer = null
        if (pSubpassEndInfo_ !== null && typeof pSubpassEndInfo_ === 'object'){
          pSubpassEndInfo__buffer = VkSubpassEndInfo_to_C(pSubpassEndInfo_ );
          pSubpassEndInfo_ = pSubpassEndInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pSubpassEndInfo_);
  
      pSubpassEndInfo__buffer && pSubpassEndInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetSwapchainStatusKHR = null;
export function vkGetSwapchainStatusKHR(device_, swapchain_){
  let fn = __symbol_fn_vkGetSwapchainStatusKHR;
  if (fn === null){
    __symbol_fn_vkGetSwapchainStatusKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSwapchainStatusKHR: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkGetSwapchainStatusKHR;
    fn = __symbol_fn_vkGetSwapchainStatusKHR;
  }
  
  const ___ret =  fn(device_, swapchain_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalFencePropertiesKHR = null;
export function vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice_, pExternalFenceInfo_, pExternalFenceProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalFencePropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalFencePropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalFencePropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceExternalFencePropertiesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalFencePropertiesKHR;
  }
  
        let pExternalFenceInfo__buffer = null
        if (pExternalFenceInfo_ !== null && typeof pExternalFenceInfo_ === 'object'){
          pExternalFenceInfo__buffer = VkPhysicalDeviceExternalFenceInfo_to_C(pExternalFenceInfo_ );
          pExternalFenceInfo_ = pExternalFenceInfo__buffer.ptr;
}
        let pExternalFenceProperties__buffer = null
        if (pExternalFenceProperties_ !== null && typeof pExternalFenceProperties_ === 'object'){
          pExternalFenceProperties__buffer = VkExternalFenceProperties_to_C(pExternalFenceProperties_ );
          pExternalFenceProperties_ = pExternalFenceProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pExternalFenceInfo_, pExternalFenceProperties_);
  
      pExternalFenceInfo__buffer && pExternalFenceInfo__buffer.free()
      
      pExternalFenceProperties__buffer && pExternalFenceProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkImportFenceFdKHR = null;
export function vkImportFenceFdKHR(device_, pImportFenceFdInfo_){
  let fn = __symbol_fn_vkImportFenceFdKHR;
  if (fn === null){
    __symbol_fn_vkImportFenceFdKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkImportFenceFdKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkImportFenceFdKHR;
    fn = __symbol_fn_vkImportFenceFdKHR;
  }
  
        let pImportFenceFdInfo__buffer = null
        if (pImportFenceFdInfo_ !== null && typeof pImportFenceFdInfo_ === 'object'){
          pImportFenceFdInfo__buffer = VkImportFenceFdInfoKHR_to_C(pImportFenceFdInfo_ );
          pImportFenceFdInfo_ = pImportFenceFdInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pImportFenceFdInfo_);
  
      pImportFenceFdInfo__buffer && pImportFenceFdInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetFenceFdKHR = null;
export function vkGetFenceFdKHR(device_, pGetFdInfo_, pFd_){
  let fn = __symbol_fn_vkGetFenceFdKHR;
  if (fn === null){
    __symbol_fn_vkGetFenceFdKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetFenceFdKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetFenceFdKHR;
    fn = __symbol_fn_vkGetFenceFdKHR;
  }
  
        let pGetFdInfo__buffer = null
        if (pGetFdInfo_ !== null && typeof pGetFdInfo_ === 'object'){
          pGetFdInfo__buffer = VkFenceGetFdInfoKHR_to_C(pGetFdInfo_ );
          pGetFdInfo_ = pGetFdInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pGetFdInfo_, pFd_);
  
      pGetFdInfo__buffer && pGetFdInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = null;
export function vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice_, queueFamilyIndex_, pCounterCount_, pCounters_, pCounterDescriptions_){
  let fn = __symbol_fn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
  if (fn === null){
    __symbol_fn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
    fn = __symbol_fn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
  }
  
        let pCounters__buffer = null
        if (pCounters_ !== null && typeof pCounters_ === 'object'){
          pCounters__buffer = VkPerformanceCounterKHR_to_C(pCounters_ );
          pCounters_ = pCounters__buffer.ptr;
}
        let pCounterDescriptions__buffer = null
        if (pCounterDescriptions_ !== null && typeof pCounterDescriptions_ === 'object'){
          pCounterDescriptions__buffer = VkPerformanceCounterDescriptionKHR_to_C(pCounterDescriptions_ );
          pCounterDescriptions_ = pCounterDescriptions__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, queueFamilyIndex_, pCounterCount_, pCounters_, pCounterDescriptions_);
  
      pCounters__buffer && pCounters__buffer.free()
      
      pCounterDescriptions__buffer && pCounterDescriptions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = null;
export function vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice_, pPerformanceQueryCreateInfo_, pNumPasses_){
  let fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
  }
  
        let pPerformanceQueryCreateInfo__buffer = null
        if (pPerformanceQueryCreateInfo_ !== null && typeof pPerformanceQueryCreateInfo_ === 'object'){
          pPerformanceQueryCreateInfo__buffer = VkQueryPoolPerformanceCreateInfoKHR_to_C(pPerformanceQueryCreateInfo_ );
          pPerformanceQueryCreateInfo_ = pPerformanceQueryCreateInfo__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPerformanceQueryCreateInfo_, pNumPasses_);
  
      pPerformanceQueryCreateInfo__buffer && pPerformanceQueryCreateInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkAcquireProfilingLockKHR = null;
export function vkAcquireProfilingLockKHR(device_, pInfo_){
  let fn = __symbol_fn_vkAcquireProfilingLockKHR;
  if (fn === null){
    __symbol_fn_vkAcquireProfilingLockKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquireProfilingLockKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAcquireProfilingLockKHR;
    fn = __symbol_fn_vkAcquireProfilingLockKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkAcquireProfilingLockInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkReleaseProfilingLockKHR = null;
export function vkReleaseProfilingLockKHR(device_){
  let fn = __symbol_fn_vkReleaseProfilingLockKHR;
  if (fn === null){
    __symbol_fn_vkReleaseProfilingLockKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkReleaseProfilingLockKHR: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkReleaseProfilingLockKHR;
    fn = __symbol_fn_vkReleaseProfilingLockKHR;
  }
  
  const ___ret =  fn(device_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = null;
export function vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice_, pSurfaceInfo_, pSurfaceCapabilities_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceCapabilities2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceCapabilities2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
  }
  
        let pSurfaceInfo__buffer = null
        if (pSurfaceInfo_ !== null && typeof pSurfaceInfo_ === 'object'){
          pSurfaceInfo__buffer = VkPhysicalDeviceSurfaceInfo2KHR_to_C(pSurfaceInfo_ );
          pSurfaceInfo_ = pSurfaceInfo__buffer.ptr;
}
        let pSurfaceCapabilities__buffer = null
        if (pSurfaceCapabilities_ !== null && typeof pSurfaceCapabilities_ === 'object'){
          pSurfaceCapabilities__buffer = VkSurfaceCapabilities2KHR_to_C(pSurfaceCapabilities_ );
          pSurfaceCapabilities_ = pSurfaceCapabilities__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pSurfaceInfo_, pSurfaceCapabilities_);
  
      pSurfaceInfo__buffer && pSurfaceInfo__buffer.free()
      
      pSurfaceCapabilities__buffer && pSurfaceCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceFormats2KHR = null;
export function vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice_, pSurfaceInfo_, pSurfaceFormatCount_, pSurfaceFormats_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceFormats2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceFormats2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceFormats2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceFormats2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceFormats2KHR;
  }
  
        let pSurfaceInfo__buffer = null
        if (pSurfaceInfo_ !== null && typeof pSurfaceInfo_ === 'object'){
          pSurfaceInfo__buffer = VkPhysicalDeviceSurfaceInfo2KHR_to_C(pSurfaceInfo_ );
          pSurfaceInfo_ = pSurfaceInfo__buffer.ptr;
}
        let pSurfaceFormats__buffer = null
        if (pSurfaceFormats_ !== null && typeof pSurfaceFormats_ === 'object'){
          pSurfaceFormats__buffer = VkSurfaceFormat2KHR_to_C(pSurfaceFormats_ );
          pSurfaceFormats_ = pSurfaceFormats__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pSurfaceInfo_, pSurfaceFormatCount_, pSurfaceFormats_);
  
      pSurfaceInfo__buffer && pSurfaceInfo__buffer.free()
      
      pSurfaceFormats__buffer && pSurfaceFormats__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceDisplayProperties2KHR = null;
export function vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceDisplayProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceDisplayProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceDisplayProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceDisplayProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceDisplayProperties2KHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayProperties2KHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null;
export function vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceDisplayPlaneProperties2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
    fn = __symbol_fn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayPlaneProperties2KHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDisplayModeProperties2KHR = null;
export function vkGetDisplayModeProperties2KHR(physicalDevice_, display_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetDisplayModeProperties2KHR;
  if (fn === null){
    __symbol_fn_vkGetDisplayModeProperties2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDisplayModeProperties2KHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDisplayModeProperties2KHR;
    fn = __symbol_fn_vkGetDisplayModeProperties2KHR;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkDisplayModeProperties2KHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, display_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDisplayPlaneCapabilities2KHR = null;
export function vkGetDisplayPlaneCapabilities2KHR(physicalDevice_, pDisplayPlaneInfo_, pCapabilities_){
  let fn = __symbol_fn_vkGetDisplayPlaneCapabilities2KHR;
  if (fn === null){
    __symbol_fn_vkGetDisplayPlaneCapabilities2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDisplayPlaneCapabilities2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDisplayPlaneCapabilities2KHR;
    fn = __symbol_fn_vkGetDisplayPlaneCapabilities2KHR;
  }
  
        let pDisplayPlaneInfo__buffer = null
        if (pDisplayPlaneInfo_ !== null && typeof pDisplayPlaneInfo_ === 'object'){
          pDisplayPlaneInfo__buffer = VkDisplayPlaneInfo2KHR_to_C(pDisplayPlaneInfo_ );
          pDisplayPlaneInfo_ = pDisplayPlaneInfo__buffer.ptr;
}
        let pCapabilities__buffer = null
        if (pCapabilities_ !== null && typeof pCapabilities_ === 'object'){
          pCapabilities__buffer = VkDisplayPlaneCapabilities2KHR_to_C(pCapabilities_ );
          pCapabilities_ = pCapabilities__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pDisplayPlaneInfo_, pCapabilities_);
  
      pDisplayPlaneInfo__buffer && pDisplayPlaneInfo__buffer.free()
      
      pCapabilities__buffer && pCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageMemoryRequirements2KHR = null;
export function vkGetImageMemoryRequirements2KHR(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageMemoryRequirements2KHR;
  if (fn === null){
    __symbol_fn_vkGetImageMemoryRequirements2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageMemoryRequirements2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageMemoryRequirements2KHR;
    fn = __symbol_fn_vkGetImageMemoryRequirements2KHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkImageMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetBufferMemoryRequirements2KHR = null;
export function vkGetBufferMemoryRequirements2KHR(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetBufferMemoryRequirements2KHR;
  if (fn === null){
    __symbol_fn_vkGetBufferMemoryRequirements2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferMemoryRequirements2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferMemoryRequirements2KHR;
    fn = __symbol_fn_vkGetBufferMemoryRequirements2KHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageSparseMemoryRequirements2KHR = null;
export function vkGetImageSparseMemoryRequirements2KHR(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_){
  let fn = __symbol_fn_vkGetImageSparseMemoryRequirements2KHR;
  if (fn === null){
    __symbol_fn_vkGetImageSparseMemoryRequirements2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageSparseMemoryRequirements2KHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageSparseMemoryRequirements2KHR;
    fn = __symbol_fn_vkGetImageSparseMemoryRequirements2KHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkImageSparseMemoryRequirementsInfo2_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pSparseMemoryRequirements__buffer = null
        if (pSparseMemoryRequirements_ !== null && typeof pSparseMemoryRequirements_ === 'object'){
          pSparseMemoryRequirements__buffer = VkSparseImageMemoryRequirements2_to_C(pSparseMemoryRequirements_ );
          pSparseMemoryRequirements_ = pSparseMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pSparseMemoryRequirements__buffer && pSparseMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateSamplerYcbcrConversionKHR = null;
export function vkCreateSamplerYcbcrConversionKHR(device_, pCreateInfo_, pAllocator_, pYcbcrConversion_){
  let fn = __symbol_fn_vkCreateSamplerYcbcrConversionKHR;
  if (fn === null){
    __symbol_fn_vkCreateSamplerYcbcrConversionKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateSamplerYcbcrConversionKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateSamplerYcbcrConversionKHR;
    fn = __symbol_fn_vkCreateSamplerYcbcrConversionKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkSamplerYcbcrConversionCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pYcbcrConversion_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroySamplerYcbcrConversionKHR = null;
export function vkDestroySamplerYcbcrConversionKHR(device_, ycbcrConversion_, pAllocator_){
  let fn = __symbol_fn_vkDestroySamplerYcbcrConversionKHR;
  if (fn === null){
    __symbol_fn_vkDestroySamplerYcbcrConversionKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroySamplerYcbcrConversionKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroySamplerYcbcrConversionKHR;
    fn = __symbol_fn_vkDestroySamplerYcbcrConversionKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, ycbcrConversion_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkBindBufferMemory2KHR = null;
export function vkBindBufferMemory2KHR(device_, bindInfoCount_, pBindInfos_){
  let fn = __symbol_fn_vkBindBufferMemory2KHR;
  if (fn === null){
    __symbol_fn_vkBindBufferMemory2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindBufferMemory2KHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBindBufferMemory2KHR;
    fn = __symbol_fn_vkBindBufferMemory2KHR;
  }
  
        let pBindInfos__buffer = null
        if (pBindInfos_ !== null && typeof pBindInfos_ === 'object'){
          pBindInfos__buffer = VkBindBufferMemoryInfo_to_C(pBindInfos_ );
          pBindInfos_ = pBindInfos__buffer.ptr;
}
  const ___ret =  fn(device_, bindInfoCount_, pBindInfos_);
  
      pBindInfos__buffer && pBindInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkBindImageMemory2KHR = null;
export function vkBindImageMemory2KHR(device_, bindInfoCount_, pBindInfos_){
  let fn = __symbol_fn_vkBindImageMemory2KHR;
  if (fn === null){
    __symbol_fn_vkBindImageMemory2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindImageMemory2KHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBindImageMemory2KHR;
    fn = __symbol_fn_vkBindImageMemory2KHR;
  }
  
        let pBindInfos__buffer = null
        if (pBindInfos_ !== null && typeof pBindInfos_ === 'object'){
          pBindInfos__buffer = VkBindImageMemoryInfo_to_C(pBindInfos_ );
          pBindInfos_ = pBindInfos__buffer.ptr;
}
  const ___ret =  fn(device_, bindInfoCount_, pBindInfos_);
  
      pBindInfos__buffer && pBindInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDescriptorSetLayoutSupportKHR = null;
export function vkGetDescriptorSetLayoutSupportKHR(device_, pCreateInfo_, pSupport_){
  let fn = __symbol_fn_vkGetDescriptorSetLayoutSupportKHR;
  if (fn === null){
    __symbol_fn_vkGetDescriptorSetLayoutSupportKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDescriptorSetLayoutSupportKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDescriptorSetLayoutSupportKHR;
    fn = __symbol_fn_vkGetDescriptorSetLayoutSupportKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDescriptorSetLayoutCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pSupport__buffer = null
        if (pSupport_ !== null && typeof pSupport_ === 'object'){
          pSupport__buffer = VkDescriptorSetLayoutSupport_to_C(pSupport_ );
          pSupport_ = pSupport__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pSupport_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pSupport__buffer && pSupport__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndirectCountKHR = null;
export function vkCmdDrawIndirectCountKHR(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndirectCountKHR;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndirectCountKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndirectCountKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndirectCountKHR;
    fn = __symbol_fn_vkCmdDrawIndirectCountKHR;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndexedIndirectCountKHR = null;
export function vkCmdDrawIndexedIndirectCountKHR(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndexedIndirectCountKHR;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndexedIndirectCountKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndexedIndirectCountKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndexedIndirectCountKHR;
    fn = __symbol_fn_vkCmdDrawIndexedIndirectCountKHR;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetSemaphoreCounterValueKHR = null;
export function vkGetSemaphoreCounterValueKHR(device_, semaphore_, pValue_){
  let fn = __symbol_fn_vkGetSemaphoreCounterValueKHR;
  if (fn === null){
    __symbol_fn_vkGetSemaphoreCounterValueKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSemaphoreCounterValueKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetSemaphoreCounterValueKHR;
    fn = __symbol_fn_vkGetSemaphoreCounterValueKHR;
  }
  
  const ___ret =  fn(device_, semaphore_, pValue_);
  
  return ___ret;
}
  
let __symbol_fn_vkWaitSemaphoresKHR = null;
export function vkWaitSemaphoresKHR(device_, pWaitInfo_, timeout_){
  let fn = __symbol_fn_vkWaitSemaphoresKHR;
  if (fn === null){
    __symbol_fn_vkWaitSemaphoresKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkWaitSemaphoresKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkWaitSemaphoresKHR;
    fn = __symbol_fn_vkWaitSemaphoresKHR;
  }
  
        let pWaitInfo__buffer = null
        if (pWaitInfo_ !== null && typeof pWaitInfo_ === 'object'){
          pWaitInfo__buffer = VkSemaphoreWaitInfo_to_C(pWaitInfo_ );
          pWaitInfo_ = pWaitInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pWaitInfo_, timeout_);
  
      pWaitInfo__buffer && pWaitInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSignalSemaphoreKHR = null;
export function vkSignalSemaphoreKHR(device_, pSignalInfo_){
  let fn = __symbol_fn_vkSignalSemaphoreKHR;
  if (fn === null){
    __symbol_fn_vkSignalSemaphoreKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSignalSemaphoreKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkSignalSemaphoreKHR;
    fn = __symbol_fn_vkSignalSemaphoreKHR;
  }
  
        let pSignalInfo__buffer = null
        if (pSignalInfo_ !== null && typeof pSignalInfo_ === 'object'){
          pSignalInfo__buffer = VkSemaphoreSignalInfo_to_C(pSignalInfo_ );
          pSignalInfo_ = pSignalInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pSignalInfo_);
  
      pSignalInfo__buffer && pSignalInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceFragmentShadingRatesKHR = null;
export function vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice_, pFragmentShadingRateCount_, pFragmentShadingRates_){
  let fn = __symbol_fn_vkGetPhysicalDeviceFragmentShadingRatesKHR;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceFragmentShadingRatesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceFragmentShadingRatesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceFragmentShadingRatesKHR;
    fn = __symbol_fn_vkGetPhysicalDeviceFragmentShadingRatesKHR;
  }
  
        let pFragmentShadingRates__buffer = null
        if (pFragmentShadingRates_ !== null && typeof pFragmentShadingRates_ === 'object'){
          pFragmentShadingRates__buffer = VkPhysicalDeviceFragmentShadingRateKHR_to_C(pFragmentShadingRates_ );
          pFragmentShadingRates_ = pFragmentShadingRates__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pFragmentShadingRateCount_, pFragmentShadingRates_);
  
      pFragmentShadingRates__buffer && pFragmentShadingRates__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetFragmentShadingRateKHR = null;
export function vkCmdSetFragmentShadingRateKHR(commandBuffer_, pFragmentSize_, combinerOps_){
  let fn = __symbol_fn_vkCmdSetFragmentShadingRateKHR;
  if (fn === null){
    __symbol_fn_vkCmdSetFragmentShadingRateKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetFragmentShadingRateKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetFragmentShadingRateKHR;
    fn = __symbol_fn_vkCmdSetFragmentShadingRateKHR;
  }
  
        let pFragmentSize__buffer = null
        if (pFragmentSize_ !== null && typeof pFragmentSize_ === 'object'){
          pFragmentSize__buffer = VkExtent2D_to_C(pFragmentSize_ );
          pFragmentSize_ = pFragmentSize__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pFragmentSize_, combinerOps_);
  
      pFragmentSize__buffer && pFragmentSize__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkWaitForPresentKHR = null;
export function vkWaitForPresentKHR(device_, swapchain_, presentId_, timeout_){
  let fn = __symbol_fn_vkWaitForPresentKHR;
  if (fn === null){
    __symbol_fn_vkWaitForPresentKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkWaitForPresentKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkWaitForPresentKHR;
    fn = __symbol_fn_vkWaitForPresentKHR;
  }
  
  const ___ret =  fn(device_, swapchain_, presentId_, timeout_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetBufferDeviceAddressKHR = null;
export function vkGetBufferDeviceAddressKHR(device_, pInfo_){
  let fn = __symbol_fn_vkGetBufferDeviceAddressKHR;
  if (fn === null){
    __symbol_fn_vkGetBufferDeviceAddressKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferDeviceAddressKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferDeviceAddressKHR;
    fn = __symbol_fn_vkGetBufferDeviceAddressKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferDeviceAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetBufferOpaqueCaptureAddressKHR = null;
export function vkGetBufferOpaqueCaptureAddressKHR(device_, pInfo_){
  let fn = __symbol_fn_vkGetBufferOpaqueCaptureAddressKHR;
  if (fn === null){
    __symbol_fn_vkGetBufferOpaqueCaptureAddressKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferOpaqueCaptureAddressKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferOpaqueCaptureAddressKHR;
    fn = __symbol_fn_vkGetBufferOpaqueCaptureAddressKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferDeviceAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = null;
export function vkGetDeviceMemoryOpaqueCaptureAddressKHR(device_, pInfo_){
  let fn = __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceMemoryOpaqueCaptureAddressKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceMemoryOpaqueCaptureAddressKHR;
    fn = __symbol_fn_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceMemoryOpaqueCaptureAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDeferredOperationKHR = null;
export function vkCreateDeferredOperationKHR(device_, pAllocator_, pDeferredOperation_){
  let fn = __symbol_fn_vkCreateDeferredOperationKHR;
  if (fn === null){
    __symbol_fn_vkCreateDeferredOperationKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDeferredOperationKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDeferredOperationKHR;
    fn = __symbol_fn_vkCreateDeferredOperationKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pAllocator_, pDeferredOperation_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDeferredOperationKHR = null;
export function vkDestroyDeferredOperationKHR(device_, operation_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDeferredOperationKHR;
  if (fn === null){
    __symbol_fn_vkDestroyDeferredOperationKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDeferredOperationKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDeferredOperationKHR;
    fn = __symbol_fn_vkDestroyDeferredOperationKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, operation_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeferredOperationMaxConcurrencyKHR = null;
export function vkGetDeferredOperationMaxConcurrencyKHR(device_, operation_){
  let fn = __symbol_fn_vkGetDeferredOperationMaxConcurrencyKHR;
  if (fn === null){
    __symbol_fn_vkGetDeferredOperationMaxConcurrencyKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeferredOperationMaxConcurrencyKHR: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkGetDeferredOperationMaxConcurrencyKHR;
    fn = __symbol_fn_vkGetDeferredOperationMaxConcurrencyKHR;
  }
  
  const ___ret =  fn(device_, operation_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeferredOperationResultKHR = null;
export function vkGetDeferredOperationResultKHR(device_, operation_){
  let fn = __symbol_fn_vkGetDeferredOperationResultKHR;
  if (fn === null){
    __symbol_fn_vkGetDeferredOperationResultKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeferredOperationResultKHR: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkGetDeferredOperationResultKHR;
    fn = __symbol_fn_vkGetDeferredOperationResultKHR;
  }
  
  const ___ret =  fn(device_, operation_);
  
  return ___ret;
}
  
let __symbol_fn_vkDeferredOperationJoinKHR = null;
export function vkDeferredOperationJoinKHR(device_, operation_){
  let fn = __symbol_fn_vkDeferredOperationJoinKHR;
  if (fn === null){
    __symbol_fn_vkDeferredOperationJoinKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDeferredOperationJoinKHR: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkDeferredOperationJoinKHR;
    fn = __symbol_fn_vkDeferredOperationJoinKHR;
  }
  
  const ___ret =  fn(device_, operation_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPipelineExecutablePropertiesKHR = null;
export function vkGetPipelineExecutablePropertiesKHR(device_, pPipelineInfo_, pExecutableCount_, pProperties_){
  let fn = __symbol_fn_vkGetPipelineExecutablePropertiesKHR;
  if (fn === null){
    __symbol_fn_vkGetPipelineExecutablePropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPipelineExecutablePropertiesKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPipelineExecutablePropertiesKHR;
    fn = __symbol_fn_vkGetPipelineExecutablePropertiesKHR;
  }
  
        let pPipelineInfo__buffer = null
        if (pPipelineInfo_ !== null && typeof pPipelineInfo_ === 'object'){
          pPipelineInfo__buffer = VkPipelineInfoKHR_to_C(pPipelineInfo_ );
          pPipelineInfo_ = pPipelineInfo__buffer.ptr;
}
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkPipelineExecutablePropertiesKHR_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(device_, pPipelineInfo_, pExecutableCount_, pProperties_);
  
      pPipelineInfo__buffer && pPipelineInfo__buffer.free()
      
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPipelineExecutableStatisticsKHR = null;
export function vkGetPipelineExecutableStatisticsKHR(device_, pExecutableInfo_, pStatisticCount_, pStatistics_){
  let fn = __symbol_fn_vkGetPipelineExecutableStatisticsKHR;
  if (fn === null){
    __symbol_fn_vkGetPipelineExecutableStatisticsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPipelineExecutableStatisticsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPipelineExecutableStatisticsKHR;
    fn = __symbol_fn_vkGetPipelineExecutableStatisticsKHR;
  }
  
        let pExecutableInfo__buffer = null
        if (pExecutableInfo_ !== null && typeof pExecutableInfo_ === 'object'){
          pExecutableInfo__buffer = VkPipelineExecutableInfoKHR_to_C(pExecutableInfo_ );
          pExecutableInfo_ = pExecutableInfo__buffer.ptr;
}
        let pStatistics__buffer = null
        if (pStatistics_ !== null && typeof pStatistics_ === 'object'){
          pStatistics__buffer = VkPipelineExecutableStatisticKHR_to_C(pStatistics_ );
          pStatistics_ = pStatistics__buffer.ptr;
}
  const ___ret =  fn(device_, pExecutableInfo_, pStatisticCount_, pStatistics_);
  
      pExecutableInfo__buffer && pExecutableInfo__buffer.free()
      
      pStatistics__buffer && pStatistics__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPipelineExecutableInternalRepresentationsKHR = null;
export function vkGetPipelineExecutableInternalRepresentationsKHR(device_, pExecutableInfo_, pInternalRepresentationCount_, pInternalRepresentations_){
  let fn = __symbol_fn_vkGetPipelineExecutableInternalRepresentationsKHR;
  if (fn === null){
    __symbol_fn_vkGetPipelineExecutableInternalRepresentationsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPipelineExecutableInternalRepresentationsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPipelineExecutableInternalRepresentationsKHR;
    fn = __symbol_fn_vkGetPipelineExecutableInternalRepresentationsKHR;
  }
  
        let pExecutableInfo__buffer = null
        if (pExecutableInfo_ !== null && typeof pExecutableInfo_ === 'object'){
          pExecutableInfo__buffer = VkPipelineExecutableInfoKHR_to_C(pExecutableInfo_ );
          pExecutableInfo_ = pExecutableInfo__buffer.ptr;
}
        let pInternalRepresentations__buffer = null
        if (pInternalRepresentations_ !== null && typeof pInternalRepresentations_ === 'object'){
          pInternalRepresentations__buffer = VkPipelineExecutableInternalRepresentationKHR_to_C(pInternalRepresentations_ );
          pInternalRepresentations_ = pInternalRepresentations__buffer.ptr;
}
  const ___ret =  fn(device_, pExecutableInfo_, pInternalRepresentationCount_, pInternalRepresentations_);
  
      pExecutableInfo__buffer && pExecutableInfo__buffer.free()
      
      pInternalRepresentations__buffer && pInternalRepresentations__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetEvent2KHR = null;
export function vkCmdSetEvent2KHR(commandBuffer_, event_, pDependencyInfo_){
  let fn = __symbol_fn_vkCmdSetEvent2KHR;
  if (fn === null){
    __symbol_fn_vkCmdSetEvent2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetEvent2KHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetEvent2KHR;
    fn = __symbol_fn_vkCmdSetEvent2KHR;
  }
  
        let pDependencyInfo__buffer = null
        if (pDependencyInfo_ !== null && typeof pDependencyInfo_ === 'object'){
          pDependencyInfo__buffer = VkDependencyInfo_to_C(pDependencyInfo_ );
          pDependencyInfo_ = pDependencyInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, event_, pDependencyInfo_);
  
      pDependencyInfo__buffer && pDependencyInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdResetEvent2KHR = null;
export function vkCmdResetEvent2KHR(commandBuffer_, event_, stageMask_){
  let fn = __symbol_fn_vkCmdResetEvent2KHR;
  if (fn === null){
    __symbol_fn_vkCmdResetEvent2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResetEvent2KHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdResetEvent2KHR;
    fn = __symbol_fn_vkCmdResetEvent2KHR;
  }
  
  const ___ret =  fn(commandBuffer_, event_, stageMask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdWaitEvents2KHR = null;
export function vkCmdWaitEvents2KHR(commandBuffer_, eventCount_, pEvents_, pDependencyInfos_){
  let fn = __symbol_fn_vkCmdWaitEvents2KHR;
  if (fn === null){
    __symbol_fn_vkCmdWaitEvents2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWaitEvents2KHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdWaitEvents2KHR;
    fn = __symbol_fn_vkCmdWaitEvents2KHR;
  }
  
        let pDependencyInfos__buffer = null
        if (pDependencyInfos_ !== null && typeof pDependencyInfos_ === 'object'){
          pDependencyInfos__buffer = VkDependencyInfo_to_C(pDependencyInfos_ );
          pDependencyInfos_ = pDependencyInfos__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, eventCount_, pEvents_, pDependencyInfos_);
  
      pDependencyInfos__buffer && pDependencyInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPipelineBarrier2KHR = null;
export function vkCmdPipelineBarrier2KHR(commandBuffer_, pDependencyInfo_){
  let fn = __symbol_fn_vkCmdPipelineBarrier2KHR;
  if (fn === null){
    __symbol_fn_vkCmdPipelineBarrier2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPipelineBarrier2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPipelineBarrier2KHR;
    fn = __symbol_fn_vkCmdPipelineBarrier2KHR;
  }
  
        let pDependencyInfo__buffer = null
        if (pDependencyInfo_ !== null && typeof pDependencyInfo_ === 'object'){
          pDependencyInfo__buffer = VkDependencyInfo_to_C(pDependencyInfo_ );
          pDependencyInfo_ = pDependencyInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pDependencyInfo_);
  
      pDependencyInfo__buffer && pDependencyInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteTimestamp2KHR = null;
export function vkCmdWriteTimestamp2KHR(commandBuffer_, stage_, queryPool_, query_){
  let fn = __symbol_fn_vkCmdWriteTimestamp2KHR;
  if (fn === null){
    __symbol_fn_vkCmdWriteTimestamp2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteTimestamp2KHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteTimestamp2KHR;
    fn = __symbol_fn_vkCmdWriteTimestamp2KHR;
  }
  
  const ___ret =  fn(commandBuffer_, stage_, queryPool_, query_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueueSubmit2KHR = null;
export function vkQueueSubmit2KHR(queue_, submitCount_, pSubmits_, fence_){
  let fn = __symbol_fn_vkQueueSubmit2KHR;
  if (fn === null){
    __symbol_fn_vkQueueSubmit2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueSubmit2KHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueSubmit2KHR;
    fn = __symbol_fn_vkQueueSubmit2KHR;
  }
  
        let pSubmits__buffer = null
        if (pSubmits_ !== null && typeof pSubmits_ === 'object'){
          pSubmits__buffer = VkSubmitInfo2_to_C(pSubmits_ );
          pSubmits_ = pSubmits__buffer.ptr;
}
  const ___ret =  fn(queue_, submitCount_, pSubmits_, fence_);
  
      pSubmits__buffer && pSubmits__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteBufferMarker2AMD = null;
export function vkCmdWriteBufferMarker2AMD(commandBuffer_, stage_, dstBuffer_, dstOffset_, marker_){
  let fn = __symbol_fn_vkCmdWriteBufferMarker2AMD;
  if (fn === null){
    __symbol_fn_vkCmdWriteBufferMarker2AMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteBufferMarker2AMD: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteBufferMarker2AMD;
    fn = __symbol_fn_vkCmdWriteBufferMarker2AMD;
  }
  
  const ___ret =  fn(commandBuffer_, stage_, dstBuffer_, dstOffset_, marker_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetQueueCheckpointData2NV = null;
export function vkGetQueueCheckpointData2NV(queue_, pCheckpointDataCount_, pCheckpointData_){
  let fn = __symbol_fn_vkGetQueueCheckpointData2NV;
  if (fn === null){
    __symbol_fn_vkGetQueueCheckpointData2NV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetQueueCheckpointData2NV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetQueueCheckpointData2NV;
    fn = __symbol_fn_vkGetQueueCheckpointData2NV;
  }
  
        let pCheckpointData__buffer = null
        if (pCheckpointData_ !== null && typeof pCheckpointData_ === 'object'){
          pCheckpointData__buffer = VkCheckpointData2NV_to_C(pCheckpointData_ );
          pCheckpointData_ = pCheckpointData__buffer.ptr;
}
  const ___ret =  fn(queue_, pCheckpointDataCount_, pCheckpointData_);
  
      pCheckpointData__buffer && pCheckpointData__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBuffer2KHR = null;
export function vkCmdCopyBuffer2KHR(commandBuffer_, pCopyBufferInfo_){
  let fn = __symbol_fn_vkCmdCopyBuffer2KHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyBuffer2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBuffer2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBuffer2KHR;
    fn = __symbol_fn_vkCmdCopyBuffer2KHR;
  }
  
        let pCopyBufferInfo__buffer = null
        if (pCopyBufferInfo_ !== null && typeof pCopyBufferInfo_ === 'object'){
          pCopyBufferInfo__buffer = VkCopyBufferInfo2_to_C(pCopyBufferInfo_ );
          pCopyBufferInfo_ = pCopyBufferInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyBufferInfo_);
  
      pCopyBufferInfo__buffer && pCopyBufferInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImage2KHR = null;
export function vkCmdCopyImage2KHR(commandBuffer_, pCopyImageInfo_){
  let fn = __symbol_fn_vkCmdCopyImage2KHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyImage2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImage2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImage2KHR;
    fn = __symbol_fn_vkCmdCopyImage2KHR;
  }
  
        let pCopyImageInfo__buffer = null
        if (pCopyImageInfo_ !== null && typeof pCopyImageInfo_ === 'object'){
          pCopyImageInfo__buffer = VkCopyImageInfo2_to_C(pCopyImageInfo_ );
          pCopyImageInfo_ = pCopyImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyImageInfo_);
  
      pCopyImageInfo__buffer && pCopyImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyBufferToImage2KHR = null;
export function vkCmdCopyBufferToImage2KHR(commandBuffer_, pCopyBufferToImageInfo_){
  let fn = __symbol_fn_vkCmdCopyBufferToImage2KHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyBufferToImage2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyBufferToImage2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyBufferToImage2KHR;
    fn = __symbol_fn_vkCmdCopyBufferToImage2KHR;
  }
  
        let pCopyBufferToImageInfo__buffer = null
        if (pCopyBufferToImageInfo_ !== null && typeof pCopyBufferToImageInfo_ === 'object'){
          pCopyBufferToImageInfo__buffer = VkCopyBufferToImageInfo2_to_C(pCopyBufferToImageInfo_ );
          pCopyBufferToImageInfo_ = pCopyBufferToImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyBufferToImageInfo_);
  
      pCopyBufferToImageInfo__buffer && pCopyBufferToImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyImageToBuffer2KHR = null;
export function vkCmdCopyImageToBuffer2KHR(commandBuffer_, pCopyImageToBufferInfo_){
  let fn = __symbol_fn_vkCmdCopyImageToBuffer2KHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyImageToBuffer2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyImageToBuffer2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyImageToBuffer2KHR;
    fn = __symbol_fn_vkCmdCopyImageToBuffer2KHR;
  }
  
        let pCopyImageToBufferInfo__buffer = null
        if (pCopyImageToBufferInfo_ !== null && typeof pCopyImageToBufferInfo_ === 'object'){
          pCopyImageToBufferInfo__buffer = VkCopyImageToBufferInfo2_to_C(pCopyImageToBufferInfo_ );
          pCopyImageToBufferInfo_ = pCopyImageToBufferInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pCopyImageToBufferInfo_);
  
      pCopyImageToBufferInfo__buffer && pCopyImageToBufferInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBlitImage2KHR = null;
export function vkCmdBlitImage2KHR(commandBuffer_, pBlitImageInfo_){
  let fn = __symbol_fn_vkCmdBlitImage2KHR;
  if (fn === null){
    __symbol_fn_vkCmdBlitImage2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBlitImage2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBlitImage2KHR;
    fn = __symbol_fn_vkCmdBlitImage2KHR;
  }
  
        let pBlitImageInfo__buffer = null
        if (pBlitImageInfo_ !== null && typeof pBlitImageInfo_ === 'object'){
          pBlitImageInfo__buffer = VkBlitImageInfo2_to_C(pBlitImageInfo_ );
          pBlitImageInfo_ = pBlitImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pBlitImageInfo_);
  
      pBlitImageInfo__buffer && pBlitImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdResolveImage2KHR = null;
export function vkCmdResolveImage2KHR(commandBuffer_, pResolveImageInfo_){
  let fn = __symbol_fn_vkCmdResolveImage2KHR;
  if (fn === null){
    __symbol_fn_vkCmdResolveImage2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdResolveImage2KHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdResolveImage2KHR;
    fn = __symbol_fn_vkCmdResolveImage2KHR;
  }
  
        let pResolveImageInfo__buffer = null
        if (pResolveImageInfo_ !== null && typeof pResolveImageInfo_ === 'object'){
          pResolveImageInfo__buffer = VkResolveImageInfo2_to_C(pResolveImageInfo_ );
          pResolveImageInfo_ = pResolveImageInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pResolveImageInfo_);
  
      pResolveImageInfo__buffer && pResolveImageInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdTraceRaysIndirect2KHR = null;
export function vkCmdTraceRaysIndirect2KHR(commandBuffer_, indirectDeviceAddress_){
  let fn = __symbol_fn_vkCmdTraceRaysIndirect2KHR;
  if (fn === null){
    __symbol_fn_vkCmdTraceRaysIndirect2KHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdTraceRaysIndirect2KHR: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdTraceRaysIndirect2KHR;
    fn = __symbol_fn_vkCmdTraceRaysIndirect2KHR;
  }
  
  const ___ret =  fn(commandBuffer_, indirectDeviceAddress_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceBufferMemoryRequirementsKHR = null;
export function vkGetDeviceBufferMemoryRequirementsKHR(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceBufferMemoryRequirementsKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceBufferMemoryRequirementsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceBufferMemoryRequirementsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceBufferMemoryRequirementsKHR;
    fn = __symbol_fn_vkGetDeviceBufferMemoryRequirementsKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceBufferMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceImageMemoryRequirementsKHR = null;
export function vkGetDeviceImageMemoryRequirementsKHR(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceImageMemoryRequirementsKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceImageMemoryRequirementsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceImageMemoryRequirementsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceImageMemoryRequirementsKHR;
    fn = __symbol_fn_vkGetDeviceImageMemoryRequirementsKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceImageMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceImageSparseMemoryRequirementsKHR = null;
export function vkGetDeviceImageSparseMemoryRequirementsKHR(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_){
  let fn = __symbol_fn_vkGetDeviceImageSparseMemoryRequirementsKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceImageSparseMemoryRequirementsKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceImageSparseMemoryRequirementsKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceImageSparseMemoryRequirementsKHR;
    fn = __symbol_fn_vkGetDeviceImageSparseMemoryRequirementsKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkDeviceImageMemoryRequirements_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pSparseMemoryRequirements__buffer = null
        if (pSparseMemoryRequirements_ !== null && typeof pSparseMemoryRequirements_ === 'object'){
          pSparseMemoryRequirements__buffer = VkSparseImageMemoryRequirements2_to_C(pSparseMemoryRequirements_ );
          pSparseMemoryRequirements_ = pSparseMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pSparseMemoryRequirementCount_, pSparseMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pSparseMemoryRequirements__buffer && pSparseMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDebugReportCallbackEXT = null;
export function vkCreateDebugReportCallbackEXT(instance_, pCreateInfo_, pAllocator_, pCallback_){
  let fn = __symbol_fn_vkCreateDebugReportCallbackEXT;
  if (fn === null){
    __symbol_fn_vkCreateDebugReportCallbackEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDebugReportCallbackEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDebugReportCallbackEXT;
    fn = __symbol_fn_vkCreateDebugReportCallbackEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDebugReportCallbackCreateInfoEXT_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, pCreateInfo_, pAllocator_, pCallback_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDebugReportCallbackEXT = null;
export function vkDestroyDebugReportCallbackEXT(instance_, callback_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDebugReportCallbackEXT;
  if (fn === null){
    __symbol_fn_vkDestroyDebugReportCallbackEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDebugReportCallbackEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDebugReportCallbackEXT;
    fn = __symbol_fn_vkDestroyDebugReportCallbackEXT;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, callback_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDebugReportMessageEXT = null;
export function vkDebugReportMessageEXT(instance_, flags_, objectType_, object_, location_, messageCode_, pLayerPrefix_, pMessage_){
  let fn = __symbol_fn_vkDebugReportMessageEXT;
  if (fn === null){
    __symbol_fn_vkDebugReportMessageEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDebugReportMessageEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.i32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDebugReportMessageEXT;
    fn = __symbol_fn_vkDebugReportMessageEXT;
  }
  
  const ___ret =  fn(instance_, flags_, objectType_, object_, location_, messageCode_, pLayerPrefix_, pMessage_);
  
  return ___ret;
}
  
let __symbol_fn_vkDebugMarkerSetObjectTagEXT = null;
export function vkDebugMarkerSetObjectTagEXT(device_, pTagInfo_){
  let fn = __symbol_fn_vkDebugMarkerSetObjectTagEXT;
  if (fn === null){
    __symbol_fn_vkDebugMarkerSetObjectTagEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDebugMarkerSetObjectTagEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkDebugMarkerSetObjectTagEXT;
    fn = __symbol_fn_vkDebugMarkerSetObjectTagEXT;
  }
  
        let pTagInfo__buffer = null
        if (pTagInfo_ !== null && typeof pTagInfo_ === 'object'){
          pTagInfo__buffer = VkDebugMarkerObjectTagInfoEXT_to_C(pTagInfo_ );
          pTagInfo_ = pTagInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pTagInfo_);
  
      pTagInfo__buffer && pTagInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDebugMarkerSetObjectNameEXT = null;
export function vkDebugMarkerSetObjectNameEXT(device_, pNameInfo_){
  let fn = __symbol_fn_vkDebugMarkerSetObjectNameEXT;
  if (fn === null){
    __symbol_fn_vkDebugMarkerSetObjectNameEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDebugMarkerSetObjectNameEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkDebugMarkerSetObjectNameEXT;
    fn = __symbol_fn_vkDebugMarkerSetObjectNameEXT;
  }
  
        let pNameInfo__buffer = null
        if (pNameInfo_ !== null && typeof pNameInfo_ === 'object'){
          pNameInfo__buffer = VkDebugMarkerObjectNameInfoEXT_to_C(pNameInfo_ );
          pNameInfo_ = pNameInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pNameInfo_);
  
      pNameInfo__buffer && pNameInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDebugMarkerBeginEXT = null;
export function vkCmdDebugMarkerBeginEXT(commandBuffer_, pMarkerInfo_){
  let fn = __symbol_fn_vkCmdDebugMarkerBeginEXT;
  if (fn === null){
    __symbol_fn_vkCmdDebugMarkerBeginEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDebugMarkerBeginEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdDebugMarkerBeginEXT;
    fn = __symbol_fn_vkCmdDebugMarkerBeginEXT;
  }
  
        let pMarkerInfo__buffer = null
        if (pMarkerInfo_ !== null && typeof pMarkerInfo_ === 'object'){
          pMarkerInfo__buffer = VkDebugMarkerMarkerInfoEXT_to_C(pMarkerInfo_ );
          pMarkerInfo_ = pMarkerInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pMarkerInfo_);
  
      pMarkerInfo__buffer && pMarkerInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDebugMarkerEndEXT = null;
export function vkCmdDebugMarkerEndEXT(commandBuffer_){
  let fn = __symbol_fn_vkCmdDebugMarkerEndEXT;
  if (fn === null){
    __symbol_fn_vkCmdDebugMarkerEndEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDebugMarkerEndEXT: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdDebugMarkerEndEXT;
    fn = __symbol_fn_vkCmdDebugMarkerEndEXT;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDebugMarkerInsertEXT = null;
export function vkCmdDebugMarkerInsertEXT(commandBuffer_, pMarkerInfo_){
  let fn = __symbol_fn_vkCmdDebugMarkerInsertEXT;
  if (fn === null){
    __symbol_fn_vkCmdDebugMarkerInsertEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDebugMarkerInsertEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdDebugMarkerInsertEXT;
    fn = __symbol_fn_vkCmdDebugMarkerInsertEXT;
  }
  
        let pMarkerInfo__buffer = null
        if (pMarkerInfo_ !== null && typeof pMarkerInfo_ === 'object'){
          pMarkerInfo__buffer = VkDebugMarkerMarkerInfoEXT_to_C(pMarkerInfo_ );
          pMarkerInfo_ = pMarkerInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pMarkerInfo_);
  
      pMarkerInfo__buffer && pMarkerInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBindTransformFeedbackBuffersEXT = null;
export function vkCmdBindTransformFeedbackBuffersEXT(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_){
  let fn = __symbol_fn_vkCmdBindTransformFeedbackBuffersEXT;
  if (fn === null){
    __symbol_fn_vkCmdBindTransformFeedbackBuffersEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindTransformFeedbackBuffersEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindTransformFeedbackBuffersEXT;
    fn = __symbol_fn_vkCmdBindTransformFeedbackBuffersEXT;
  }
  
  const ___ret =  fn(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginTransformFeedbackEXT = null;
export function vkCmdBeginTransformFeedbackEXT(commandBuffer_, firstCounterBuffer_, counterBufferCount_, pCounterBuffers_, pCounterBufferOffsets_){
  let fn = __symbol_fn_vkCmdBeginTransformFeedbackEXT;
  if (fn === null){
    __symbol_fn_vkCmdBeginTransformFeedbackEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginTransformFeedbackEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginTransformFeedbackEXT;
    fn = __symbol_fn_vkCmdBeginTransformFeedbackEXT;
  }
  
  const ___ret =  fn(commandBuffer_, firstCounterBuffer_, counterBufferCount_, pCounterBuffers_, pCounterBufferOffsets_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdEndTransformFeedbackEXT = null;
export function vkCmdEndTransformFeedbackEXT(commandBuffer_, firstCounterBuffer_, counterBufferCount_, pCounterBuffers_, pCounterBufferOffsets_){
  let fn = __symbol_fn_vkCmdEndTransformFeedbackEXT;
  if (fn === null){
    __symbol_fn_vkCmdEndTransformFeedbackEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndTransformFeedbackEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndTransformFeedbackEXT;
    fn = __symbol_fn_vkCmdEndTransformFeedbackEXT;
  }
  
  const ___ret =  fn(commandBuffer_, firstCounterBuffer_, counterBufferCount_, pCounterBuffers_, pCounterBufferOffsets_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginQueryIndexedEXT = null;
export function vkCmdBeginQueryIndexedEXT(commandBuffer_, queryPool_, query_, flags_, index_){
  let fn = __symbol_fn_vkCmdBeginQueryIndexedEXT;
  if (fn === null){
    __symbol_fn_vkCmdBeginQueryIndexedEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginQueryIndexedEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginQueryIndexedEXT;
    fn = __symbol_fn_vkCmdBeginQueryIndexedEXT;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, query_, flags_, index_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdEndQueryIndexedEXT = null;
export function vkCmdEndQueryIndexedEXT(commandBuffer_, queryPool_, query_, index_){
  let fn = __symbol_fn_vkCmdEndQueryIndexedEXT;
  if (fn === null){
    __symbol_fn_vkCmdEndQueryIndexedEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndQueryIndexedEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndQueryIndexedEXT;
    fn = __symbol_fn_vkCmdEndQueryIndexedEXT;
  }
  
  const ___ret =  fn(commandBuffer_, queryPool_, query_, index_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndirectByteCountEXT = null;
export function vkCmdDrawIndirectByteCountEXT(commandBuffer_, instanceCount_, firstInstance_, counterBuffer_, counterBufferOffset_, counterOffset_, vertexStride_){
  let fn = __symbol_fn_vkCmdDrawIndirectByteCountEXT;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndirectByteCountEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndirectByteCountEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndirectByteCountEXT;
    fn = __symbol_fn_vkCmdDrawIndirectByteCountEXT;
  }
  
  const ___ret =  fn(commandBuffer_, instanceCount_, firstInstance_, counterBuffer_, counterBufferOffset_, counterOffset_, vertexStride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateCuModuleNVX = null;
export function vkCreateCuModuleNVX(device_, pCreateInfo_, pAllocator_, pModule_){
  let fn = __symbol_fn_vkCreateCuModuleNVX;
  if (fn === null){
    __symbol_fn_vkCreateCuModuleNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateCuModuleNVX: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateCuModuleNVX;
    fn = __symbol_fn_vkCreateCuModuleNVX;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkCuModuleCreateInfoNVX_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pModule_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateCuFunctionNVX = null;
export function vkCreateCuFunctionNVX(device_, pCreateInfo_, pAllocator_, pFunction_){
  let fn = __symbol_fn_vkCreateCuFunctionNVX;
  if (fn === null){
    __symbol_fn_vkCreateCuFunctionNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateCuFunctionNVX: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateCuFunctionNVX;
    fn = __symbol_fn_vkCreateCuFunctionNVX;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkCuFunctionCreateInfoNVX_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pFunction_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyCuModuleNVX = null;
export function vkDestroyCuModuleNVX(device_, module_, pAllocator_){
  let fn = __symbol_fn_vkDestroyCuModuleNVX;
  if (fn === null){
    __symbol_fn_vkDestroyCuModuleNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyCuModuleNVX: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyCuModuleNVX;
    fn = __symbol_fn_vkDestroyCuModuleNVX;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, module_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyCuFunctionNVX = null;
export function vkDestroyCuFunctionNVX(device_, function_, pAllocator_){
  let fn = __symbol_fn_vkDestroyCuFunctionNVX;
  if (fn === null){
    __symbol_fn_vkDestroyCuFunctionNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyCuFunctionNVX: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyCuFunctionNVX;
    fn = __symbol_fn_vkDestroyCuFunctionNVX;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, function_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCuLaunchKernelNVX = null;
export function vkCmdCuLaunchKernelNVX(commandBuffer_, pLaunchInfo_){
  let fn = __symbol_fn_vkCmdCuLaunchKernelNVX;
  if (fn === null){
    __symbol_fn_vkCmdCuLaunchKernelNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCuLaunchKernelNVX: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCuLaunchKernelNVX;
    fn = __symbol_fn_vkCmdCuLaunchKernelNVX;
  }
  
        let pLaunchInfo__buffer = null
        if (pLaunchInfo_ !== null && typeof pLaunchInfo_ === 'object'){
          pLaunchInfo__buffer = VkCuLaunchInfoNVX_to_C(pLaunchInfo_ );
          pLaunchInfo_ = pLaunchInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pLaunchInfo_);
  
      pLaunchInfo__buffer && pLaunchInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageViewHandleNVX = null;
export function vkGetImageViewHandleNVX(device_, pInfo_){
  let fn = __symbol_fn_vkGetImageViewHandleNVX;
  if (fn === null){
    __symbol_fn_vkGetImageViewHandleNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageViewHandleNVX: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetImageViewHandleNVX;
    fn = __symbol_fn_vkGetImageViewHandleNVX;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkImageViewHandleInfoNVX_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageViewAddressNVX = null;
export function vkGetImageViewAddressNVX(device_, imageView_, pProperties_){
  let fn = __symbol_fn_vkGetImageViewAddressNVX;
  if (fn === null){
    __symbol_fn_vkGetImageViewAddressNVX = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageViewAddressNVX: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetImageViewAddressNVX;
    fn = __symbol_fn_vkGetImageViewAddressNVX;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkImageViewAddressPropertiesNVX_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(device_, imageView_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndirectCountAMD = null;
export function vkCmdDrawIndirectCountAMD(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndirectCountAMD;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndirectCountAMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndirectCountAMD: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndirectCountAMD;
    fn = __symbol_fn_vkCmdDrawIndirectCountAMD;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawIndexedIndirectCountAMD = null;
export function vkCmdDrawIndexedIndirectCountAMD(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawIndexedIndirectCountAMD;
  if (fn === null){
    __symbol_fn_vkCmdDrawIndexedIndirectCountAMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawIndexedIndirectCountAMD: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawIndexedIndirectCountAMD;
    fn = __symbol_fn_vkCmdDrawIndexedIndirectCountAMD;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetShaderInfoAMD = null;
export function vkGetShaderInfoAMD(device_, pipeline_, shaderStage_, infoType_, pInfoSize_, pInfo_){
  let fn = __symbol_fn_vkGetShaderInfoAMD;
  if (fn === null){
    __symbol_fn_vkGetShaderInfoAMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetShaderInfoAMD: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetShaderInfoAMD;
    fn = __symbol_fn_vkGetShaderInfoAMD;
  }
  
  const ___ret =  fn(device_, pipeline_, shaderStage_, infoType_, pInfoSize_, pInfo_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null;
export function vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice_, format_, type_, tiling_, usage_, flags_, externalHandleType_, pExternalImageFormatProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceExternalImageFormatPropertiesNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
    fn = __symbol_fn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
  }
  
        let pExternalImageFormatProperties__buffer = null
        if (pExternalImageFormatProperties_ !== null && typeof pExternalImageFormatProperties_ === 'object'){
          pExternalImageFormatProperties__buffer = VkExternalImageFormatPropertiesNV_to_C(pExternalImageFormatProperties_ );
          pExternalImageFormatProperties_ = pExternalImageFormatProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, format_, type_, tiling_, usage_, flags_, externalHandleType_, pExternalImageFormatProperties_);
  
      pExternalImageFormatProperties__buffer && pExternalImageFormatProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginConditionalRenderingEXT = null;
export function vkCmdBeginConditionalRenderingEXT(commandBuffer_, pConditionalRenderingBegin_){
  let fn = __symbol_fn_vkCmdBeginConditionalRenderingEXT;
  if (fn === null){
    __symbol_fn_vkCmdBeginConditionalRenderingEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginConditionalRenderingEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginConditionalRenderingEXT;
    fn = __symbol_fn_vkCmdBeginConditionalRenderingEXT;
  }
  
        let pConditionalRenderingBegin__buffer = null
        if (pConditionalRenderingBegin_ !== null && typeof pConditionalRenderingBegin_ === 'object'){
          pConditionalRenderingBegin__buffer = VkConditionalRenderingBeginInfoEXT_to_C(pConditionalRenderingBegin_ );
          pConditionalRenderingBegin_ = pConditionalRenderingBegin__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pConditionalRenderingBegin_);
  
      pConditionalRenderingBegin__buffer && pConditionalRenderingBegin__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndConditionalRenderingEXT = null;
export function vkCmdEndConditionalRenderingEXT(commandBuffer_){
  let fn = __symbol_fn_vkCmdEndConditionalRenderingEXT;
  if (fn === null){
    __symbol_fn_vkCmdEndConditionalRenderingEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndConditionalRenderingEXT: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndConditionalRenderingEXT;
    fn = __symbol_fn_vkCmdEndConditionalRenderingEXT;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetViewportWScalingNV = null;
export function vkCmdSetViewportWScalingNV(commandBuffer_, firstViewport_, viewportCount_, pViewportWScalings_){
  let fn = __symbol_fn_vkCmdSetViewportWScalingNV;
  if (fn === null){
    __symbol_fn_vkCmdSetViewportWScalingNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetViewportWScalingNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetViewportWScalingNV;
    fn = __symbol_fn_vkCmdSetViewportWScalingNV;
  }
  
        let pViewportWScalings__buffer = null
        if (pViewportWScalings_ !== null && typeof pViewportWScalings_ === 'object'){
          pViewportWScalings__buffer = VkViewportWScalingNV_to_C(pViewportWScalings_ );
          pViewportWScalings_ = pViewportWScalings__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstViewport_, viewportCount_, pViewportWScalings_);
  
      pViewportWScalings__buffer && pViewportWScalings__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkReleaseDisplayEXT = null;
export function vkReleaseDisplayEXT(physicalDevice_, display_){
  let fn = __symbol_fn_vkReleaseDisplayEXT;
  if (fn === null){
    __symbol_fn_vkReleaseDisplayEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkReleaseDisplayEXT: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkReleaseDisplayEXT;
    fn = __symbol_fn_vkReleaseDisplayEXT;
  }
  
  const ___ret =  fn(physicalDevice_, display_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = null;
export function vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice_, surface_, pSurfaceCapabilities_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSurfaceCapabilities2EXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSurfaceCapabilities2EXT;
    fn = __symbol_fn_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
  }
  
        let pSurfaceCapabilities__buffer = null
        if (pSurfaceCapabilities_ !== null && typeof pSurfaceCapabilities_ === 'object'){
          pSurfaceCapabilities__buffer = VkSurfaceCapabilities2EXT_to_C(pSurfaceCapabilities_ );
          pSurfaceCapabilities_ = pSurfaceCapabilities__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, surface_, pSurfaceCapabilities_);
  
      pSurfaceCapabilities__buffer && pSurfaceCapabilities__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDisplayPowerControlEXT = null;
export function vkDisplayPowerControlEXT(device_, display_, pDisplayPowerInfo_){
  let fn = __symbol_fn_vkDisplayPowerControlEXT;
  if (fn === null){
    __symbol_fn_vkDisplayPowerControlEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDisplayPowerControlEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkDisplayPowerControlEXT;
    fn = __symbol_fn_vkDisplayPowerControlEXT;
  }
  
        let pDisplayPowerInfo__buffer = null
        if (pDisplayPowerInfo_ !== null && typeof pDisplayPowerInfo_ === 'object'){
          pDisplayPowerInfo__buffer = VkDisplayPowerInfoEXT_to_C(pDisplayPowerInfo_ );
          pDisplayPowerInfo_ = pDisplayPowerInfo__buffer.ptr;
}
  const ___ret =  fn(device_, display_, pDisplayPowerInfo_);
  
      pDisplayPowerInfo__buffer && pDisplayPowerInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkRegisterDeviceEventEXT = null;
export function vkRegisterDeviceEventEXT(device_, pDeviceEventInfo_, pAllocator_, pFence_){
  let fn = __symbol_fn_vkRegisterDeviceEventEXT;
  if (fn === null){
    __symbol_fn_vkRegisterDeviceEventEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkRegisterDeviceEventEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkRegisterDeviceEventEXT;
    fn = __symbol_fn_vkRegisterDeviceEventEXT;
  }
  
        let pDeviceEventInfo__buffer = null
        if (pDeviceEventInfo_ !== null && typeof pDeviceEventInfo_ === 'object'){
          pDeviceEventInfo__buffer = VkDeviceEventInfoEXT_to_C(pDeviceEventInfo_ );
          pDeviceEventInfo_ = pDeviceEventInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pDeviceEventInfo_, pAllocator_, pFence_);
  
      pDeviceEventInfo__buffer && pDeviceEventInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkRegisterDisplayEventEXT = null;
export function vkRegisterDisplayEventEXT(device_, display_, pDisplayEventInfo_, pAllocator_, pFence_){
  let fn = __symbol_fn_vkRegisterDisplayEventEXT;
  if (fn === null){
    __symbol_fn_vkRegisterDisplayEventEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkRegisterDisplayEventEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkRegisterDisplayEventEXT;
    fn = __symbol_fn_vkRegisterDisplayEventEXT;
  }
  
        let pDisplayEventInfo__buffer = null
        if (pDisplayEventInfo_ !== null && typeof pDisplayEventInfo_ === 'object'){
          pDisplayEventInfo__buffer = VkDisplayEventInfoEXT_to_C(pDisplayEventInfo_ );
          pDisplayEventInfo_ = pDisplayEventInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, display_, pDisplayEventInfo_, pAllocator_, pFence_);
  
      pDisplayEventInfo__buffer && pDisplayEventInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetSwapchainCounterEXT = null;
export function vkGetSwapchainCounterEXT(device_, swapchain_, counter_, pCounterValue_){
  let fn = __symbol_fn_vkGetSwapchainCounterEXT;
  if (fn === null){
    __symbol_fn_vkGetSwapchainCounterEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetSwapchainCounterEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetSwapchainCounterEXT;
    fn = __symbol_fn_vkGetSwapchainCounterEXT;
  }
  
  const ___ret =  fn(device_, swapchain_, counter_, pCounterValue_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetRefreshCycleDurationGOOGLE = null;
export function vkGetRefreshCycleDurationGOOGLE(device_, swapchain_, pDisplayTimingProperties_){
  let fn = __symbol_fn_vkGetRefreshCycleDurationGOOGLE;
  if (fn === null){
    __symbol_fn_vkGetRefreshCycleDurationGOOGLE = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRefreshCycleDurationGOOGLE: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetRefreshCycleDurationGOOGLE;
    fn = __symbol_fn_vkGetRefreshCycleDurationGOOGLE;
  }
  
        let pDisplayTimingProperties__buffer = null
        if (pDisplayTimingProperties_ !== null && typeof pDisplayTimingProperties_ === 'object'){
          pDisplayTimingProperties__buffer = VkRefreshCycleDurationGOOGLE_to_C(pDisplayTimingProperties_ );
          pDisplayTimingProperties_ = pDisplayTimingProperties__buffer.ptr;
}
  const ___ret =  fn(device_, swapchain_, pDisplayTimingProperties_);
  
      pDisplayTimingProperties__buffer && pDisplayTimingProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPastPresentationTimingGOOGLE = null;
export function vkGetPastPresentationTimingGOOGLE(device_, swapchain_, pPresentationTimingCount_, pPresentationTimings_){
  let fn = __symbol_fn_vkGetPastPresentationTimingGOOGLE;
  if (fn === null){
    __symbol_fn_vkGetPastPresentationTimingGOOGLE = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPastPresentationTimingGOOGLE: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPastPresentationTimingGOOGLE;
    fn = __symbol_fn_vkGetPastPresentationTimingGOOGLE;
  }
  
        let pPresentationTimings__buffer = null
        if (pPresentationTimings_ !== null && typeof pPresentationTimings_ === 'object'){
          pPresentationTimings__buffer = VkPastPresentationTimingGOOGLE_to_C(pPresentationTimings_ );
          pPresentationTimings_ = pPresentationTimings__buffer.ptr;
}
  const ___ret =  fn(device_, swapchain_, pPresentationTimingCount_, pPresentationTimings_);
  
      pPresentationTimings__buffer && pPresentationTimings__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDiscardRectangleEXT = null;
export function vkCmdSetDiscardRectangleEXT(commandBuffer_, firstDiscardRectangle_, discardRectangleCount_, pDiscardRectangles_){
  let fn = __symbol_fn_vkCmdSetDiscardRectangleEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDiscardRectangleEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDiscardRectangleEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDiscardRectangleEXT;
    fn = __symbol_fn_vkCmdSetDiscardRectangleEXT;
  }
  
        let pDiscardRectangles__buffer = null
        if (pDiscardRectangles_ !== null && typeof pDiscardRectangles_ === 'object'){
          pDiscardRectangles__buffer = VkRect2D_to_C(pDiscardRectangles_ );
          pDiscardRectangles_ = pDiscardRectangles__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstDiscardRectangle_, discardRectangleCount_, pDiscardRectangles_);
  
      pDiscardRectangles__buffer && pDiscardRectangles__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetHdrMetadataEXT = null;
export function vkSetHdrMetadataEXT(device_, swapchainCount_, pSwapchains_, pMetadata_){
  let fn = __symbol_fn_vkSetHdrMetadataEXT;
  if (fn === null){
    __symbol_fn_vkSetHdrMetadataEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetHdrMetadataEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkSetHdrMetadataEXT;
    fn = __symbol_fn_vkSetHdrMetadataEXT;
  }
  
        let pMetadata__buffer = null
        if (pMetadata_ !== null && typeof pMetadata_ === 'object'){
          pMetadata__buffer = VkHdrMetadataEXT_to_C(pMetadata_ );
          pMetadata_ = pMetadata__buffer.ptr;
}
  const ___ret =  fn(device_, swapchainCount_, pSwapchains_, pMetadata_);
  
      pMetadata__buffer && pMetadata__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetDebugUtilsObjectNameEXT = null;
export function vkSetDebugUtilsObjectNameEXT(device_, pNameInfo_){
  let fn = __symbol_fn_vkSetDebugUtilsObjectNameEXT;
  if (fn === null){
    __symbol_fn_vkSetDebugUtilsObjectNameEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetDebugUtilsObjectNameEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkSetDebugUtilsObjectNameEXT;
    fn = __symbol_fn_vkSetDebugUtilsObjectNameEXT;
  }
  
        let pNameInfo__buffer = null
        if (pNameInfo_ !== null && typeof pNameInfo_ === 'object'){
          pNameInfo__buffer = VkDebugUtilsObjectNameInfoEXT_to_C(pNameInfo_ );
          pNameInfo_ = pNameInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pNameInfo_);
  
      pNameInfo__buffer && pNameInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetDebugUtilsObjectTagEXT = null;
export function vkSetDebugUtilsObjectTagEXT(device_, pTagInfo_){
  let fn = __symbol_fn_vkSetDebugUtilsObjectTagEXT;
  if (fn === null){
    __symbol_fn_vkSetDebugUtilsObjectTagEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetDebugUtilsObjectTagEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkSetDebugUtilsObjectTagEXT;
    fn = __symbol_fn_vkSetDebugUtilsObjectTagEXT;
  }
  
        let pTagInfo__buffer = null
        if (pTagInfo_ !== null && typeof pTagInfo_ === 'object'){
          pTagInfo__buffer = VkDebugUtilsObjectTagInfoEXT_to_C(pTagInfo_ );
          pTagInfo_ = pTagInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pTagInfo_);
  
      pTagInfo__buffer && pTagInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkQueueBeginDebugUtilsLabelEXT = null;
export function vkQueueBeginDebugUtilsLabelEXT(queue_, pLabelInfo_){
  let fn = __symbol_fn_vkQueueBeginDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkQueueBeginDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueBeginDebugUtilsLabelEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkQueueBeginDebugUtilsLabelEXT;
    fn = __symbol_fn_vkQueueBeginDebugUtilsLabelEXT;
  }
  
        let pLabelInfo__buffer = null
        if (pLabelInfo_ !== null && typeof pLabelInfo_ === 'object'){
          pLabelInfo__buffer = VkDebugUtilsLabelEXT_to_C(pLabelInfo_ );
          pLabelInfo_ = pLabelInfo__buffer.ptr;
}
  const ___ret =  fn(queue_, pLabelInfo_);
  
      pLabelInfo__buffer && pLabelInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkQueueEndDebugUtilsLabelEXT = null;
export function vkQueueEndDebugUtilsLabelEXT(queue_){
  let fn = __symbol_fn_vkQueueEndDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkQueueEndDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueEndDebugUtilsLabelEXT: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkQueueEndDebugUtilsLabelEXT;
    fn = __symbol_fn_vkQueueEndDebugUtilsLabelEXT;
  }
  
  const ___ret =  fn(queue_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueueInsertDebugUtilsLabelEXT = null;
export function vkQueueInsertDebugUtilsLabelEXT(queue_, pLabelInfo_){
  let fn = __symbol_fn_vkQueueInsertDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkQueueInsertDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueInsertDebugUtilsLabelEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkQueueInsertDebugUtilsLabelEXT;
    fn = __symbol_fn_vkQueueInsertDebugUtilsLabelEXT;
  }
  
        let pLabelInfo__buffer = null
        if (pLabelInfo_ !== null && typeof pLabelInfo_ === 'object'){
          pLabelInfo__buffer = VkDebugUtilsLabelEXT_to_C(pLabelInfo_ );
          pLabelInfo_ = pLabelInfo__buffer.ptr;
}
  const ___ret =  fn(queue_, pLabelInfo_);
  
      pLabelInfo__buffer && pLabelInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBeginDebugUtilsLabelEXT = null;
export function vkCmdBeginDebugUtilsLabelEXT(commandBuffer_, pLabelInfo_){
  let fn = __symbol_fn_vkCmdBeginDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkCmdBeginDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBeginDebugUtilsLabelEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBeginDebugUtilsLabelEXT;
    fn = __symbol_fn_vkCmdBeginDebugUtilsLabelEXT;
  }
  
        let pLabelInfo__buffer = null
        if (pLabelInfo_ !== null && typeof pLabelInfo_ === 'object'){
          pLabelInfo__buffer = VkDebugUtilsLabelEXT_to_C(pLabelInfo_ );
          pLabelInfo_ = pLabelInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pLabelInfo_);
  
      pLabelInfo__buffer && pLabelInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdEndDebugUtilsLabelEXT = null;
export function vkCmdEndDebugUtilsLabelEXT(commandBuffer_){
  let fn = __symbol_fn_vkCmdEndDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkCmdEndDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdEndDebugUtilsLabelEXT: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdEndDebugUtilsLabelEXT;
    fn = __symbol_fn_vkCmdEndDebugUtilsLabelEXT;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdInsertDebugUtilsLabelEXT = null;
export function vkCmdInsertDebugUtilsLabelEXT(commandBuffer_, pLabelInfo_){
  let fn = __symbol_fn_vkCmdInsertDebugUtilsLabelEXT;
  if (fn === null){
    __symbol_fn_vkCmdInsertDebugUtilsLabelEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdInsertDebugUtilsLabelEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdInsertDebugUtilsLabelEXT;
    fn = __symbol_fn_vkCmdInsertDebugUtilsLabelEXT;
  }
  
        let pLabelInfo__buffer = null
        if (pLabelInfo_ !== null && typeof pLabelInfo_ === 'object'){
          pLabelInfo__buffer = VkDebugUtilsLabelEXT_to_C(pLabelInfo_ );
          pLabelInfo_ = pLabelInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pLabelInfo_);
  
      pLabelInfo__buffer && pLabelInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateDebugUtilsMessengerEXT = null;
export function vkCreateDebugUtilsMessengerEXT(instance_, pCreateInfo_, pAllocator_, pMessenger_){
  let fn = __symbol_fn_vkCreateDebugUtilsMessengerEXT;
  if (fn === null){
    __symbol_fn_vkCreateDebugUtilsMessengerEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateDebugUtilsMessengerEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateDebugUtilsMessengerEXT;
    fn = __symbol_fn_vkCreateDebugUtilsMessengerEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkDebugUtilsMessengerCreateInfoEXT_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, pCreateInfo_, pAllocator_, pMessenger_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyDebugUtilsMessengerEXT = null;
export function vkDestroyDebugUtilsMessengerEXT(instance_, messenger_, pAllocator_){
  let fn = __symbol_fn_vkDestroyDebugUtilsMessengerEXT;
  if (fn === null){
    __symbol_fn_vkDestroyDebugUtilsMessengerEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyDebugUtilsMessengerEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyDebugUtilsMessengerEXT;
    fn = __symbol_fn_vkDestroyDebugUtilsMessengerEXT;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, messenger_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSubmitDebugUtilsMessageEXT = null;
export function vkSubmitDebugUtilsMessageEXT(instance_, messageSeverity_, messageTypes_, pCallbackData_){
  let fn = __symbol_fn_vkSubmitDebugUtilsMessageEXT;
  if (fn === null){
    __symbol_fn_vkSubmitDebugUtilsMessageEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSubmitDebugUtilsMessageEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkSubmitDebugUtilsMessageEXT;
    fn = __symbol_fn_vkSubmitDebugUtilsMessageEXT;
  }
  
        let pCallbackData__buffer = null
        if (pCallbackData_ !== null && typeof pCallbackData_ === 'object'){
          pCallbackData__buffer = VkDebugUtilsMessengerCallbackDataEXT_to_C(pCallbackData_ );
          pCallbackData_ = pCallbackData__buffer.ptr;
}
  const ___ret =  fn(instance_, messageSeverity_, messageTypes_, pCallbackData_);
  
      pCallbackData__buffer && pCallbackData__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetSampleLocationsEXT = null;
export function vkCmdSetSampleLocationsEXT(commandBuffer_, pSampleLocationsInfo_){
  let fn = __symbol_fn_vkCmdSetSampleLocationsEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetSampleLocationsEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetSampleLocationsEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetSampleLocationsEXT;
    fn = __symbol_fn_vkCmdSetSampleLocationsEXT;
  }
  
        let pSampleLocationsInfo__buffer = null
        if (pSampleLocationsInfo_ !== null && typeof pSampleLocationsInfo_ === 'object'){
          pSampleLocationsInfo__buffer = VkSampleLocationsInfoEXT_to_C(pSampleLocationsInfo_ );
          pSampleLocationsInfo_ = pSampleLocationsInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pSampleLocationsInfo_);
  
      pSampleLocationsInfo__buffer && pSampleLocationsInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceMultisamplePropertiesEXT = null;
export function vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice_, samples_, pMultisampleProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceMultisamplePropertiesEXT;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceMultisamplePropertiesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceMultisamplePropertiesEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPhysicalDeviceMultisamplePropertiesEXT;
    fn = __symbol_fn_vkGetPhysicalDeviceMultisamplePropertiesEXT;
  }
  
        let pMultisampleProperties__buffer = null
        if (pMultisampleProperties_ !== null && typeof pMultisampleProperties_ === 'object'){
          pMultisampleProperties__buffer = VkMultisamplePropertiesEXT_to_C(pMultisampleProperties_ );
          pMultisampleProperties_ = pMultisampleProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, samples_, pMultisampleProperties_);
  
      pMultisampleProperties__buffer && pMultisampleProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetImageDrmFormatModifierPropertiesEXT = null;
export function vkGetImageDrmFormatModifierPropertiesEXT(device_, image_, pProperties_){
  let fn = __symbol_fn_vkGetImageDrmFormatModifierPropertiesEXT;
  if (fn === null){
    __symbol_fn_vkGetImageDrmFormatModifierPropertiesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageDrmFormatModifierPropertiesEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetImageDrmFormatModifierPropertiesEXT;
    fn = __symbol_fn_vkGetImageDrmFormatModifierPropertiesEXT;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkImageDrmFormatModifierPropertiesEXT_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateValidationCacheEXT = null;
export function vkCreateValidationCacheEXT(device_, pCreateInfo_, pAllocator_, pValidationCache_){
  let fn = __symbol_fn_vkCreateValidationCacheEXT;
  if (fn === null){
    __symbol_fn_vkCreateValidationCacheEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateValidationCacheEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateValidationCacheEXT;
    fn = __symbol_fn_vkCreateValidationCacheEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkValidationCacheCreateInfoEXT_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pValidationCache_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyValidationCacheEXT = null;
export function vkDestroyValidationCacheEXT(device_, validationCache_, pAllocator_){
  let fn = __symbol_fn_vkDestroyValidationCacheEXT;
  if (fn === null){
    __symbol_fn_vkDestroyValidationCacheEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyValidationCacheEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyValidationCacheEXT;
    fn = __symbol_fn_vkDestroyValidationCacheEXT;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, validationCache_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkMergeValidationCachesEXT = null;
export function vkMergeValidationCachesEXT(device_, dstCache_, srcCacheCount_, pSrcCaches_){
  let fn = __symbol_fn_vkMergeValidationCachesEXT;
  if (fn === null){
    __symbol_fn_vkMergeValidationCachesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkMergeValidationCachesEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkMergeValidationCachesEXT;
    fn = __symbol_fn_vkMergeValidationCachesEXT;
  }
  
  const ___ret =  fn(device_, dstCache_, srcCacheCount_, pSrcCaches_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetValidationCacheDataEXT = null;
export function vkGetValidationCacheDataEXT(device_, validationCache_, pDataSize_, pData_){
  let fn = __symbol_fn_vkGetValidationCacheDataEXT;
  if (fn === null){
    __symbol_fn_vkGetValidationCacheDataEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetValidationCacheDataEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetValidationCacheDataEXT;
    fn = __symbol_fn_vkGetValidationCacheDataEXT;
  }
  
  const ___ret =  fn(device_, validationCache_, pDataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindShadingRateImageNV = null;
export function vkCmdBindShadingRateImageNV(commandBuffer_, imageView_, imageLayout_){
  let fn = __symbol_fn_vkCmdBindShadingRateImageNV;
  if (fn === null){
    __symbol_fn_vkCmdBindShadingRateImageNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindShadingRateImageNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindShadingRateImageNV;
    fn = __symbol_fn_vkCmdBindShadingRateImageNV;
  }
  
  const ___ret =  fn(commandBuffer_, imageView_, imageLayout_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetViewportShadingRatePaletteNV = null;
export function vkCmdSetViewportShadingRatePaletteNV(commandBuffer_, firstViewport_, viewportCount_, pShadingRatePalettes_){
  let fn = __symbol_fn_vkCmdSetViewportShadingRatePaletteNV;
  if (fn === null){
    __symbol_fn_vkCmdSetViewportShadingRatePaletteNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetViewportShadingRatePaletteNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetViewportShadingRatePaletteNV;
    fn = __symbol_fn_vkCmdSetViewportShadingRatePaletteNV;
  }
  
        let pShadingRatePalettes__buffer = null
        if (pShadingRatePalettes_ !== null && typeof pShadingRatePalettes_ === 'object'){
          pShadingRatePalettes__buffer = VkShadingRatePaletteNV_to_C(pShadingRatePalettes_ );
          pShadingRatePalettes_ = pShadingRatePalettes__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstViewport_, viewportCount_, pShadingRatePalettes_);
  
      pShadingRatePalettes__buffer && pShadingRatePalettes__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetCoarseSampleOrderNV = null;
export function vkCmdSetCoarseSampleOrderNV(commandBuffer_, sampleOrderType_, customSampleOrderCount_, pCustomSampleOrders_){
  let fn = __symbol_fn_vkCmdSetCoarseSampleOrderNV;
  if (fn === null){
    __symbol_fn_vkCmdSetCoarseSampleOrderNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetCoarseSampleOrderNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetCoarseSampleOrderNV;
    fn = __symbol_fn_vkCmdSetCoarseSampleOrderNV;
  }
  
        let pCustomSampleOrders__buffer = null
        if (pCustomSampleOrders_ !== null && typeof pCustomSampleOrders_ === 'object'){
          pCustomSampleOrders__buffer = VkCoarseSampleOrderCustomNV_to_C(pCustomSampleOrders_ );
          pCustomSampleOrders_ = pCustomSampleOrders__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, sampleOrderType_, customSampleOrderCount_, pCustomSampleOrders_);
  
      pCustomSampleOrders__buffer && pCustomSampleOrders__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateAccelerationStructureNV = null;
export function vkCreateAccelerationStructureNV(device_, pCreateInfo_, pAllocator_, pAccelerationStructure_){
  let fn = __symbol_fn_vkCreateAccelerationStructureNV;
  if (fn === null){
    __symbol_fn_vkCreateAccelerationStructureNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateAccelerationStructureNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateAccelerationStructureNV;
    fn = __symbol_fn_vkCreateAccelerationStructureNV;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkAccelerationStructureCreateInfoNV_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pAccelerationStructure_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyAccelerationStructureNV = null;
export function vkDestroyAccelerationStructureNV(device_, accelerationStructure_, pAllocator_){
  let fn = __symbol_fn_vkDestroyAccelerationStructureNV;
  if (fn === null){
    __symbol_fn_vkDestroyAccelerationStructureNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyAccelerationStructureNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyAccelerationStructureNV;
    fn = __symbol_fn_vkDestroyAccelerationStructureNV;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, accelerationStructure_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetAccelerationStructureMemoryRequirementsNV = null;
export function vkGetAccelerationStructureMemoryRequirementsNV(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetAccelerationStructureMemoryRequirementsNV;
  if (fn === null){
    __symbol_fn_vkGetAccelerationStructureMemoryRequirementsNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetAccelerationStructureMemoryRequirementsNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetAccelerationStructureMemoryRequirementsNV;
    fn = __symbol_fn_vkGetAccelerationStructureMemoryRequirementsNV;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkAccelerationStructureMemoryRequirementsInfoNV_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkBindAccelerationStructureMemoryNV = null;
export function vkBindAccelerationStructureMemoryNV(device_, bindInfoCount_, pBindInfos_){
  let fn = __symbol_fn_vkBindAccelerationStructureMemoryNV;
  if (fn === null){
    __symbol_fn_vkBindAccelerationStructureMemoryNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBindAccelerationStructureMemoryNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBindAccelerationStructureMemoryNV;
    fn = __symbol_fn_vkBindAccelerationStructureMemoryNV;
  }
  
        let pBindInfos__buffer = null
        if (pBindInfos_ !== null && typeof pBindInfos_ === 'object'){
          pBindInfos__buffer = VkBindAccelerationStructureMemoryInfoNV_to_C(pBindInfos_ );
          pBindInfos_ = pBindInfos__buffer.ptr;
}
  const ___ret =  fn(device_, bindInfoCount_, pBindInfos_);
  
      pBindInfos__buffer && pBindInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBuildAccelerationStructureNV = null;
export function vkCmdBuildAccelerationStructureNV(commandBuffer_, pInfo_, instanceData_, instanceOffset_, update_, dst_, src_, scratch_, scratchOffset_){
  let fn = __symbol_fn_vkCmdBuildAccelerationStructureNV;
  if (fn === null){
    __symbol_fn_vkCmdBuildAccelerationStructureNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBuildAccelerationStructureNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdBuildAccelerationStructureNV;
    fn = __symbol_fn_vkCmdBuildAccelerationStructureNV;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkAccelerationStructureInfoNV_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pInfo_, instanceData_, instanceOffset_, update_, dst_, src_, scratch_, scratchOffset_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyAccelerationStructureNV = null;
export function vkCmdCopyAccelerationStructureNV(commandBuffer_, dst_, src_, mode_){
  let fn = __symbol_fn_vkCmdCopyAccelerationStructureNV;
  if (fn === null){
    __symbol_fn_vkCmdCopyAccelerationStructureNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyAccelerationStructureNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyAccelerationStructureNV;
    fn = __symbol_fn_vkCmdCopyAccelerationStructureNV;
  }
  
  const ___ret =  fn(commandBuffer_, dst_, src_, mode_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdTraceRaysNV = null;
export function vkCmdTraceRaysNV(commandBuffer_, raygenShaderBindingTableBuffer_, raygenShaderBindingOffset_, missShaderBindingTableBuffer_, missShaderBindingOffset_, missShaderBindingStride_, hitShaderBindingTableBuffer_, hitShaderBindingOffset_, hitShaderBindingStride_, callableShaderBindingTableBuffer_, callableShaderBindingOffset_, callableShaderBindingStride_, width_, height_, depth_){
  let fn = __symbol_fn_vkCmdTraceRaysNV;
  if (fn === null){
    __symbol_fn_vkCmdTraceRaysNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdTraceRaysNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdTraceRaysNV;
    fn = __symbol_fn_vkCmdTraceRaysNV;
  }
  
  const ___ret =  fn(commandBuffer_, raygenShaderBindingTableBuffer_, raygenShaderBindingOffset_, missShaderBindingTableBuffer_, missShaderBindingOffset_, missShaderBindingStride_, hitShaderBindingTableBuffer_, hitShaderBindingOffset_, hitShaderBindingStride_, callableShaderBindingTableBuffer_, callableShaderBindingOffset_, callableShaderBindingStride_, width_, height_, depth_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateRayTracingPipelinesNV = null;
export function vkCreateRayTracingPipelinesNV(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_){
  let fn = __symbol_fn_vkCreateRayTracingPipelinesNV;
  if (fn === null){
    __symbol_fn_vkCreateRayTracingPipelinesNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateRayTracingPipelinesNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateRayTracingPipelinesNV;
    fn = __symbol_fn_vkCreateRayTracingPipelinesNV;
  }
  
        let pCreateInfos__buffer = null
        if (pCreateInfos_ !== null && typeof pCreateInfos_ === 'object'){
          pCreateInfos__buffer = VkRayTracingPipelineCreateInfoNV_to_C(pCreateInfos_ );
          pCreateInfos_ = pCreateInfos__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_);
  
      pCreateInfos__buffer && pCreateInfos__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetRayTracingShaderGroupHandlesKHR = null;
export function vkGetRayTracingShaderGroupHandlesKHR(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_){
  let fn = __symbol_fn_vkGetRayTracingShaderGroupHandlesKHR;
  if (fn === null){
    __symbol_fn_vkGetRayTracingShaderGroupHandlesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRayTracingShaderGroupHandlesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetRayTracingShaderGroupHandlesKHR;
    fn = __symbol_fn_vkGetRayTracingShaderGroupHandlesKHR;
  }
  
  const ___ret =  fn(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetRayTracingShaderGroupHandlesNV = null;
export function vkGetRayTracingShaderGroupHandlesNV(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_){
  let fn = __symbol_fn_vkGetRayTracingShaderGroupHandlesNV;
  if (fn === null){
    __symbol_fn_vkGetRayTracingShaderGroupHandlesNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRayTracingShaderGroupHandlesNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetRayTracingShaderGroupHandlesNV;
    fn = __symbol_fn_vkGetRayTracingShaderGroupHandlesNV;
  }
  
  const ___ret =  fn(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetAccelerationStructureHandleNV = null;
export function vkGetAccelerationStructureHandleNV(device_, accelerationStructure_, dataSize_, pData_){
  let fn = __symbol_fn_vkGetAccelerationStructureHandleNV;
  if (fn === null){
    __symbol_fn_vkGetAccelerationStructureHandleNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetAccelerationStructureHandleNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetAccelerationStructureHandleNV;
    fn = __symbol_fn_vkGetAccelerationStructureHandleNV;
  }
  
  const ___ret =  fn(device_, accelerationStructure_, dataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesNV = null;
export function vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer_, accelerationStructureCount_, pAccelerationStructures_, queryType_, queryPool_, firstQuery_){
  let fn = __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesNV;
  if (fn === null){
    __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteAccelerationStructuresPropertiesNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteAccelerationStructuresPropertiesNV;
    fn = __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesNV;
  }
  
  const ___ret =  fn(commandBuffer_, accelerationStructureCount_, pAccelerationStructures_, queryType_, queryPool_, firstQuery_);
  
  return ___ret;
}
  
let __symbol_fn_vkCompileDeferredNV = null;
export function vkCompileDeferredNV(device_, pipeline_, shader_){
  let fn = __symbol_fn_vkCompileDeferredNV;
  if (fn === null){
    __symbol_fn_vkCompileDeferredNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCompileDeferredNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u32
    }}).symbols.vkCompileDeferredNV;
    fn = __symbol_fn_vkCompileDeferredNV;
  }
  
  const ___ret =  fn(device_, pipeline_, shader_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetMemoryHostPointerPropertiesEXT = null;
export function vkGetMemoryHostPointerPropertiesEXT(device_, handleType_, pHostPointer_, pMemoryHostPointerProperties_){
  let fn = __symbol_fn_vkGetMemoryHostPointerPropertiesEXT;
  if (fn === null){
    __symbol_fn_vkGetMemoryHostPointerPropertiesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetMemoryHostPointerPropertiesEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetMemoryHostPointerPropertiesEXT;
    fn = __symbol_fn_vkGetMemoryHostPointerPropertiesEXT;
  }
  
        let pMemoryHostPointerProperties__buffer = null
        if (pMemoryHostPointerProperties_ !== null && typeof pMemoryHostPointerProperties_ === 'object'){
          pMemoryHostPointerProperties__buffer = VkMemoryHostPointerPropertiesEXT_to_C(pMemoryHostPointerProperties_ );
          pMemoryHostPointerProperties_ = pMemoryHostPointerProperties__buffer.ptr;
}
  const ___ret =  fn(device_, handleType_, pHostPointer_, pMemoryHostPointerProperties_);
  
      pMemoryHostPointerProperties__buffer && pMemoryHostPointerProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteBufferMarkerAMD = null;
export function vkCmdWriteBufferMarkerAMD(commandBuffer_, pipelineStage_, dstBuffer_, dstOffset_, marker_){
  let fn = __symbol_fn_vkCmdWriteBufferMarkerAMD;
  if (fn === null){
    __symbol_fn_vkCmdWriteBufferMarkerAMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteBufferMarkerAMD: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteBufferMarkerAMD;
    fn = __symbol_fn_vkCmdWriteBufferMarkerAMD;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineStage_, dstBuffer_, dstOffset_, marker_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = null;
export function vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice_, pTimeDomainCount_, pTimeDomains_){
  let fn = __symbol_fn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceCalibrateableTimeDomainsEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
    fn = __symbol_fn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
  }
  
  const ___ret =  fn(physicalDevice_, pTimeDomainCount_, pTimeDomains_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetCalibratedTimestampsEXT = null;
export function vkGetCalibratedTimestampsEXT(device_, timestampCount_, pTimestampInfos_, pTimestamps_, pMaxDeviation_){
  let fn = __symbol_fn_vkGetCalibratedTimestampsEXT;
  if (fn === null){
    __symbol_fn_vkGetCalibratedTimestampsEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetCalibratedTimestampsEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetCalibratedTimestampsEXT;
    fn = __symbol_fn_vkGetCalibratedTimestampsEXT;
  }
  
        let pTimestampInfos__buffer = null
        if (pTimestampInfos_ !== null && typeof pTimestampInfos_ === 'object'){
          pTimestampInfos__buffer = VkCalibratedTimestampInfoEXT_to_C(pTimestampInfos_ );
          pTimestampInfos_ = pTimestampInfos__buffer.ptr;
}
  const ___ret =  fn(device_, timestampCount_, pTimestampInfos_, pTimestamps_, pMaxDeviation_);
  
      pTimestampInfos__buffer && pTimestampInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawMeshTasksNV = null;
export function vkCmdDrawMeshTasksNV(commandBuffer_, taskCount_, firstTask_){
  let fn = __symbol_fn_vkCmdDrawMeshTasksNV;
  if (fn === null){
    __symbol_fn_vkCmdDrawMeshTasksNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawMeshTasksNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawMeshTasksNV;
    fn = __symbol_fn_vkCmdDrawMeshTasksNV;
  }
  
  const ___ret =  fn(commandBuffer_, taskCount_, firstTask_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawMeshTasksIndirectNV = null;
export function vkCmdDrawMeshTasksIndirectNV(commandBuffer_, buffer_, offset_, drawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawMeshTasksIndirectNV;
  if (fn === null){
    __symbol_fn_vkCmdDrawMeshTasksIndirectNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawMeshTasksIndirectNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawMeshTasksIndirectNV;
    fn = __symbol_fn_vkCmdDrawMeshTasksIndirectNV;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, drawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawMeshTasksIndirectCountNV = null;
export function vkCmdDrawMeshTasksIndirectCountNV(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_){
  let fn = __symbol_fn_vkCmdDrawMeshTasksIndirectCountNV;
  if (fn === null){
    __symbol_fn_vkCmdDrawMeshTasksIndirectCountNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawMeshTasksIndirectCountNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawMeshTasksIndirectCountNV;
    fn = __symbol_fn_vkCmdDrawMeshTasksIndirectCountNV;
  }
  
  const ___ret =  fn(commandBuffer_, buffer_, offset_, countBuffer_, countBufferOffset_, maxDrawCount_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetExclusiveScissorNV = null;
export function vkCmdSetExclusiveScissorNV(commandBuffer_, firstExclusiveScissor_, exclusiveScissorCount_, pExclusiveScissors_){
  let fn = __symbol_fn_vkCmdSetExclusiveScissorNV;
  if (fn === null){
    __symbol_fn_vkCmdSetExclusiveScissorNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetExclusiveScissorNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetExclusiveScissorNV;
    fn = __symbol_fn_vkCmdSetExclusiveScissorNV;
  }
  
        let pExclusiveScissors__buffer = null
        if (pExclusiveScissors_ !== null && typeof pExclusiveScissors_ === 'object'){
          pExclusiveScissors__buffer = VkRect2D_to_C(pExclusiveScissors_ );
          pExclusiveScissors_ = pExclusiveScissors__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, firstExclusiveScissor_, exclusiveScissorCount_, pExclusiveScissors_);
  
      pExclusiveScissors__buffer && pExclusiveScissors__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetCheckpointNV = null;
export function vkCmdSetCheckpointNV(commandBuffer_, pCheckpointMarker_){
  let fn = __symbol_fn_vkCmdSetCheckpointNV;
  if (fn === null){
    __symbol_fn_vkCmdSetCheckpointNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetCheckpointNV: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetCheckpointNV;
    fn = __symbol_fn_vkCmdSetCheckpointNV;
  }
  
  const ___ret =  fn(commandBuffer_, pCheckpointMarker_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetQueueCheckpointDataNV = null;
export function vkGetQueueCheckpointDataNV(queue_, pCheckpointDataCount_, pCheckpointData_){
  let fn = __symbol_fn_vkGetQueueCheckpointDataNV;
  if (fn === null){
    __symbol_fn_vkGetQueueCheckpointDataNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetQueueCheckpointDataNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetQueueCheckpointDataNV;
    fn = __symbol_fn_vkGetQueueCheckpointDataNV;
  }
  
        let pCheckpointData__buffer = null
        if (pCheckpointData_ !== null && typeof pCheckpointData_ === 'object'){
          pCheckpointData__buffer = VkCheckpointDataNV_to_C(pCheckpointData_ );
          pCheckpointData_ = pCheckpointData__buffer.ptr;
}
  const ___ret =  fn(queue_, pCheckpointDataCount_, pCheckpointData_);
  
      pCheckpointData__buffer && pCheckpointData__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkInitializePerformanceApiINTEL = null;
export function vkInitializePerformanceApiINTEL(device_, pInitializeInfo_){
  let fn = __symbol_fn_vkInitializePerformanceApiINTEL;
  if (fn === null){
    __symbol_fn_vkInitializePerformanceApiINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkInitializePerformanceApiINTEL: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkInitializePerformanceApiINTEL;
    fn = __symbol_fn_vkInitializePerformanceApiINTEL;
  }
  
        let pInitializeInfo__buffer = null
        if (pInitializeInfo_ !== null && typeof pInitializeInfo_ === 'object'){
          pInitializeInfo__buffer = VkInitializePerformanceApiInfoINTEL_to_C(pInitializeInfo_ );
          pInitializeInfo_ = pInitializeInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInitializeInfo_);
  
      pInitializeInfo__buffer && pInitializeInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkUninitializePerformanceApiINTEL = null;
export function vkUninitializePerformanceApiINTEL(device_){
  let fn = __symbol_fn_vkUninitializePerformanceApiINTEL;
  if (fn === null){
    __symbol_fn_vkUninitializePerformanceApiINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkUninitializePerformanceApiINTEL: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkUninitializePerformanceApiINTEL;
    fn = __symbol_fn_vkUninitializePerformanceApiINTEL;
  }
  
  const ___ret =  fn(device_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPerformanceMarkerINTEL = null;
export function vkCmdSetPerformanceMarkerINTEL(commandBuffer_, pMarkerInfo_){
  let fn = __symbol_fn_vkCmdSetPerformanceMarkerINTEL;
  if (fn === null){
    __symbol_fn_vkCmdSetPerformanceMarkerINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPerformanceMarkerINTEL: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCmdSetPerformanceMarkerINTEL;
    fn = __symbol_fn_vkCmdSetPerformanceMarkerINTEL;
  }
  
        let pMarkerInfo__buffer = null
        if (pMarkerInfo_ !== null && typeof pMarkerInfo_ === 'object'){
          pMarkerInfo__buffer = VkPerformanceMarkerInfoINTEL_to_C(pMarkerInfo_ );
          pMarkerInfo_ = pMarkerInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pMarkerInfo_);
  
      pMarkerInfo__buffer && pMarkerInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPerformanceStreamMarkerINTEL = null;
export function vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer_, pMarkerInfo_){
  let fn = __symbol_fn_vkCmdSetPerformanceStreamMarkerINTEL;
  if (fn === null){
    __symbol_fn_vkCmdSetPerformanceStreamMarkerINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPerformanceStreamMarkerINTEL: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCmdSetPerformanceStreamMarkerINTEL;
    fn = __symbol_fn_vkCmdSetPerformanceStreamMarkerINTEL;
  }
  
        let pMarkerInfo__buffer = null
        if (pMarkerInfo_ !== null && typeof pMarkerInfo_ === 'object'){
          pMarkerInfo__buffer = VkPerformanceStreamMarkerInfoINTEL_to_C(pMarkerInfo_ );
          pMarkerInfo_ = pMarkerInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pMarkerInfo_);
  
      pMarkerInfo__buffer && pMarkerInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPerformanceOverrideINTEL = null;
export function vkCmdSetPerformanceOverrideINTEL(commandBuffer_, pOverrideInfo_){
  let fn = __symbol_fn_vkCmdSetPerformanceOverrideINTEL;
  if (fn === null){
    __symbol_fn_vkCmdSetPerformanceOverrideINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPerformanceOverrideINTEL: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCmdSetPerformanceOverrideINTEL;
    fn = __symbol_fn_vkCmdSetPerformanceOverrideINTEL;
  }
  
        let pOverrideInfo__buffer = null
        if (pOverrideInfo_ !== null && typeof pOverrideInfo_ === 'object'){
          pOverrideInfo__buffer = VkPerformanceOverrideInfoINTEL_to_C(pOverrideInfo_ );
          pOverrideInfo_ = pOverrideInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pOverrideInfo_);
  
      pOverrideInfo__buffer && pOverrideInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkAcquirePerformanceConfigurationINTEL = null;
export function vkAcquirePerformanceConfigurationINTEL(device_, pAcquireInfo_, pConfiguration_){
  let fn = __symbol_fn_vkAcquirePerformanceConfigurationINTEL;
  if (fn === null){
    __symbol_fn_vkAcquirePerformanceConfigurationINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquirePerformanceConfigurationINTEL: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkAcquirePerformanceConfigurationINTEL;
    fn = __symbol_fn_vkAcquirePerformanceConfigurationINTEL;
  }
  
        let pAcquireInfo__buffer = null
        if (pAcquireInfo_ !== null && typeof pAcquireInfo_ === 'object'){
          pAcquireInfo__buffer = VkPerformanceConfigurationAcquireInfoINTEL_to_C(pAcquireInfo_ );
          pAcquireInfo_ = pAcquireInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pAcquireInfo_, pConfiguration_);
  
      pAcquireInfo__buffer && pAcquireInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkReleasePerformanceConfigurationINTEL = null;
export function vkReleasePerformanceConfigurationINTEL(device_, configuration_){
  let fn = __symbol_fn_vkReleasePerformanceConfigurationINTEL;
  if (fn === null){
    __symbol_fn_vkReleasePerformanceConfigurationINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkReleasePerformanceConfigurationINTEL: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkReleasePerformanceConfigurationINTEL;
    fn = __symbol_fn_vkReleasePerformanceConfigurationINTEL;
  }
  
  const ___ret =  fn(device_, configuration_);
  
  return ___ret;
}
  
let __symbol_fn_vkQueueSetPerformanceConfigurationINTEL = null;
export function vkQueueSetPerformanceConfigurationINTEL(queue_, configuration_){
  let fn = __symbol_fn_vkQueueSetPerformanceConfigurationINTEL;
  if (fn === null){
    __symbol_fn_vkQueueSetPerformanceConfigurationINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkQueueSetPerformanceConfigurationINTEL: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkQueueSetPerformanceConfigurationINTEL;
    fn = __symbol_fn_vkQueueSetPerformanceConfigurationINTEL;
  }
  
  const ___ret =  fn(queue_, configuration_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPerformanceParameterINTEL = null;
export function vkGetPerformanceParameterINTEL(device_, parameter_, pValue_){
  let fn = __symbol_fn_vkGetPerformanceParameterINTEL;
  if (fn === null){
    __symbol_fn_vkGetPerformanceParameterINTEL = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPerformanceParameterINTEL: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPerformanceParameterINTEL;
    fn = __symbol_fn_vkGetPerformanceParameterINTEL;
  }
  
        let pValue__buffer = null
        if (pValue_ !== null && typeof pValue_ === 'object'){
          pValue__buffer = VkPerformanceValueINTEL_to_C(pValue_ );
          pValue_ = pValue__buffer.ptr;
}
  const ___ret =  fn(device_, parameter_, pValue_);
  
      pValue__buffer && pValue__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetLocalDimmingAMD = null;
export function vkSetLocalDimmingAMD(device_, swapChain_, localDimmingEnable_){
  let fn = __symbol_fn_vkSetLocalDimmingAMD;
  if (fn === null){
    __symbol_fn_vkSetLocalDimmingAMD = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetLocalDimmingAMD: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkSetLocalDimmingAMD;
    fn = __symbol_fn_vkSetLocalDimmingAMD;
  }
  
  const ___ret =  fn(device_, swapChain_, localDimmingEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetBufferDeviceAddressEXT = null;
export function vkGetBufferDeviceAddressEXT(device_, pInfo_){
  let fn = __symbol_fn_vkGetBufferDeviceAddressEXT;
  if (fn === null){
    __symbol_fn_vkGetBufferDeviceAddressEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetBufferDeviceAddressEXT: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetBufferDeviceAddressEXT;
    fn = __symbol_fn_vkGetBufferDeviceAddressEXT;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkBufferDeviceAddressInfo_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceToolPropertiesEXT = null;
export function vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice_, pToolCount_, pToolProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceToolPropertiesEXT;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceToolPropertiesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceToolPropertiesEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceToolPropertiesEXT;
    fn = __symbol_fn_vkGetPhysicalDeviceToolPropertiesEXT;
  }
  
        let pToolProperties__buffer = null
        if (pToolProperties_ !== null && typeof pToolProperties_ === 'object'){
          pToolProperties__buffer = VkPhysicalDeviceToolProperties_to_C(pToolProperties_ );
          pToolProperties_ = pToolProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pToolCount_, pToolProperties_);
  
      pToolProperties__buffer && pToolProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = null;
export function vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice_, pPropertyCount_, pProperties_){
  let fn = __symbol_fn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
    fn = __symbol_fn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkCooperativeMatrixPropertiesNV_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pPropertyCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = null;
export function vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice_, pCombinationCount_, pCombinations_){
  let fn = __symbol_fn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
  if (fn === null){
    __symbol_fn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
    fn = __symbol_fn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
  }
  
        let pCombinations__buffer = null
        if (pCombinations_ !== null && typeof pCombinations_ === 'object'){
          pCombinations__buffer = VkFramebufferMixedSamplesCombinationNV_to_C(pCombinations_ );
          pCombinations_ = pCombinations__buffer.ptr;
}
  const ___ret =  fn(physicalDevice_, pCombinationCount_, pCombinations_);
  
      pCombinations__buffer && pCombinations__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateHeadlessSurfaceEXT = null;
export function vkCreateHeadlessSurfaceEXT(instance_, pCreateInfo_, pAllocator_, pSurface_){
  let fn = __symbol_fn_vkCreateHeadlessSurfaceEXT;
  if (fn === null){
    __symbol_fn_vkCreateHeadlessSurfaceEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateHeadlessSurfaceEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateHeadlessSurfaceEXT;
    fn = __symbol_fn_vkCreateHeadlessSurfaceEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkHeadlessSurfaceCreateInfoEXT_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(instance_, pCreateInfo_, pAllocator_, pSurface_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetLineStippleEXT = null;
export function vkCmdSetLineStippleEXT(commandBuffer_, lineStippleFactor_, lineStipplePattern_){
  let fn = __symbol_fn_vkCmdSetLineStippleEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetLineStippleEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetLineStippleEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u16],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetLineStippleEXT;
    fn = __symbol_fn_vkCmdSetLineStippleEXT;
  }
  
  const ___ret =  fn(commandBuffer_, lineStippleFactor_, lineStipplePattern_);
  
  return ___ret;
}
  
let __symbol_fn_vkResetQueryPoolEXT = null;
export function vkResetQueryPoolEXT(device_, queryPool_, firstQuery_, queryCount_){
  let fn = __symbol_fn_vkResetQueryPoolEXT;
  if (fn === null){
    __symbol_fn_vkResetQueryPoolEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkResetQueryPoolEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkResetQueryPoolEXT;
    fn = __symbol_fn_vkResetQueryPoolEXT;
  }
  
  const ___ret =  fn(device_, queryPool_, firstQuery_, queryCount_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetCullModeEXT = null;
export function vkCmdSetCullModeEXT(commandBuffer_, cullMode_){
  let fn = __symbol_fn_vkCmdSetCullModeEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetCullModeEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetCullModeEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetCullModeEXT;
    fn = __symbol_fn_vkCmdSetCullModeEXT;
  }
  
  const ___ret =  fn(commandBuffer_, cullMode_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetFrontFaceEXT = null;
export function vkCmdSetFrontFaceEXT(commandBuffer_, frontFace_){
  let fn = __symbol_fn_vkCmdSetFrontFaceEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetFrontFaceEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetFrontFaceEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetFrontFaceEXT;
    fn = __symbol_fn_vkCmdSetFrontFaceEXT;
  }
  
  const ___ret =  fn(commandBuffer_, frontFace_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPrimitiveTopologyEXT = null;
export function vkCmdSetPrimitiveTopologyEXT(commandBuffer_, primitiveTopology_){
  let fn = __symbol_fn_vkCmdSetPrimitiveTopologyEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetPrimitiveTopologyEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPrimitiveTopologyEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetPrimitiveTopologyEXT;
    fn = __symbol_fn_vkCmdSetPrimitiveTopologyEXT;
  }
  
  const ___ret =  fn(commandBuffer_, primitiveTopology_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetViewportWithCountEXT = null;
export function vkCmdSetViewportWithCountEXT(commandBuffer_, viewportCount_, pViewports_){
  let fn = __symbol_fn_vkCmdSetViewportWithCountEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetViewportWithCountEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetViewportWithCountEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetViewportWithCountEXT;
    fn = __symbol_fn_vkCmdSetViewportWithCountEXT;
  }
  
        let pViewports__buffer = null
        if (pViewports_ !== null && typeof pViewports_ === 'object'){
          pViewports__buffer = VkViewport_to_C(pViewports_ );
          pViewports_ = pViewports__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, viewportCount_, pViewports_);
  
      pViewports__buffer && pViewports__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetScissorWithCountEXT = null;
export function vkCmdSetScissorWithCountEXT(commandBuffer_, scissorCount_, pScissors_){
  let fn = __symbol_fn_vkCmdSetScissorWithCountEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetScissorWithCountEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetScissorWithCountEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetScissorWithCountEXT;
    fn = __symbol_fn_vkCmdSetScissorWithCountEXT;
  }
  
        let pScissors__buffer = null
        if (pScissors_ !== null && typeof pScissors_ === 'object'){
          pScissors__buffer = VkRect2D_to_C(pScissors_ );
          pScissors_ = pScissors__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, scissorCount_, pScissors_);
  
      pScissors__buffer && pScissors__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBindVertexBuffers2EXT = null;
export function vkCmdBindVertexBuffers2EXT(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_, pStrides_){
  let fn = __symbol_fn_vkCmdBindVertexBuffers2EXT;
  if (fn === null){
    __symbol_fn_vkCmdBindVertexBuffers2EXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindVertexBuffers2EXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindVertexBuffers2EXT;
    fn = __symbol_fn_vkCmdBindVertexBuffers2EXT;
  }
  
  const ___ret =  fn(commandBuffer_, firstBinding_, bindingCount_, pBuffers_, pOffsets_, pSizes_, pStrides_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthTestEnableEXT = null;
export function vkCmdSetDepthTestEnableEXT(commandBuffer_, depthTestEnable_){
  let fn = __symbol_fn_vkCmdSetDepthTestEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthTestEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthTestEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthTestEnableEXT;
    fn = __symbol_fn_vkCmdSetDepthTestEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, depthTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthWriteEnableEXT = null;
export function vkCmdSetDepthWriteEnableEXT(commandBuffer_, depthWriteEnable_){
  let fn = __symbol_fn_vkCmdSetDepthWriteEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthWriteEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthWriteEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthWriteEnableEXT;
    fn = __symbol_fn_vkCmdSetDepthWriteEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, depthWriteEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthCompareOpEXT = null;
export function vkCmdSetDepthCompareOpEXT(commandBuffer_, depthCompareOp_){
  let fn = __symbol_fn_vkCmdSetDepthCompareOpEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthCompareOpEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthCompareOpEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthCompareOpEXT;
    fn = __symbol_fn_vkCmdSetDepthCompareOpEXT;
  }
  
  const ___ret =  fn(commandBuffer_, depthCompareOp_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBoundsTestEnableEXT = null;
export function vkCmdSetDepthBoundsTestEnableEXT(commandBuffer_, depthBoundsTestEnable_){
  let fn = __symbol_fn_vkCmdSetDepthBoundsTestEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBoundsTestEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBoundsTestEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBoundsTestEnableEXT;
    fn = __symbol_fn_vkCmdSetDepthBoundsTestEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, depthBoundsTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilTestEnableEXT = null;
export function vkCmdSetStencilTestEnableEXT(commandBuffer_, stencilTestEnable_){
  let fn = __symbol_fn_vkCmdSetStencilTestEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilTestEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilTestEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilTestEnableEXT;
    fn = __symbol_fn_vkCmdSetStencilTestEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, stencilTestEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetStencilOpEXT = null;
export function vkCmdSetStencilOpEXT(commandBuffer_, faceMask_, failOp_, passOp_, depthFailOp_, compareOp_){
  let fn = __symbol_fn_vkCmdSetStencilOpEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetStencilOpEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetStencilOpEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetStencilOpEXT;
    fn = __symbol_fn_vkCmdSetStencilOpEXT;
  }
  
  const ___ret =  fn(commandBuffer_, faceMask_, failOp_, passOp_, depthFailOp_, compareOp_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetGeneratedCommandsMemoryRequirementsNV = null;
export function vkGetGeneratedCommandsMemoryRequirementsNV(device_, pInfo_, pMemoryRequirements_){
  let fn = __symbol_fn_vkGetGeneratedCommandsMemoryRequirementsNV;
  if (fn === null){
    __symbol_fn_vkGetGeneratedCommandsMemoryRequirementsNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetGeneratedCommandsMemoryRequirementsNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetGeneratedCommandsMemoryRequirementsNV;
    fn = __symbol_fn_vkGetGeneratedCommandsMemoryRequirementsNV;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkGeneratedCommandsMemoryRequirementsInfoNV_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
        let pMemoryRequirements__buffer = null
        if (pMemoryRequirements_ !== null && typeof pMemoryRequirements_ === 'object'){
          pMemoryRequirements__buffer = VkMemoryRequirements2_to_C(pMemoryRequirements_ );
          pMemoryRequirements_ = pMemoryRequirements__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_, pMemoryRequirements_);
  
      pInfo__buffer && pInfo__buffer.free()
      
      pMemoryRequirements__buffer && pMemoryRequirements__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdPreprocessGeneratedCommandsNV = null;
export function vkCmdPreprocessGeneratedCommandsNV(commandBuffer_, pGeneratedCommandsInfo_){
  let fn = __symbol_fn_vkCmdPreprocessGeneratedCommandsNV;
  if (fn === null){
    __symbol_fn_vkCmdPreprocessGeneratedCommandsNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdPreprocessGeneratedCommandsNV: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdPreprocessGeneratedCommandsNV;
    fn = __symbol_fn_vkCmdPreprocessGeneratedCommandsNV;
  }
  
        let pGeneratedCommandsInfo__buffer = null
        if (pGeneratedCommandsInfo_ !== null && typeof pGeneratedCommandsInfo_ === 'object'){
          pGeneratedCommandsInfo__buffer = VkGeneratedCommandsInfoNV_to_C(pGeneratedCommandsInfo_ );
          pGeneratedCommandsInfo_ = pGeneratedCommandsInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pGeneratedCommandsInfo_);
  
      pGeneratedCommandsInfo__buffer && pGeneratedCommandsInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdExecuteGeneratedCommandsNV = null;
export function vkCmdExecuteGeneratedCommandsNV(commandBuffer_, isPreprocessed_, pGeneratedCommandsInfo_){
  let fn = __symbol_fn_vkCmdExecuteGeneratedCommandsNV;
  if (fn === null){
    __symbol_fn_vkCmdExecuteGeneratedCommandsNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdExecuteGeneratedCommandsNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdExecuteGeneratedCommandsNV;
    fn = __symbol_fn_vkCmdExecuteGeneratedCommandsNV;
  }
  
        let pGeneratedCommandsInfo__buffer = null
        if (pGeneratedCommandsInfo_ !== null && typeof pGeneratedCommandsInfo_ === 'object'){
          pGeneratedCommandsInfo__buffer = VkGeneratedCommandsInfoNV_to_C(pGeneratedCommandsInfo_ );
          pGeneratedCommandsInfo_ = pGeneratedCommandsInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, isPreprocessed_, pGeneratedCommandsInfo_);
  
      pGeneratedCommandsInfo__buffer && pGeneratedCommandsInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBindPipelineShaderGroupNV = null;
export function vkCmdBindPipelineShaderGroupNV(commandBuffer_, pipelineBindPoint_, pipeline_, groupIndex_){
  let fn = __symbol_fn_vkCmdBindPipelineShaderGroupNV;
  if (fn === null){
    __symbol_fn_vkCmdBindPipelineShaderGroupNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindPipelineShaderGroupNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindPipelineShaderGroupNV;
    fn = __symbol_fn_vkCmdBindPipelineShaderGroupNV;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineBindPoint_, pipeline_, groupIndex_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreateIndirectCommandsLayoutNV = null;
export function vkCreateIndirectCommandsLayoutNV(device_, pCreateInfo_, pAllocator_, pIndirectCommandsLayout_){
  let fn = __symbol_fn_vkCreateIndirectCommandsLayoutNV;
  if (fn === null){
    __symbol_fn_vkCreateIndirectCommandsLayoutNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateIndirectCommandsLayoutNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateIndirectCommandsLayoutNV;
    fn = __symbol_fn_vkCreateIndirectCommandsLayoutNV;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkIndirectCommandsLayoutCreateInfoNV_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pIndirectCommandsLayout_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyIndirectCommandsLayoutNV = null;
export function vkDestroyIndirectCommandsLayoutNV(device_, indirectCommandsLayout_, pAllocator_){
  let fn = __symbol_fn_vkDestroyIndirectCommandsLayoutNV;
  if (fn === null){
    __symbol_fn_vkDestroyIndirectCommandsLayoutNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyIndirectCommandsLayoutNV: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyIndirectCommandsLayoutNV;
    fn = __symbol_fn_vkDestroyIndirectCommandsLayoutNV;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, indirectCommandsLayout_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkAcquireDrmDisplayEXT = null;
export function vkAcquireDrmDisplayEXT(physicalDevice_, drmFd_, display_){
  let fn = __symbol_fn_vkAcquireDrmDisplayEXT;
  if (fn === null){
    __symbol_fn_vkAcquireDrmDisplayEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquireDrmDisplayEXT: {
      args: [FFIType.u64,FFIType.i32,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkAcquireDrmDisplayEXT;
    fn = __symbol_fn_vkAcquireDrmDisplayEXT;
  }
  
  const ___ret =  fn(physicalDevice_, drmFd_, display_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDrmDisplayEXT = null;
export function vkGetDrmDisplayEXT(physicalDevice_, drmFd_, connectorId_, display_){
  let fn = __symbol_fn_vkGetDrmDisplayEXT;
  if (fn === null){
    __symbol_fn_vkGetDrmDisplayEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDrmDisplayEXT: {
      args: [FFIType.u64,FFIType.i32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDrmDisplayEXT;
    fn = __symbol_fn_vkGetDrmDisplayEXT;
  }
  
  const ___ret =  fn(physicalDevice_, drmFd_, connectorId_, display_);
  
  return ___ret;
}
  
let __symbol_fn_vkCreatePrivateDataSlotEXT = null;
export function vkCreatePrivateDataSlotEXT(device_, pCreateInfo_, pAllocator_, pPrivateDataSlot_){
  let fn = __symbol_fn_vkCreatePrivateDataSlotEXT;
  if (fn === null){
    __symbol_fn_vkCreatePrivateDataSlotEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreatePrivateDataSlotEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreatePrivateDataSlotEXT;
    fn = __symbol_fn_vkCreatePrivateDataSlotEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkPrivateDataSlotCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pPrivateDataSlot_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyPrivateDataSlotEXT = null;
export function vkDestroyPrivateDataSlotEXT(device_, privateDataSlot_, pAllocator_){
  let fn = __symbol_fn_vkDestroyPrivateDataSlotEXT;
  if (fn === null){
    __symbol_fn_vkDestroyPrivateDataSlotEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyPrivateDataSlotEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyPrivateDataSlotEXT;
    fn = __symbol_fn_vkDestroyPrivateDataSlotEXT;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, privateDataSlot_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetPrivateDataEXT = null;
export function vkSetPrivateDataEXT(device_, objectType_, objectHandle_, privateDataSlot_, data_){
  let fn = __symbol_fn_vkSetPrivateDataEXT;
  if (fn === null){
    __symbol_fn_vkSetPrivateDataEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetPrivateDataEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkSetPrivateDataEXT;
    fn = __symbol_fn_vkSetPrivateDataEXT;
  }
  
  const ___ret =  fn(device_, objectType_, objectHandle_, privateDataSlot_, data_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetPrivateDataEXT = null;
export function vkGetPrivateDataEXT(device_, objectType_, objectHandle_, privateDataSlot_, pData_){
  let fn = __symbol_fn_vkGetPrivateDataEXT;
  if (fn === null){
    __symbol_fn_vkGetPrivateDataEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPrivateDataEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetPrivateDataEXT;
    fn = __symbol_fn_vkGetPrivateDataEXT;
  }
  
  const ___ret =  fn(device_, objectType_, objectHandle_, privateDataSlot_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetFragmentShadingRateEnumNV = null;
export function vkCmdSetFragmentShadingRateEnumNV(commandBuffer_, shadingRate_, combinerOps_){
  let fn = __symbol_fn_vkCmdSetFragmentShadingRateEnumNV;
  if (fn === null){
    __symbol_fn_vkCmdSetFragmentShadingRateEnumNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetFragmentShadingRateEnumNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetFragmentShadingRateEnumNV;
    fn = __symbol_fn_vkCmdSetFragmentShadingRateEnumNV;
  }
  
  const ___ret =  fn(commandBuffer_, shadingRate_, combinerOps_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetImageSubresourceLayout2EXT = null;
export function vkGetImageSubresourceLayout2EXT(device_, image_, pSubresource_, pLayout_){
  let fn = __symbol_fn_vkGetImageSubresourceLayout2EXT;
  if (fn === null){
    __symbol_fn_vkGetImageSubresourceLayout2EXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetImageSubresourceLayout2EXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetImageSubresourceLayout2EXT;
    fn = __symbol_fn_vkGetImageSubresourceLayout2EXT;
  }
  
        let pSubresource__buffer = null
        if (pSubresource_ !== null && typeof pSubresource_ === 'object'){
          pSubresource__buffer = VkImageSubresource2EXT_to_C(pSubresource_ );
          pSubresource_ = pSubresource__buffer.ptr;
}
        let pLayout__buffer = null
        if (pLayout_ !== null && typeof pLayout_ === 'object'){
          pLayout__buffer = VkSubresourceLayout2EXT_to_C(pLayout_ );
          pLayout_ = pLayout__buffer.ptr;
}
  const ___ret =  fn(device_, image_, pSubresource_, pLayout_);
  
      pSubresource__buffer && pSubresource__buffer.free()
      
      pLayout__buffer && pLayout__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkAcquireWinrtDisplayNV = null;
export function vkAcquireWinrtDisplayNV(physicalDevice_, display_){
  let fn = __symbol_fn_vkAcquireWinrtDisplayNV;
  if (fn === null){
    __symbol_fn_vkAcquireWinrtDisplayNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkAcquireWinrtDisplayNV: {
      args: [FFIType.u64,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkAcquireWinrtDisplayNV;
    fn = __symbol_fn_vkAcquireWinrtDisplayNV;
  }
  
  const ___ret =  fn(physicalDevice_, display_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetWinrtDisplayNV = null;
export function vkGetWinrtDisplayNV(physicalDevice_, deviceRelativeId_, pDisplay_){
  let fn = __symbol_fn_vkGetWinrtDisplayNV;
  if (fn === null){
    __symbol_fn_vkGetWinrtDisplayNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetWinrtDisplayNV: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetWinrtDisplayNV;
    fn = __symbol_fn_vkGetWinrtDisplayNV;
  }
  
  const ___ret =  fn(physicalDevice_, deviceRelativeId_, pDisplay_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetVertexInputEXT = null;
export function vkCmdSetVertexInputEXT(commandBuffer_, vertexBindingDescriptionCount_, pVertexBindingDescriptions_, vertexAttributeDescriptionCount_, pVertexAttributeDescriptions_){
  let fn = __symbol_fn_vkCmdSetVertexInputEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetVertexInputEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetVertexInputEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetVertexInputEXT;
    fn = __symbol_fn_vkCmdSetVertexInputEXT;
  }
  
        let pVertexBindingDescriptions__buffer = null
        if (pVertexBindingDescriptions_ !== null && typeof pVertexBindingDescriptions_ === 'object'){
          pVertexBindingDescriptions__buffer = VkVertexInputBindingDescription2EXT_to_C(pVertexBindingDescriptions_ );
          pVertexBindingDescriptions_ = pVertexBindingDescriptions__buffer.ptr;
}
        let pVertexAttributeDescriptions__buffer = null
        if (pVertexAttributeDescriptions_ !== null && typeof pVertexAttributeDescriptions_ === 'object'){
          pVertexAttributeDescriptions__buffer = VkVertexInputAttributeDescription2EXT_to_C(pVertexAttributeDescriptions_ );
          pVertexAttributeDescriptions_ = pVertexAttributeDescriptions__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, vertexBindingDescriptionCount_, pVertexBindingDescriptions_, vertexAttributeDescriptionCount_, pVertexAttributeDescriptions_);
  
      pVertexBindingDescriptions__buffer && pVertexBindingDescriptions__buffer.free()
      
      pVertexAttributeDescriptions__buffer && pVertexAttributeDescriptions__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null;
export function vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device_, renderpass_, pMaxWorkgroupSize_){
  let fn = __symbol_fn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
  if (fn === null){
    __symbol_fn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
    fn = __symbol_fn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
  }
  
        let pMaxWorkgroupSize__buffer = null
        if (pMaxWorkgroupSize_ !== null && typeof pMaxWorkgroupSize_ === 'object'){
          pMaxWorkgroupSize__buffer = VkExtent2D_to_C(pMaxWorkgroupSize_ );
          pMaxWorkgroupSize_ = pMaxWorkgroupSize__buffer.ptr;
}
  const ___ret =  fn(device_, renderpass_, pMaxWorkgroupSize_);
  
      pMaxWorkgroupSize__buffer && pMaxWorkgroupSize__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSubpassShadingHUAWEI = null;
export function vkCmdSubpassShadingHUAWEI(commandBuffer_){
  let fn = __symbol_fn_vkCmdSubpassShadingHUAWEI;
  if (fn === null){
    __symbol_fn_vkCmdSubpassShadingHUAWEI = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSubpassShadingHUAWEI: {
      args: [FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdSubpassShadingHUAWEI;
    fn = __symbol_fn_vkCmdSubpassShadingHUAWEI;
  }
  
  const ___ret =  fn(commandBuffer_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdBindInvocationMaskHUAWEI = null;
export function vkCmdBindInvocationMaskHUAWEI(commandBuffer_, imageView_, imageLayout_){
  let fn = __symbol_fn_vkCmdBindInvocationMaskHUAWEI;
  if (fn === null){
    __symbol_fn_vkCmdBindInvocationMaskHUAWEI = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBindInvocationMaskHUAWEI: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdBindInvocationMaskHUAWEI;
    fn = __symbol_fn_vkCmdBindInvocationMaskHUAWEI;
  }
  
  const ___ret =  fn(commandBuffer_, imageView_, imageLayout_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetMemoryRemoteAddressNV = null;
export function vkGetMemoryRemoteAddressNV(device_, pMemoryGetRemoteAddressInfo_, pAddress_){
  let fn = __symbol_fn_vkGetMemoryRemoteAddressNV;
  if (fn === null){
    __symbol_fn_vkGetMemoryRemoteAddressNV = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetMemoryRemoteAddressNV: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetMemoryRemoteAddressNV;
    fn = __symbol_fn_vkGetMemoryRemoteAddressNV;
  }
  
        let pMemoryGetRemoteAddressInfo__buffer = null
        if (pMemoryGetRemoteAddressInfo_ !== null && typeof pMemoryGetRemoteAddressInfo_ === 'object'){
          pMemoryGetRemoteAddressInfo__buffer = VkMemoryGetRemoteAddressInfoNV_to_C(pMemoryGetRemoteAddressInfo_ );
          pMemoryGetRemoteAddressInfo_ = pMemoryGetRemoteAddressInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pMemoryGetRemoteAddressInfo_, pAddress_);
  
      pMemoryGetRemoteAddressInfo__buffer && pMemoryGetRemoteAddressInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetPipelinePropertiesEXT = null;
export function vkGetPipelinePropertiesEXT(device_, pPipelineInfo_, pPipelineProperties_){
  let fn = __symbol_fn_vkGetPipelinePropertiesEXT;
  if (fn === null){
    __symbol_fn_vkGetPipelinePropertiesEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetPipelinePropertiesEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetPipelinePropertiesEXT;
    fn = __symbol_fn_vkGetPipelinePropertiesEXT;
  }
  
        let pPipelineProperties__buffer = null
        if (pPipelineProperties_ !== null && typeof pPipelineProperties_ === 'object'){
          pPipelineProperties__buffer = VkBaseOutStructure_to_C(pPipelineProperties_ );
          pPipelineProperties_ = pPipelineProperties__buffer.ptr;
}
  const ___ret =  fn(device_, pPipelineInfo_, pPipelineProperties_);
  
      pPipelineProperties__buffer && pPipelineProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPatchControlPointsEXT = null;
export function vkCmdSetPatchControlPointsEXT(commandBuffer_, patchControlPoints_){
  let fn = __symbol_fn_vkCmdSetPatchControlPointsEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetPatchControlPointsEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPatchControlPointsEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetPatchControlPointsEXT;
    fn = __symbol_fn_vkCmdSetPatchControlPointsEXT;
  }
  
  const ___ret =  fn(commandBuffer_, patchControlPoints_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetRasterizerDiscardEnableEXT = null;
export function vkCmdSetRasterizerDiscardEnableEXT(commandBuffer_, rasterizerDiscardEnable_){
  let fn = __symbol_fn_vkCmdSetRasterizerDiscardEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetRasterizerDiscardEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetRasterizerDiscardEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetRasterizerDiscardEnableEXT;
    fn = __symbol_fn_vkCmdSetRasterizerDiscardEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, rasterizerDiscardEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetDepthBiasEnableEXT = null;
export function vkCmdSetDepthBiasEnableEXT(commandBuffer_, depthBiasEnable_){
  let fn = __symbol_fn_vkCmdSetDepthBiasEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetDepthBiasEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetDepthBiasEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetDepthBiasEnableEXT;
    fn = __symbol_fn_vkCmdSetDepthBiasEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, depthBiasEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetLogicOpEXT = null;
export function vkCmdSetLogicOpEXT(commandBuffer_, logicOp_){
  let fn = __symbol_fn_vkCmdSetLogicOpEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetLogicOpEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetLogicOpEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetLogicOpEXT;
    fn = __symbol_fn_vkCmdSetLogicOpEXT;
  }
  
  const ___ret =  fn(commandBuffer_, logicOp_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetPrimitiveRestartEnableEXT = null;
export function vkCmdSetPrimitiveRestartEnableEXT(commandBuffer_, primitiveRestartEnable_){
  let fn = __symbol_fn_vkCmdSetPrimitiveRestartEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetPrimitiveRestartEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetPrimitiveRestartEnableEXT: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetPrimitiveRestartEnableEXT;
    fn = __symbol_fn_vkCmdSetPrimitiveRestartEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, primitiveRestartEnable_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetColorWriteEnableEXT = null;
export function vkCmdSetColorWriteEnableEXT(commandBuffer_, attachmentCount_, pColorWriteEnables_){
  let fn = __symbol_fn_vkCmdSetColorWriteEnableEXT;
  if (fn === null){
    __symbol_fn_vkCmdSetColorWriteEnableEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetColorWriteEnableEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetColorWriteEnableEXT;
    fn = __symbol_fn_vkCmdSetColorWriteEnableEXT;
  }
  
  const ___ret =  fn(commandBuffer_, attachmentCount_, pColorWriteEnables_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawMultiEXT = null;
export function vkCmdDrawMultiEXT(commandBuffer_, drawCount_, pVertexInfo_, instanceCount_, firstInstance_, stride_){
  let fn = __symbol_fn_vkCmdDrawMultiEXT;
  if (fn === null){
    __symbol_fn_vkCmdDrawMultiEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawMultiEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawMultiEXT;
    fn = __symbol_fn_vkCmdDrawMultiEXT;
  }
  
        let pVertexInfo__buffer = null
        if (pVertexInfo_ !== null && typeof pVertexInfo_ === 'object'){
          pVertexInfo__buffer = VkMultiDrawInfoEXT_to_C(pVertexInfo_ );
          pVertexInfo_ = pVertexInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, drawCount_, pVertexInfo_, instanceCount_, firstInstance_, stride_);
  
      pVertexInfo__buffer && pVertexInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdDrawMultiIndexedEXT = null;
export function vkCmdDrawMultiIndexedEXT(commandBuffer_, drawCount_, pIndexInfo_, instanceCount_, firstInstance_, stride_, pVertexOffset_){
  let fn = __symbol_fn_vkCmdDrawMultiIndexedEXT;
  if (fn === null){
    __symbol_fn_vkCmdDrawMultiIndexedEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdDrawMultiIndexedEXT: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u32,FFIType.u32,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdDrawMultiIndexedEXT;
    fn = __symbol_fn_vkCmdDrawMultiIndexedEXT;
  }
  
        let pIndexInfo__buffer = null
        if (pIndexInfo_ !== null && typeof pIndexInfo_ === 'object'){
          pIndexInfo__buffer = VkMultiDrawIndexedInfoEXT_to_C(pIndexInfo_ );
          pIndexInfo_ = pIndexInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, drawCount_, pIndexInfo_, instanceCount_, firstInstance_, stride_, pVertexOffset_);
  
      pIndexInfo__buffer && pIndexInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkSetDeviceMemoryPriorityEXT = null;
export function vkSetDeviceMemoryPriorityEXT(device_, memory_, priority_){
  let fn = __symbol_fn_vkSetDeviceMemoryPriorityEXT;
  if (fn === null){
    __symbol_fn_vkSetDeviceMemoryPriorityEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkSetDeviceMemoryPriorityEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.f32],
      	returns: FFIType.u64
    }}).symbols.vkSetDeviceMemoryPriorityEXT;
    fn = __symbol_fn_vkSetDeviceMemoryPriorityEXT;
  }
  
  const ___ret =  fn(device_, memory_, priority_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = null;
export function vkGetDescriptorSetLayoutHostMappingInfoVALVE(device_, pBindingReference_, pHostMapping_){
  let fn = __symbol_fn_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
  if (fn === null){
    __symbol_fn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDescriptorSetLayoutHostMappingInfoVALVE: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDescriptorSetLayoutHostMappingInfoVALVE;
    fn = __symbol_fn_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
  }
  
        let pBindingReference__buffer = null
        if (pBindingReference_ !== null && typeof pBindingReference_ === 'object'){
          pBindingReference__buffer = VkDescriptorSetBindingReferenceVALVE_to_C(pBindingReference_ );
          pBindingReference_ = pBindingReference__buffer.ptr;
}
        let pHostMapping__buffer = null
        if (pHostMapping_ !== null && typeof pHostMapping_ === 'object'){
          pHostMapping__buffer = VkDescriptorSetLayoutHostMappingInfoVALVE_to_C(pHostMapping_ );
          pHostMapping_ = pHostMapping__buffer.ptr;
}
  const ___ret =  fn(device_, pBindingReference_, pHostMapping_);
  
      pBindingReference__buffer && pBindingReference__buffer.free()
      
      pHostMapping__buffer && pHostMapping__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDescriptorSetHostMappingVALVE = null;
export function vkGetDescriptorSetHostMappingVALVE(device_, descriptorSet_, ppData_){
  let fn = __symbol_fn_vkGetDescriptorSetHostMappingVALVE;
  if (fn === null){
    __symbol_fn_vkGetDescriptorSetHostMappingVALVE = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDescriptorSetHostMappingVALVE: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDescriptorSetHostMappingVALVE;
    fn = __symbol_fn_vkGetDescriptorSetHostMappingVALVE;
  }
  
  const ___ret =  fn(device_, descriptorSet_, ppData_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetShaderModuleIdentifierEXT = null;
export function vkGetShaderModuleIdentifierEXT(device_, shaderModule_, pIdentifier_){
  let fn = __symbol_fn_vkGetShaderModuleIdentifierEXT;
  if (fn === null){
    __symbol_fn_vkGetShaderModuleIdentifierEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetShaderModuleIdentifierEXT: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetShaderModuleIdentifierEXT;
    fn = __symbol_fn_vkGetShaderModuleIdentifierEXT;
  }
  
        let pIdentifier__buffer = null
        if (pIdentifier_ !== null && typeof pIdentifier_ === 'object'){
          pIdentifier__buffer = VkShaderModuleIdentifierEXT_to_C(pIdentifier_ );
          pIdentifier_ = pIdentifier__buffer.ptr;
}
  const ___ret =  fn(device_, shaderModule_, pIdentifier_);
  
      pIdentifier__buffer && pIdentifier__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetShaderModuleCreateInfoIdentifierEXT = null;
export function vkGetShaderModuleCreateInfoIdentifierEXT(device_, pCreateInfo_, pIdentifier_){
  let fn = __symbol_fn_vkGetShaderModuleCreateInfoIdentifierEXT;
  if (fn === null){
    __symbol_fn_vkGetShaderModuleCreateInfoIdentifierEXT = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetShaderModuleCreateInfoIdentifierEXT: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetShaderModuleCreateInfoIdentifierEXT;
    fn = __symbol_fn_vkGetShaderModuleCreateInfoIdentifierEXT;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkShaderModuleCreateInfo_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pIdentifier__buffer = null
        if (pIdentifier_ !== null && typeof pIdentifier_ === 'object'){
          pIdentifier__buffer = VkShaderModuleIdentifierEXT_to_C(pIdentifier_ );
          pIdentifier_ = pIdentifier__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pIdentifier_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pIdentifier__buffer && pIdentifier__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetFramebufferTilePropertiesQCOM = null;
export function vkGetFramebufferTilePropertiesQCOM(device_, framebuffer_, pPropertiesCount_, pProperties_){
  let fn = __symbol_fn_vkGetFramebufferTilePropertiesQCOM;
  if (fn === null){
    __symbol_fn_vkGetFramebufferTilePropertiesQCOM = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetFramebufferTilePropertiesQCOM: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetFramebufferTilePropertiesQCOM;
    fn = __symbol_fn_vkGetFramebufferTilePropertiesQCOM;
  }
  
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkTilePropertiesQCOM_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(device_, framebuffer_, pPropertiesCount_, pProperties_);
  
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetDynamicRenderingTilePropertiesQCOM = null;
export function vkGetDynamicRenderingTilePropertiesQCOM(device_, pRenderingInfo_, pProperties_){
  let fn = __symbol_fn_vkGetDynamicRenderingTilePropertiesQCOM;
  if (fn === null){
    __symbol_fn_vkGetDynamicRenderingTilePropertiesQCOM = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDynamicRenderingTilePropertiesQCOM: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetDynamicRenderingTilePropertiesQCOM;
    fn = __symbol_fn_vkGetDynamicRenderingTilePropertiesQCOM;
  }
  
        let pRenderingInfo__buffer = null
        if (pRenderingInfo_ !== null && typeof pRenderingInfo_ === 'object'){
          pRenderingInfo__buffer = VkRenderingInfo_to_C(pRenderingInfo_ );
          pRenderingInfo_ = pRenderingInfo__buffer.ptr;
}
        let pProperties__buffer = null
        if (pProperties_ !== null && typeof pProperties_ === 'object'){
          pProperties__buffer = VkTilePropertiesQCOM_to_C(pProperties_ );
          pProperties_ = pProperties__buffer.ptr;
}
  const ___ret =  fn(device_, pRenderingInfo_, pProperties_);
  
      pRenderingInfo__buffer && pRenderingInfo__buffer.free()
      
      pProperties__buffer && pProperties__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateAccelerationStructureKHR = null;
export function vkCreateAccelerationStructureKHR(device_, pCreateInfo_, pAllocator_, pAccelerationStructure_){
  let fn = __symbol_fn_vkCreateAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkCreateAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateAccelerationStructureKHR;
    fn = __symbol_fn_vkCreateAccelerationStructureKHR;
  }
  
        let pCreateInfo__buffer = null
        if (pCreateInfo_ !== null && typeof pCreateInfo_ === 'object'){
          pCreateInfo__buffer = VkAccelerationStructureCreateInfoKHR_to_C(pCreateInfo_ );
          pCreateInfo_ = pCreateInfo__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, pCreateInfo_, pAllocator_, pAccelerationStructure_);
  
      pCreateInfo__buffer && pCreateInfo__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkDestroyAccelerationStructureKHR = null;
export function vkDestroyAccelerationStructureKHR(device_, accelerationStructure_, pAllocator_){
  let fn = __symbol_fn_vkDestroyAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkDestroyAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkDestroyAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkDestroyAccelerationStructureKHR;
    fn = __symbol_fn_vkDestroyAccelerationStructureKHR;
  }
  
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, accelerationStructure_, pAllocator_);
  
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBuildAccelerationStructuresKHR = null;
export function vkCmdBuildAccelerationStructuresKHR(commandBuffer_, infoCount_, pInfos_, ppBuildRangeInfos_){
  let fn = __symbol_fn_vkCmdBuildAccelerationStructuresKHR;
  if (fn === null){
    __symbol_fn_vkCmdBuildAccelerationStructuresKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBuildAccelerationStructuresKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBuildAccelerationStructuresKHR;
    fn = __symbol_fn_vkCmdBuildAccelerationStructuresKHR;
  }
  
        let pInfos__buffer = null
        if (pInfos_ !== null && typeof pInfos_ === 'object'){
          pInfos__buffer = VkAccelerationStructureBuildGeometryInfoKHR_to_C(pInfos_ );
          pInfos_ = pInfos__buffer.ptr;
}
        let ppBuildRangeInfos__buffer = null
        if (ppBuildRangeInfos_ !== null && typeof ppBuildRangeInfos_ === 'object'){
          ppBuildRangeInfos__buffer = VkAccelerationStructureBuildRangeInfoKHR_to_C(ppBuildRangeInfos_ );
          ppBuildRangeInfos_ = ppBuildRangeInfos__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, infoCount_, pInfos_, ppBuildRangeInfos_);
  
      pInfos__buffer && pInfos__buffer.free()
      
      ppBuildRangeInfos__buffer && ppBuildRangeInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdBuildAccelerationStructuresIndirectKHR = null;
export function vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer_, infoCount_, pInfos_, pIndirectDeviceAddresses_, pIndirectStrides_, ppMaxPrimitiveCounts_){
  let fn = __symbol_fn_vkCmdBuildAccelerationStructuresIndirectKHR;
  if (fn === null){
    __symbol_fn_vkCmdBuildAccelerationStructuresIndirectKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdBuildAccelerationStructuresIndirectKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdBuildAccelerationStructuresIndirectKHR;
    fn = __symbol_fn_vkCmdBuildAccelerationStructuresIndirectKHR;
  }
  
        let pInfos__buffer = null
        if (pInfos_ !== null && typeof pInfos_ === 'object'){
          pInfos__buffer = VkAccelerationStructureBuildGeometryInfoKHR_to_C(pInfos_ );
          pInfos_ = pInfos__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, infoCount_, pInfos_, pIndirectDeviceAddresses_, pIndirectStrides_, ppMaxPrimitiveCounts_);
  
      pInfos__buffer && pInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkBuildAccelerationStructuresKHR = null;
export function vkBuildAccelerationStructuresKHR(device_, deferredOperation_, infoCount_, pInfos_, ppBuildRangeInfos_){
  let fn = __symbol_fn_vkBuildAccelerationStructuresKHR;
  if (fn === null){
    __symbol_fn_vkBuildAccelerationStructuresKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkBuildAccelerationStructuresKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkBuildAccelerationStructuresKHR;
    fn = __symbol_fn_vkBuildAccelerationStructuresKHR;
  }
  
        let pInfos__buffer = null
        if (pInfos_ !== null && typeof pInfos_ === 'object'){
          pInfos__buffer = VkAccelerationStructureBuildGeometryInfoKHR_to_C(pInfos_ );
          pInfos_ = pInfos__buffer.ptr;
}
        let ppBuildRangeInfos__buffer = null
        if (ppBuildRangeInfos_ !== null && typeof ppBuildRangeInfos_ === 'object'){
          ppBuildRangeInfos__buffer = VkAccelerationStructureBuildRangeInfoKHR_to_C(ppBuildRangeInfos_ );
          ppBuildRangeInfos_ = ppBuildRangeInfos__buffer.ptr;
}
  const ___ret =  fn(device_, deferredOperation_, infoCount_, pInfos_, ppBuildRangeInfos_);
  
      pInfos__buffer && pInfos__buffer.free()
      
      ppBuildRangeInfos__buffer && ppBuildRangeInfos__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCopyAccelerationStructureKHR = null;
export function vkCopyAccelerationStructureKHR(device_, deferredOperation_, pInfo_){
  let fn = __symbol_fn_vkCopyAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkCopyAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCopyAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCopyAccelerationStructureKHR;
    fn = __symbol_fn_vkCopyAccelerationStructureKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyAccelerationStructureInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, deferredOperation_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCopyAccelerationStructureToMemoryKHR = null;
export function vkCopyAccelerationStructureToMemoryKHR(device_, deferredOperation_, pInfo_){
  let fn = __symbol_fn_vkCopyAccelerationStructureToMemoryKHR;
  if (fn === null){
    __symbol_fn_vkCopyAccelerationStructureToMemoryKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCopyAccelerationStructureToMemoryKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCopyAccelerationStructureToMemoryKHR;
    fn = __symbol_fn_vkCopyAccelerationStructureToMemoryKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyAccelerationStructureToMemoryInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, deferredOperation_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCopyMemoryToAccelerationStructureKHR = null;
export function vkCopyMemoryToAccelerationStructureKHR(device_, deferredOperation_, pInfo_){
  let fn = __symbol_fn_vkCopyMemoryToAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkCopyMemoryToAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCopyMemoryToAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCopyMemoryToAccelerationStructureKHR;
    fn = __symbol_fn_vkCopyMemoryToAccelerationStructureKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyMemoryToAccelerationStructureInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, deferredOperation_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkWriteAccelerationStructuresPropertiesKHR = null;
export function vkWriteAccelerationStructuresPropertiesKHR(device_, accelerationStructureCount_, pAccelerationStructures_, queryType_, dataSize_, pData_, stride_){
  let fn = __symbol_fn_vkWriteAccelerationStructuresPropertiesKHR;
  if (fn === null){
    __symbol_fn_vkWriteAccelerationStructuresPropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkWriteAccelerationStructuresPropertiesKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u64,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u32
    }}).symbols.vkWriteAccelerationStructuresPropertiesKHR;
    fn = __symbol_fn_vkWriteAccelerationStructuresPropertiesKHR;
  }
  
  const ___ret =  fn(device_, accelerationStructureCount_, pAccelerationStructures_, queryType_, dataSize_, pData_, stride_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyAccelerationStructureKHR = null;
export function vkCmdCopyAccelerationStructureKHR(commandBuffer_, pInfo_){
  let fn = __symbol_fn_vkCmdCopyAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyAccelerationStructureKHR;
    fn = __symbol_fn_vkCmdCopyAccelerationStructureKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyAccelerationStructureInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyAccelerationStructureToMemoryKHR = null;
export function vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer_, pInfo_){
  let fn = __symbol_fn_vkCmdCopyAccelerationStructureToMemoryKHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyAccelerationStructureToMemoryKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyAccelerationStructureToMemoryKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyAccelerationStructureToMemoryKHR;
    fn = __symbol_fn_vkCmdCopyAccelerationStructureToMemoryKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyAccelerationStructureToMemoryInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdCopyMemoryToAccelerationStructureKHR = null;
export function vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer_, pInfo_){
  let fn = __symbol_fn_vkCmdCopyMemoryToAccelerationStructureKHR;
  if (fn === null){
    __symbol_fn_vkCmdCopyMemoryToAccelerationStructureKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdCopyMemoryToAccelerationStructureKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkCmdCopyMemoryToAccelerationStructureKHR;
    fn = __symbol_fn_vkCmdCopyMemoryToAccelerationStructureKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkCopyMemoryToAccelerationStructureInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetAccelerationStructureDeviceAddressKHR = null;
export function vkGetAccelerationStructureDeviceAddressKHR(device_, pInfo_){
  let fn = __symbol_fn_vkGetAccelerationStructureDeviceAddressKHR;
  if (fn === null){
    __symbol_fn_vkGetAccelerationStructureDeviceAddressKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetAccelerationStructureDeviceAddressKHR: {
      args: [FFIType.u64,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetAccelerationStructureDeviceAddressKHR;
    fn = __symbol_fn_vkGetAccelerationStructureDeviceAddressKHR;
  }
  
        let pInfo__buffer = null
        if (pInfo_ !== null && typeof pInfo_ === 'object'){
          pInfo__buffer = VkAccelerationStructureDeviceAddressInfoKHR_to_C(pInfo_ );
          pInfo_ = pInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pInfo_);
  
      pInfo__buffer && pInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesKHR = null;
export function vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer_, accelerationStructureCount_, pAccelerationStructures_, queryType_, queryPool_, firstQuery_){
  let fn = __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesKHR;
  if (fn === null){
    __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdWriteAccelerationStructuresPropertiesKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.u32,FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdWriteAccelerationStructuresPropertiesKHR;
    fn = __symbol_fn_vkCmdWriteAccelerationStructuresPropertiesKHR;
  }
  
  const ___ret =  fn(commandBuffer_, accelerationStructureCount_, pAccelerationStructures_, queryType_, queryPool_, firstQuery_);
  
  return ___ret;
}
  
let __symbol_fn_vkGetDeviceAccelerationStructureCompatibilityKHR = null;
export function vkGetDeviceAccelerationStructureCompatibilityKHR(device_, pVersionInfo_, pCompatibility_){
  let fn = __symbol_fn_vkGetDeviceAccelerationStructureCompatibilityKHR;
  if (fn === null){
    __symbol_fn_vkGetDeviceAccelerationStructureCompatibilityKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetDeviceAccelerationStructureCompatibilityKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetDeviceAccelerationStructureCompatibilityKHR;
    fn = __symbol_fn_vkGetDeviceAccelerationStructureCompatibilityKHR;
  }
  
        let pVersionInfo__buffer = null
        if (pVersionInfo_ !== null && typeof pVersionInfo_ === 'object'){
          pVersionInfo__buffer = VkAccelerationStructureVersionInfoKHR_to_C(pVersionInfo_ );
          pVersionInfo_ = pVersionInfo__buffer.ptr;
}
  const ___ret =  fn(device_, pVersionInfo_, pCompatibility_);
  
      pVersionInfo__buffer && pVersionInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetAccelerationStructureBuildSizesKHR = null;
export function vkGetAccelerationStructureBuildSizesKHR(device_, buildType_, pBuildInfo_, pMaxPrimitiveCounts_, pSizeInfo_){
  let fn = __symbol_fn_vkGetAccelerationStructureBuildSizesKHR;
  if (fn === null){
    __symbol_fn_vkGetAccelerationStructureBuildSizesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetAccelerationStructureBuildSizesKHR: {
      args: [FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u64
    }}).symbols.vkGetAccelerationStructureBuildSizesKHR;
    fn = __symbol_fn_vkGetAccelerationStructureBuildSizesKHR;
  }
  
        let pBuildInfo__buffer = null
        if (pBuildInfo_ !== null && typeof pBuildInfo_ === 'object'){
          pBuildInfo__buffer = VkAccelerationStructureBuildGeometryInfoKHR_to_C(pBuildInfo_ );
          pBuildInfo_ = pBuildInfo__buffer.ptr;
}
        let pSizeInfo__buffer = null
        if (pSizeInfo_ !== null && typeof pSizeInfo_ === 'object'){
          pSizeInfo__buffer = VkAccelerationStructureBuildSizesInfoKHR_to_C(pSizeInfo_ );
          pSizeInfo_ = pSizeInfo__buffer.ptr;
}
  const ___ret =  fn(device_, buildType_, pBuildInfo_, pMaxPrimitiveCounts_, pSizeInfo_);
  
      pBuildInfo__buffer && pBuildInfo__buffer.free()
      
      pSizeInfo__buffer && pSizeInfo__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCmdTraceRaysKHR = null;
export function vkCmdTraceRaysKHR(commandBuffer_, pRaygenShaderBindingTable_, pMissShaderBindingTable_, pHitShaderBindingTable_, pCallableShaderBindingTable_, width_, height_, depth_){
  let fn = __symbol_fn_vkCmdTraceRaysKHR;
  if (fn === null){
    __symbol_fn_vkCmdTraceRaysKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdTraceRaysKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.u32,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdTraceRaysKHR;
    fn = __symbol_fn_vkCmdTraceRaysKHR;
  }
  
        let pRaygenShaderBindingTable__buffer = null
        if (pRaygenShaderBindingTable_ !== null && typeof pRaygenShaderBindingTable_ === 'object'){
          pRaygenShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pRaygenShaderBindingTable_ );
          pRaygenShaderBindingTable_ = pRaygenShaderBindingTable__buffer.ptr;
}
        let pMissShaderBindingTable__buffer = null
        if (pMissShaderBindingTable_ !== null && typeof pMissShaderBindingTable_ === 'object'){
          pMissShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pMissShaderBindingTable_ );
          pMissShaderBindingTable_ = pMissShaderBindingTable__buffer.ptr;
}
        let pHitShaderBindingTable__buffer = null
        if (pHitShaderBindingTable_ !== null && typeof pHitShaderBindingTable_ === 'object'){
          pHitShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pHitShaderBindingTable_ );
          pHitShaderBindingTable_ = pHitShaderBindingTable__buffer.ptr;
}
        let pCallableShaderBindingTable__buffer = null
        if (pCallableShaderBindingTable_ !== null && typeof pCallableShaderBindingTable_ === 'object'){
          pCallableShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pCallableShaderBindingTable_ );
          pCallableShaderBindingTable_ = pCallableShaderBindingTable__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRaygenShaderBindingTable_, pMissShaderBindingTable_, pHitShaderBindingTable_, pCallableShaderBindingTable_, width_, height_, depth_);
  
      pRaygenShaderBindingTable__buffer && pRaygenShaderBindingTable__buffer.free()
      
      pMissShaderBindingTable__buffer && pMissShaderBindingTable__buffer.free()
      
      pHitShaderBindingTable__buffer && pHitShaderBindingTable__buffer.free()
      
      pCallableShaderBindingTable__buffer && pCallableShaderBindingTable__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkCreateRayTracingPipelinesKHR = null;
export function vkCreateRayTracingPipelinesKHR(device_, deferredOperation_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_){
  let fn = __symbol_fn_vkCreateRayTracingPipelinesKHR;
  if (fn === null){
    __symbol_fn_vkCreateRayTracingPipelinesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCreateRayTracingPipelinesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u64,FFIType.u32,FFIType.ptr,FFIType.ptr,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkCreateRayTracingPipelinesKHR;
    fn = __symbol_fn_vkCreateRayTracingPipelinesKHR;
  }
  
        let pCreateInfos__buffer = null
        if (pCreateInfos_ !== null && typeof pCreateInfos_ === 'object'){
          pCreateInfos__buffer = VkRayTracingPipelineCreateInfoKHR_to_C(pCreateInfos_ );
          pCreateInfos_ = pCreateInfos__buffer.ptr;
}
        let pAllocator__buffer = null
        if (pAllocator_ !== null && typeof pAllocator_ === 'object'){
          pAllocator__buffer = VkAllocationCallbacks_to_C(pAllocator_ );
          pAllocator_ = pAllocator__buffer.ptr;
}
  const ___ret =  fn(device_, deferredOperation_, pipelineCache_, createInfoCount_, pCreateInfos_, pAllocator_, pPipelines_);
  
      pCreateInfos__buffer && pCreateInfos__buffer.free()
      
      pAllocator__buffer && pAllocator__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null;
export function vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_){
  let fn = __symbol_fn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
  if (fn === null){
    __symbol_fn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32,FFIType.u64,FFIType.ptr],
      	returns: FFIType.u32
    }}).symbols.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
    fn = __symbol_fn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
  }
  
  const ___ret =  fn(device_, pipeline_, firstGroup_, groupCount_, dataSize_, pData_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdTraceRaysIndirectKHR = null;
export function vkCmdTraceRaysIndirectKHR(commandBuffer_, pRaygenShaderBindingTable_, pMissShaderBindingTable_, pHitShaderBindingTable_, pCallableShaderBindingTable_, indirectDeviceAddress_){
  let fn = __symbol_fn_vkCmdTraceRaysIndirectKHR;
  if (fn === null){
    __symbol_fn_vkCmdTraceRaysIndirectKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdTraceRaysIndirectKHR: {
      args: [FFIType.u64,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.ptr,FFIType.u64],
      	returns: FFIType.u64
    }}).symbols.vkCmdTraceRaysIndirectKHR;
    fn = __symbol_fn_vkCmdTraceRaysIndirectKHR;
  }
  
        let pRaygenShaderBindingTable__buffer = null
        if (pRaygenShaderBindingTable_ !== null && typeof pRaygenShaderBindingTable_ === 'object'){
          pRaygenShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pRaygenShaderBindingTable_ );
          pRaygenShaderBindingTable_ = pRaygenShaderBindingTable__buffer.ptr;
}
        let pMissShaderBindingTable__buffer = null
        if (pMissShaderBindingTable_ !== null && typeof pMissShaderBindingTable_ === 'object'){
          pMissShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pMissShaderBindingTable_ );
          pMissShaderBindingTable_ = pMissShaderBindingTable__buffer.ptr;
}
        let pHitShaderBindingTable__buffer = null
        if (pHitShaderBindingTable_ !== null && typeof pHitShaderBindingTable_ === 'object'){
          pHitShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pHitShaderBindingTable_ );
          pHitShaderBindingTable_ = pHitShaderBindingTable__buffer.ptr;
}
        let pCallableShaderBindingTable__buffer = null
        if (pCallableShaderBindingTable_ !== null && typeof pCallableShaderBindingTable_ === 'object'){
          pCallableShaderBindingTable__buffer = VkStridedDeviceAddressRegionKHR_to_C(pCallableShaderBindingTable_ );
          pCallableShaderBindingTable_ = pCallableShaderBindingTable__buffer.ptr;
}
  const ___ret =  fn(commandBuffer_, pRaygenShaderBindingTable_, pMissShaderBindingTable_, pHitShaderBindingTable_, pCallableShaderBindingTable_, indirectDeviceAddress_);
  
      pRaygenShaderBindingTable__buffer && pRaygenShaderBindingTable__buffer.free()
      
      pMissShaderBindingTable__buffer && pMissShaderBindingTable__buffer.free()
      
      pHitShaderBindingTable__buffer && pHitShaderBindingTable__buffer.free()
      
      pCallableShaderBindingTable__buffer && pCallableShaderBindingTable__buffer.free()
      
  return ___ret;
}
  
let __symbol_fn_vkGetRayTracingShaderGroupStackSizeKHR = null;
export function vkGetRayTracingShaderGroupStackSizeKHR(device_, pipeline_, group_, groupShader_){
  let fn = __symbol_fn_vkGetRayTracingShaderGroupStackSizeKHR;
  if (fn === null){
    __symbol_fn_vkGetRayTracingShaderGroupStackSizeKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkGetRayTracingShaderGroupStackSizeKHR: {
      args: [FFIType.u64,FFIType.u64,FFIType.u32,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkGetRayTracingShaderGroupStackSizeKHR;
    fn = __symbol_fn_vkGetRayTracingShaderGroupStackSizeKHR;
  }
  
  const ___ret =  fn(device_, pipeline_, group_, groupShader_);
  
  return ___ret;
}
  
let __symbol_fn_vkCmdSetRayTracingPipelineStackSizeKHR = null;
export function vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer_, pipelineStackSize_){
  let fn = __symbol_fn_vkCmdSetRayTracingPipelineStackSizeKHR;
  if (fn === null){
    __symbol_fn_vkCmdSetRayTracingPipelineStackSizeKHR = dlopen("/usr/lib/x86_64-linux-gnu/libvulkan.so.1", {vkCmdSetRayTracingPipelineStackSizeKHR: {
      args: [FFIType.u64,FFIType.u32],
      	returns: FFIType.u64
    }}).symbols.vkCmdSetRayTracingPipelineStackSizeKHR;
    fn = __symbol_fn_vkCmdSetRayTracingPipelineStackSizeKHR;
  }
  
  const ___ret =  fn(commandBuffer_, pipelineStackSize_);
  
  return ___ret;
}
  

